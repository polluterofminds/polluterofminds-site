"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-equals";
exports.ids = ["vendor-chunks/fast-equals"];
exports.modules = {

/***/ "(ssr)/./node_modules/fast-equals/dist/fast-equals.cjs.js":
/*!**********************************************************!*\
  !*** ./node_modules/fast-equals/dist/fast-equals.cjs.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function';\r\nvar keys = Object.keys;\r\n/**\r\n * are the values passed strictly equal or both NaN\r\n *\r\n * @param a the value to compare against\r\n * @param b the value to test\r\n * @returns are the values equal by the SameValueZero principle\r\n */\r\nfunction sameValueZeroEqual(a, b) {\r\n    return a === b || (a !== a && b !== b);\r\n}\r\n/**\r\n * is the value a plain object\r\n *\r\n * @param value the value to test\r\n * @returns is the value a plain object\r\n */\r\nfunction isPlainObject(value) {\r\n    return value.constructor === Object || value.constructor == null;\r\n}\r\n/**\r\n * is the value promise-like (meaning it is thenable)\r\n *\r\n * @param value the value to test\r\n * @returns is the value promise-like\r\n */\r\nfunction isPromiseLike(value) {\r\n    return !!value && typeof value.then === 'function';\r\n}\r\n/**\r\n * is the value passed a react element\r\n *\r\n * @param value the value to test\r\n * @returns is the value a react element\r\n */\r\nfunction isReactElement(value) {\r\n    return !!(value && value.$$typeof);\r\n}\r\n/**\r\n * in cases where WeakSet is not supported, creates a new custom\r\n * object that mimics the necessary API aspects for cache purposes\r\n *\r\n * @returns the new cache object\r\n */\r\nfunction getNewCacheFallback() {\r\n    var values = [];\r\n    return {\r\n        add: function (value) {\r\n            values.push(value);\r\n        },\r\n        has: function (value) {\r\n            return values.indexOf(value) !== -1;\r\n        },\r\n    };\r\n}\r\n/**\r\n * get a new cache object to prevent circular references\r\n *\r\n * @returns the new cache object\r\n */\r\nvar getNewCache = (function (canUseWeakMap) {\r\n    if (canUseWeakMap) {\r\n        return function _getNewCache() {\r\n            return new WeakSet();\r\n        };\r\n    }\r\n    return getNewCacheFallback;\r\n})(HAS_WEAKSET_SUPPORT);\r\n/**\r\n * create a custom isEqual handler specific to circular objects\r\n *\r\n * @param [isEqual] the isEqual comparator to use instead of isDeepEqual\r\n * @returns the method to create the `isEqual` function\r\n */\r\nfunction createCircularEqualCreator(isEqual) {\r\n    return function createCircularEqual(comparator) {\r\n        var _comparator = isEqual || comparator;\r\n        return function circularEqual(a, b, cache) {\r\n            if (cache === void 0) { cache = getNewCache(); }\r\n            var isCacheableA = !!a && typeof a === 'object';\r\n            var isCacheableB = !!b && typeof b === 'object';\r\n            if (isCacheableA || isCacheableB) {\r\n                var hasA = isCacheableA && cache.has(a);\r\n                var hasB = isCacheableB && cache.has(b);\r\n                if (hasA || hasB) {\r\n                    return hasA && hasB;\r\n                }\r\n                if (isCacheableA) {\r\n                    cache.add(a);\r\n                }\r\n                if (isCacheableB) {\r\n                    cache.add(b);\r\n                }\r\n            }\r\n            return _comparator(a, b, cache);\r\n        };\r\n    };\r\n}\r\n/**\r\n * are the arrays equal in value\r\n *\r\n * @param a the array to test\r\n * @param b the array to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta object to pass through\r\n * @returns are the arrays equal\r\n */\r\nfunction areArraysEqual(a, b, isEqual, meta) {\r\n    var index = a.length;\r\n    if (b.length !== index) {\r\n        return false;\r\n    }\r\n    while (index-- > 0) {\r\n        if (!isEqual(a[index], b[index], meta)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * are the maps equal in value\r\n *\r\n * @param a the map to test\r\n * @param b the map to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta map to pass through\r\n * @returns are the maps equal\r\n */\r\nfunction areMapsEqual(a, b, isEqual, meta) {\r\n    var isValueEqual = a.size === b.size;\r\n    if (isValueEqual && a.size) {\r\n        var matchedIndices_1 = {};\r\n        a.forEach(function (aValue, aKey) {\r\n            if (isValueEqual) {\r\n                var hasMatch_1 = false;\r\n                var matchIndex_1 = 0;\r\n                b.forEach(function (bValue, bKey) {\r\n                    if (!hasMatch_1 && !matchedIndices_1[matchIndex_1]) {\r\n                        hasMatch_1 =\r\n                            isEqual(aKey, bKey, meta) && isEqual(aValue, bValue, meta);\r\n                        if (hasMatch_1) {\r\n                            matchedIndices_1[matchIndex_1] = true;\r\n                        }\r\n                    }\r\n                    matchIndex_1++;\r\n                });\r\n                isValueEqual = hasMatch_1;\r\n            }\r\n        });\r\n    }\r\n    return isValueEqual;\r\n}\r\nvar OWNER = '_owner';\r\nvar hasOwnProperty = Function.prototype.bind.call(Function.prototype.call, Object.prototype.hasOwnProperty);\r\n/**\r\n * are the objects equal in value\r\n *\r\n * @param a the object to test\r\n * @param b the object to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta object to pass through\r\n * @returns are the objects equal\r\n */\r\nfunction areObjectsEqual(a, b, isEqual, meta) {\r\n    var keysA = keys(a);\r\n    var index = keysA.length;\r\n    if (keys(b).length !== index) {\r\n        return false;\r\n    }\r\n    if (index) {\r\n        var key = void 0;\r\n        while (index-- > 0) {\r\n            key = keysA[index];\r\n            if (key === OWNER) {\r\n                var reactElementA = isReactElement(a);\r\n                var reactElementB = isReactElement(b);\r\n                if ((reactElementA || reactElementB) &&\r\n                    reactElementA !== reactElementB) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!hasOwnProperty(b, key) || !isEqual(a[key], b[key], meta)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * are the regExps equal in value\r\n *\r\n * @param a the regExp to test\r\n * @param b the regExp to test agains\r\n * @returns are the regExps equal\r\n */\r\nfunction areRegExpsEqual(a, b) {\r\n    return (a.source === b.source &&\r\n        a.global === b.global &&\r\n        a.ignoreCase === b.ignoreCase &&\r\n        a.multiline === b.multiline &&\r\n        a.unicode === b.unicode &&\r\n        a.sticky === b.sticky &&\r\n        a.lastIndex === b.lastIndex);\r\n}\r\n/**\r\n * are the sets equal in value\r\n *\r\n * @param a the set to test\r\n * @param b the set to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta set to pass through\r\n * @returns are the sets equal\r\n */\r\nfunction areSetsEqual(a, b, isEqual, meta) {\r\n    var isValueEqual = a.size === b.size;\r\n    if (isValueEqual && a.size) {\r\n        var matchedIndices_2 = {};\r\n        a.forEach(function (aValue) {\r\n            if (isValueEqual) {\r\n                var hasMatch_2 = false;\r\n                var matchIndex_2 = 0;\r\n                b.forEach(function (bValue) {\r\n                    if (!hasMatch_2 && !matchedIndices_2[matchIndex_2]) {\r\n                        hasMatch_2 = isEqual(aValue, bValue, meta);\r\n                        if (hasMatch_2) {\r\n                            matchedIndices_2[matchIndex_2] = true;\r\n                        }\r\n                    }\r\n                    matchIndex_2++;\r\n                });\r\n                isValueEqual = hasMatch_2;\r\n            }\r\n        });\r\n    }\r\n    return isValueEqual;\r\n}\n\nvar HAS_MAP_SUPPORT = typeof Map === 'function';\r\nvar HAS_SET_SUPPORT = typeof Set === 'function';\r\nfunction createComparator(createIsEqual) {\r\n    var isEqual = \r\n    /* eslint-disable no-use-before-define */\r\n    typeof createIsEqual === 'function'\r\n        ? createIsEqual(comparator)\r\n        : comparator;\r\n    /* eslint-enable */\r\n    /**\r\n     * compare the value of the two objects and return true if they are equivalent in values\r\n     *\r\n     * @param a the value to test against\r\n     * @param b the value to test\r\n     * @param [meta] an optional meta object that is passed through to all equality test calls\r\n     * @returns are a and b equivalent in value\r\n     */\r\n    function comparator(a, b, meta) {\r\n        if (a === b) {\r\n            return true;\r\n        }\r\n        if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n            if (isPlainObject(a) && isPlainObject(b)) {\r\n                return areObjectsEqual(a, b, isEqual, meta);\r\n            }\r\n            var aShape = Array.isArray(a);\r\n            var bShape = Array.isArray(b);\r\n            if (aShape || bShape) {\r\n                return aShape === bShape && areArraysEqual(a, b, isEqual, meta);\r\n            }\r\n            aShape = a instanceof Date;\r\n            bShape = b instanceof Date;\r\n            if (aShape || bShape) {\r\n                return (aShape === bShape && sameValueZeroEqual(a.getTime(), b.getTime()));\r\n            }\r\n            aShape = a instanceof RegExp;\r\n            bShape = b instanceof RegExp;\r\n            if (aShape || bShape) {\r\n                return aShape === bShape && areRegExpsEqual(a, b);\r\n            }\r\n            if (isPromiseLike(a) || isPromiseLike(b)) {\r\n                return a === b;\r\n            }\r\n            if (HAS_MAP_SUPPORT) {\r\n                aShape = a instanceof Map;\r\n                bShape = b instanceof Map;\r\n                if (aShape || bShape) {\r\n                    return aShape === bShape && areMapsEqual(a, b, isEqual, meta);\r\n                }\r\n            }\r\n            if (HAS_SET_SUPPORT) {\r\n                aShape = a instanceof Set;\r\n                bShape = b instanceof Set;\r\n                if (aShape || bShape) {\r\n                    return aShape === bShape && areSetsEqual(a, b, isEqual, meta);\r\n                }\r\n            }\r\n            return areObjectsEqual(a, b, isEqual, meta);\r\n        }\r\n        return a !== a && b !== b;\r\n    }\r\n    return comparator;\r\n}\n\nvar deepEqual = createComparator();\r\nvar shallowEqual = createComparator(function () { return sameValueZeroEqual; });\r\nvar circularDeepEqual = createComparator(createCircularEqualCreator());\r\nvar circularShallowEqual = createComparator(createCircularEqualCreator(sameValueZeroEqual));\n\nexports.circularDeepEqual = circularDeepEqual;\nexports.circularShallowEqual = circularShallowEqual;\nexports.createCustomEqual = createComparator;\nexports.deepEqual = deepEqual;\nexports.sameValueZeroEqual = sameValueZeroEqual;\nexports.shallowEqual = shallowEqual;\n//# sourceMappingURL=fast-equals.cjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-equals/dist/fast-equals.cjs.js\n");

/***/ })

};
;