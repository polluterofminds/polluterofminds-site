<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  <subtitle>Articles about product management, entrepreneurship, tech, and more.</subtitle>
  <link href="https://polluterofminds.com/feed/feed.xml" rel="self"/>
  <link href="https://polluterofminds.com"/>
  <updated>2023-06-29T16:37:10Z</updated>
  <id>https://polluterofminds.com</id>
  <author>
    <name>Justin Hunter</name>
    <email>justin@polluterofminds.com</email>
  </author>
  
  <entry>
    <title>Most Product Management Isn&#39;t Product Management</title>
    <link href="https://polluterofminds.com/blog/most_product_management_isn&amp;#39;t_product_management/"/>
    <updated>2023-06-29T16:37:10Z</updated>
    <id>https://polluterofminds.com/blog/most_product_management_isn&amp;#39;t_product_management/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1590402494610-2c378a9114c6?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwxNHx8dGFza3N8ZW58MHx8fHwxNjg3OTgxMzIxfDA&amp;amp;ixlib=rb-4.0.3&amp;amp;q=80&amp;amp;w=1080&quot; alt=&quot;man in white long sleeve shirt writing on white board&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There’s a meme going around social media lately. When isn’t there a meme? This one, though, is particularly annoying because like most memes it intentionally misrepresents something but unlike most memes, it has the power to cause a negative change in the software industry.&lt;/p&gt;
&lt;p&gt;The first I saw of the meme was (likely) &lt;a href=&quot;https://twitter.com/rjs/status/1667875141026455558&quot;&gt;an earnest observation from Ryan Singer&lt;/a&gt; (of Basecamp fame).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31352d0b-148e-4cc3-b9d2-bf694af6a969_1184x586.png&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31352d0b-148e-4cc3-b9d2-bf694af6a969_1184x586.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since then, Brian Chesky of Airbnb was (largely incorrectly quoted) on the topic of the shifting nature of product management, thus amplifying the meme lords who were already latching onto Ryan’s tweet and bending it to express their frustration with how they either experience or their presumed experience of product management.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fceabda62-d22f-456b-9ea9-d7e81683073b_1190x442.png&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fceabda62-d22f-456b-9ea9-d7e81683073b_1190x442.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The context behind Chesky’s response here is that someone had already misinterpreted what he had said in a talk about how Airbnb was shifting the way they think about product management functions. &lt;a href=&quot;https://twitter.com/pitdesi/status/1672318211357048832&quot;&gt;You can see the actual comments Chesky made here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, much of Twitter is piling on product management as if it is a useless function designed to slow engineers down. And I have news for everyone…&lt;/p&gt;
&lt;p&gt;In a lot of cases, it is.&lt;/p&gt;
&lt;p&gt;That’s because many companies aren’t actually practicing product management. Much of what we call product management is either a combination of busy work that used to be lumped in with project management or it is so siloed as to not be effective. Let’s dive into what is happening at these companies and why it feeds the meme. Then, we’ll explore what product management should be in high-functioning organizations.&lt;/p&gt;
&lt;h3&gt;A lot of product management is product ownership&lt;/h3&gt;
&lt;p&gt;As the software world shifted from waterfall to agile, there was a role that came along for the ride. It hitched itself to the product development process potentially out of fear that the process would fail without it. The role is called Product Owner. It’s a defined role within the Scrum agile process, but it also leads to confusion about product management.&lt;/p&gt;
&lt;p&gt;I don&#39;t mean to slight anyone in this role. There are a lot of really great people doing great work in this role. But the role itself assumes there is a need for someone to “own” the process of assigning tasks, moving tasks, following up on tasks, and more. The reason some people may think product management is a hindrance to execution is that those people aren’t closely involved with the “dirty work” of managing the workload.&lt;/p&gt;
&lt;p&gt;This feeling that product managers are blockers is amplified in organizations that “empower” product managers to also be product owners. Such a process combines two roles and should, theoretically, give product managers more ownership over both the vision and the outcome. However, it leaves design and engineering behind. It pits other roles in direct opposition with the product manager because the product manager is the one defining and assigning.&lt;/p&gt;
&lt;p&gt;This leads to the second big problem.&lt;/p&gt;
&lt;h2&gt;Lack of involvement&lt;/h2&gt;
&lt;p&gt;A team with all the context they need to do the job will always operate at a higher level than a team that receives orders and is told to execute. Unfortunately, many organizations do not allow product managers, developers, support, design, and sales to collaborate and build up a shared understanding of the context of their work. This results in everyone taking orders and executing toward some goal without understanding why.&lt;/p&gt;
&lt;p&gt;An even more troubling part of the lack of context is when the product manager herself doesn’t even have the context. In that scenario, there is no opportunity for involvement. Yet even when the product manager has the context, organizational design can get in the way of pushing context and involvement across the chain.&lt;/p&gt;
&lt;p&gt;Deep-seated fallacies also block progress on this front. Engineers who have never gotten on a customer call can sometimes be hesitant to join a product manager on a call. Designers who have traditionally operated in isolation may pull back when sales representatives provide feedback from their experience with prospects. The organizational inertia is towards isolation and not toward collaboration. This sets up a context barrier that leads to frustration.&lt;/p&gt;
&lt;h3&gt;What should product management look like?&lt;/h3&gt;
&lt;p&gt;In Tony Fadell’s fantastic book, Build, he talks about the point of product managers like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The majority of companies I work with misunderstand the role of the product manager—if they even know it exists. They think it&#39;s marketing (nope), it’s project management (nope), it’s press relations/communications (nope), it’s design (nope), product finance (nope), it’s the founder or CEO’s job (not really).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This sums up everything I said in the preceding paragraphs in just a few lines. This is also what causes the memes on social media and the pile-on that happens after the memes are posted. A fundamental lack of understanding and proper implementation of the product manager role wreaks havoc in organizations.&lt;/p&gt;
&lt;p&gt;Fadell goes on to compare the way organizations recognize product management as essentially the same as organizations recognized design in the 80s. They knew it was probably important, but didn’t understand why. So, if there’s such confusion about what product management is and how it should work, how can we hope to define it here?&lt;/p&gt;
&lt;p&gt;The truth is, there probably will never be one definition. Product management is as fluid as the companies that hire for these roles. But we can arrive at general definitions of what product management should &lt;em&gt;include.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Playbooks Over Prescription</title>
    <link href="https://polluterofminds.com/blog/playbooks_over_prescription/"/>
    <updated>2023-06-21T16:38:39Z</updated>
    <id>https://polluterofminds.com/blog/playbooks_over_prescription/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://images.unsplash.com/photo-1609643242070-c69786a76c30?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwxfHxhbnN3ZXJzfGVufDB8fHx8MTY4NzI3MDg3NHww&amp;amp;ixlib=rb-4.0.3&amp;amp;q=80&amp;amp;w=1080&quot;&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1609643242070-c69786a76c30?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwxfHxhbnN3ZXJzfGVufDB8fHx8MTY4NzI3MDg3NHww&amp;amp;ixlib=rb-4.0.3&amp;amp;q=80&amp;amp;w=1080&quot; alt=&quot;a sign that is on the side of a hill&quot; title=&quot;a sign that is on the side of a hill&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A prescription is comforting. You generally need something prescribed to you when you’re in pain, when you have a problem. The simple knowledge that you have the prescription brings peace. Executing the prescription brings relief.&lt;/p&gt;
&lt;p&gt;But when you are managing, mentoring, advising, or leading in some form, prescriptions cause more harm than help. It may feel right—it’s certainly the fastest way to get something done in the moment—to just tell a team what to do, but when you do that, you are robbing them of a critical skill that can only be developed over time and through experience. You also put more on your plate because the people on the teams you work with will come to expect you to solve their problems. The problem compounds from there until it’s a snowball that can’t be stopped. When that happens, you’re left wondering why the team can’t execute when in reality, you never let them.&lt;/p&gt;
&lt;p&gt;You don’t even have to be a formal leader or manager to be a prescriber. Co-workers and friends might ask you for help. And yes, it’s OK to just give them the answer. But there are certainly times when you’d be better off and they’d be better off if you gave them a playbook for answering questions like that themselves in the future.&lt;/p&gt;
&lt;p&gt;When I look back on my career, some of the lessons I apply to product development and leadership today came from my days working in a call center. This whole concept of playbooks over prescriptions came to me originally while working with a team of ten reps in a call center in Tucson, Arizona. I learned very quickly that when people asked me questions and I answered those questions, I was helping them in the moment but hurting them in the long run. And I was hurting myself. People learned to come to me for quick answers. In a call center environment, quick answers are the most valuable currency, and I was taking from my reserve and giving to others without teaching them how to build their own stockpile of currency.&lt;/p&gt;
&lt;p&gt;After I realized this, I would ask one question in response to every question I received:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How did you try to find the answer to this before coming to me?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most of the early interactions after that were some form of frustrated “I didn’t.” And this was great. Because then my response was a suggestion of where they could start to explore the problem and how they could think about ways to find a solution. It took longer. It impacted my time. It impacted their time. But eventually, when people came to me with questions, they would start the question like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I looked here, read this document, and checked this form, but I still have a question about…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those types of questions are great because it means the person asking the question has used the playbooks you’ve provided and is now asking for a new playbook. They are no longer asking for prescriptions.&lt;/p&gt;
&lt;p&gt;Later in my career, while managing teams and leading product development, I expanded this concept beyond just finding answers to questions and into trusting intuitions and experience. When people would come to me and ask my opinion about something, I used to just give my opinion. And there are certainly times where I still do that and it’s necessary. But more often than not, simply giving your opinion is prescribing something that could be solved with another playbook.&lt;/p&gt;
&lt;p&gt;For example, I might have a team member who would ask me what I thought about a product idea or research approach. My answer would almost always be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What do you think about it and why do you think that?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If they could give me a reasoned answer with nonfiction and confidence, then my opinion was not necessary. If they couldn’t, my opinion still didn’t matter because there was a more important step they needed to take. They needed to run a new play from a playbook that would help them articulate the what, why, and how.&lt;/p&gt;
&lt;p&gt;Eventually, my team would come to me, not with a request for my opinion but with a story. The messages from them would sound more like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m going to do this because I looked into X and learned Y, but what’s missing is Z and I’m confident we can move the needle by just doing this one thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I started mentoring startups, this idea of playbooks over prescriptions became even more important. Startups are fragile. If you solve a founder’s problems for them, you’re setting them up for failure in the future. Mentoring and advising are never about solving problems. They are about enablement.&lt;/p&gt;
&lt;p&gt;When I talked to founders, I ask them questions. In fact, 90% of what I do is ask questions. What I am trying to do with these questions is make these founders really think about their problems and how they’ve tried to approach them. Are they running playbooks to help them navigate big questions? Do they know how to build a playbook? Almost without fail, simply asking questions will naturally result in a playbook being built.&lt;/p&gt;
&lt;p&gt;There is a time and a place for quick answers or suggestions. But more often than I think most people realize, a playbook is more impactful. And while later in my career, I helped build playbooks from a leadership position, I started doing this while an individual contributor on a team. So, if you find yourself asking teammates and managers questions that you didn’t try to solve on your own first, consider trying to build your own playbook. If you have trouble, that’s when you go to your team or manager.&lt;/p&gt;
&lt;p&gt;And if you’re a leader dolling out answers without pushing your team to build the muscle memory of discovery, you’re probably hurting them more than you know.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Small p Product</title>
    <link href="https://polluterofminds.com/blog/Small-p-Product/"/>
    <updated>2023-05-09T18:01:17Z</updated>
    <id>https://polluterofminds.com/blog/Small-p-Product/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.midjourney.com/77eafee9-8703-42ca-b03a-be5018197099/0_1.png&quot; alt=&quot;a boy building small toys&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A few years ago, Tom Critchlow—whom I&#39;ve been fortunate enough to get to know recently—wrote a post about &amp;quot;&lt;a href=&quot;https://tomcritchlow.com/2018/02/23/small-b-blogging/&quot;&gt;Small b Blogging&lt;/a&gt;.&amp;quot; The idea was simple. As the web has grown, the ways we can and do share our thoughts have also changed. We often exchange freedom for convenience and reach. And that&#39;s OK. But you should still leave room for what Tom calls blogging with a small &amp;quot;b&amp;quot;. Personal blogs on your own site (or that you at least have some sort of archival control over) is small b blogging. I recently re-read that post and it got the product wheels spinning in my mind.&lt;/p&gt;
&lt;p&gt;The web was originally a bunch of independent sites run by nerds who just wanted to share their thoughts and interact with other nerds. Similarly, as the web progressed, those same nerds started writing software that would run natively on the web. These were small, independent apps. Sometimes they&#39;d cost some money, but more often than not, they were just there because the person who created them wanted them to be there. As the web took off and reached world scale, the notion of startups as we know them today began to rise. Products were things to be funded, to be scaled, to be sold. There was still a place for small, independent apps. But that place seemed to be relegated to side projects and hobbyist adventures.&lt;/p&gt;
&lt;p&gt;Two years ago, &lt;a href=&quot;https://polluterofminds.com/blog/make-small-apps/&quot;&gt;I wrote about making small apps&lt;/a&gt;. I had been tinkering with side apps since coming off two failed startups. Making something for the sake of making it was attractive. But at the same time, I felt the pressure to make money.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I listen to my backlog, this thing is going to grow to be too big, too complex for me to manage as an indie. I have not yet launched out of alpha, but I am happy with the product now. My former MFA cohort uses the app and is happy with it. So, this means I might just leave it alone, even at the risk of it not being something people will pay for.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That pressure, of course, came from me and me alone. But at the time, I hadn&#39;t quite built up the mental separation of apps you build to learn and for fun from apps built to make money. About a month after I wrote that post about making small apps, &lt;a href=&quot;https://polluterofminds.com/blog/your-app-might-not-be-a-business/&quot;&gt;I recognized the separation and wrote about it&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you think your app is a business (and it&#39;s ok to have an app NOT be a business), then you need to charge for it. And charge for it early.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Products are things you can sell. Apps are things you build. An app becomes a product when you receive money for it. It seems simple, but it&#39;s not, especially when we have Silicon Valley success stories constantly thrust before our eyes, making us feel like a successful product isn&#39;t one that makes thousands of dollars or even hundreds of thousands. It&#39;s one that makes hundreds of millions. The antidote to this has been indie apps and indie builders (two different things, mind you).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.indiehackers.com/&quot;&gt;IndieHackers&lt;/a&gt; was a wonderful destination for several years for people wanting to build something by themselves and charge money for it. They were indie hacking &lt;em&gt;products&lt;/em&gt;. These were people who believed in the idea of small p product.&lt;/p&gt;
&lt;p&gt;Just like Tom suggests with small b blogging, small p product has a small scope but a similar feel to big p product. The goal is to make something that people pay money for. And similar to small b blogging having a much wider opportunity for discovery (there isn&#39;t just one homepage for the internet now), small p product presents people with a much wider opportunity for discovery and revenue generation than ever before. The re-distribution of the web creates opportunity.&lt;/p&gt;
&lt;p&gt;Getting started with a product—especially a small p product—has never been easier. When I think back to the mid-to-late 90s and sitting in my Dad&#39;s kitchen as a 12- or 13-year-old kid, I am shocked at how hard it was to make money online. But then I take a step back and remember how new the web was back then. Today, if my Dad and I were having that same conversation, we&#39;d have a couple of dozen ideas by lunchtime. Even better, we could probably launch one or two of them by the next day.&lt;/p&gt;
&lt;p&gt;That&#39;s what small p products offer. You can still build small apps, of course. An app is just that until someone pays you money for it. And if you don&#39;t care to have anyone pay money for it, that&#39;s fine too. Tom helped build &lt;a href=&quot;https://quotebacks.net/&quot;&gt;quotebacks&lt;/a&gt;. It doesn&#39;t make him any money, and from talking with him about it, I think he is 100% OK with that.&lt;/p&gt;
&lt;p&gt;I&#39;ve built two small p products in the last few years:&lt;/p&gt;
&lt;p&gt;1. Write/Sprint - a simple iOS app for timing writing sprints ($0.99)&lt;/p&gt;
&lt;p&gt;2. Perligo - a feedback collection app for writers ($5.99/month)&lt;/p&gt;
&lt;p&gt;I&#39;m writing this post in an app that I hope will be my next small p product, but let&#39;s see where things take me.&lt;/p&gt;
&lt;p&gt;The web is such a magical place. We should take advantage of it in blogging and in creating products.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How To Drive Your Organization To Use Its Own Product</title>
    <link href="https://polluterofminds.com/blog/how-to-drive-your-organization-to-use-its-own-product/"/>
    <updated>2023-03-11T15:45:07Z</updated>
    <id>https://polluterofminds.com/blog/how-to-drive-your-organization-to-use-its-own-product/</id>
    <content type="html">&lt;p&gt;Marketing doesn&#39;t know how the product works. Sales just sells blindly. Engineering takes tasks and builds but never understands why. Product managers only understand their functional area.&lt;/p&gt;
&lt;p&gt;You&#39;ve likely heard these complaints if you&#39;ve worked for a software company of any size that has found product market fit. As the company grows, it becomes harder for every member of the organization to understand the product offering end-to-end. The complaints and frustration don&#39;t stem from an unwillingness to learn the product. The problem doesn&#39;t arise from apathy. Instead, the struggles happen because—quite frankly—there are not enough hours in the day to do the job and to learn the product deeply. Some companies try to solve this problem through training sessions. But how many training sessions does it take for someone to master a product? And what happens if you&#39;re a fast-moving startup shipping features every couple of weeks? Those training sessions go stale pretty quickly. Fortunately, if you&#39;re creative, there&#39;s a better way to help the entire organization understand your product better.&lt;/p&gt;
&lt;p&gt;The concept of dogfooding isn&#39;t new. &lt;a href=&quot;https://medium.com/simpleid-dev-tools/dogfooding-your-own-product-isnt-enough-9e0a24d54c17&quot;&gt;I wrote about it in 2019&lt;/a&gt;. Others have written about it before that. What often gets missed, though, is the how. How do you dogfood your product? How do you do it when the product isn&#39;t a natural fit for use internally?&lt;/p&gt;
&lt;p&gt;At my current company, &lt;a href=&quot;https://clickup.com/&quot;&gt;ClickUp&lt;/a&gt;, using our own product feels natural. ClickUp is a productivity tool. We run the entire company on our software. However, at my previous startup, it wasn&#39;t so simple. At &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt;, we built media distribution software for web3 companies. Getting the company to use its own software internally was much harder. Not because people didn&#39;t want to do it, but because they didn&#39;t know how. At least, not naturally.&lt;/p&gt;
&lt;p&gt;Some people naturally found ways to use the product internally. Others did not. For those who could not find a natural use case, the solution to getting them to adopt our app in their day-to-day started with an innocuous question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How can you use our product in your personal life today?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The question wasn&#39;t about work. It was disarming. The answers to this question opened the minds of those who may not have found an obvious way of using the app at work. However, the transition from talking about creative use cases to actually using the product internally didn&#39;t happen immediately. It happened in waves.&lt;/p&gt;
&lt;p&gt;Voice of the customer updates were recorded and distributed via our platform internally. Documents to be shared with customers and prospective employees were stored and shared through our platform later. Soon, most of the organization was using the product daily. And when this happens, you build product empathy and customer empathy. You also improve your feedback pipeline significantly.&lt;/p&gt;
&lt;p&gt;If your organization doesn&#39;t use your product, even if the product isn&#39;t a natural fit for internal usage, there are creative ways to introduce dogfooding to your company. Start with a question, highlight examples of people using the product internally, and celebrate feedback. Besides talking with customers, using your own product is the second most powerful product development tool in your tool belt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tl;dr - reduce the fear of trying to figure out how to adopt the product internally, encourage creativity, talk about usage frequently, and celebrate feedback.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Your co-workers will be better at every part of their job if they are using the product that they selling, building, designing, marketing, and hiring for.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Key To Reducing Reactive Work Is By Being Proactive</title>
    <link href="https://polluterofminds.com/blog/the-key-to-reducing-reactive-work-is-being-proactive/"/>
    <updated>2023-03-01T14:46:15Z</updated>
    <id>https://polluterofminds.com/blog/the-key-to-reducing-reactive-work-is-being-proactive/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1518904868869-fbb2cdd0429a?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=Mnw0MDkwMjh8MHwxfHNlYXJjaHwzfHxmaXJlJTIwZmlnaHRpbmd8ZW58MHx8fHwxNjc3NzYzOTUw&amp;amp;ixlib=rb-4.0.3&amp;amp;q=80&amp;amp;w=1080&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In a fast-growing startup, product management can often feel like firefighting. Generally, firefighters are reactive workers. They get a call, they go to the fire, they put it out. When your product is used by thousands or millions of people, managing that product can feel like a series of never-ending tasks thrown at you rather than a process of improvement under your control.&lt;/p&gt;
&lt;p&gt;Products can only survive and thrive for so long under a constant barrage of reactive work. Somehow, you have to find a way to plan strategically and think long-term. If you don&#39;t, the fire will consume your entire organization. Fortunately, solving the reactive work problem is easier than you think.&lt;/p&gt;
&lt;p&gt;All you have to do is be proactive.&lt;/p&gt;
&lt;p&gt;OK, that&#39;s an oversimplification. And as a good rule of thumb, anytime someone says &amp;quot;all you have to do&amp;quot;, assume you have to do way more than what follows that phrase. Of course, being proactive will help you solve the reactive work problem. But if you were able to easily be proactive, you wouldn&#39;t be in the constant cycle of reactivity.&lt;/p&gt;
&lt;p&gt;Yet, the statement is still true. If you can be more proactive, you will see a reduction in reactive work. Let&#39;s return to the firefighting example. Firefighters will sometimes conduct controlled burns to reduce the chance of a blaze in the future. This is proactive work in pursuit of reducing reactive work later.&lt;/p&gt;
&lt;p&gt;I&#39;ve worked in small and large organizations, and the amount of reactive work varies by the size of the organization. As you grow, the product is (hopefully) used by more people. When more people use the product, more bugs are found, more feature requests come in, technical support questions rise, and more. There&#39;s also the coworker factor. As usage grows, the company tends to grow. The number of employees rises, and this leads to even more reactive work as you have internal requests layered on top of external ones.&lt;/p&gt;
&lt;p&gt;Scroll through Twitter or LinkedIn, and you&#39;ll see jokes and memes about product managers spending their entire days in meetings. This is reactive work. This happens if you let it. Most people don&#39;t think they have control over the meeting overload, but they do. It&#39;s called protecting your calendar. Some people might call this timeblocking, but I think of timeblocking as more standardized and specific to certain events. With calendar protection, you may not know exactly what you will get done in the time you&#39;re protecting, but you know you&#39;ll get &lt;em&gt;something&lt;/em&gt; proactive done.&lt;/p&gt;
&lt;p&gt;I was not very good at this early in my career. At various jobs, I would let others dictate my calendar freely. It led to frustration and burnout. I would work in the evenings or in the early mornings. I thought productivity meant being on as many calls and meetings as other people needed. Later in my career—especially when I was managing a team of PMs—I learned to block time on my calendar. Again, I didn&#39;t block time for any specific purpose other than knowing I would do something proactive in that time.&lt;/p&gt;
&lt;p&gt;This can be a difficult ask for people who like to plan in advance. It&#39;s hard to justify blocking off time on your calendar when you don&#39;t know &lt;strong&gt;what&lt;/strong&gt; you&#39;re blocking that time off for. This becomes doubly hard when someone reaches out to you and asks if you can move a particular time block so they can schedule a meeting. What do you say? How do you tell them you a protecting that time on your calendar without knowing what you&#39;ll be working on?&lt;/p&gt;
&lt;p&gt;Luckily, the answers to these questions are usually easier than you think. Most people are totally fine when you tell them you can&#39;t move the time you blocked. A simple &amp;quot;I&#39;m saving that time for some proactive work&amp;quot; will usually suffice. As a knock-on benefit, the constraint of the other person having to find another time for the meeting can sometimes result in the meeting not being necessary after all.&lt;/p&gt;
&lt;p&gt;A knee-jerk reaction to a problem for many people is to get on the phone and talk to someone live. This is a relic of in-person work where anyone could walk up to you and ask a question in real-time (also a productivity strain). So, forcing others to work through the constraint of less availability on your calendar can have many more benefits than just freeing you up to be proactive.&lt;/p&gt;
&lt;p&gt;Now, what do you do when your protected time arrives? Do you sit there and scroll TikTok? Do you check the backlog and ask for updates on in-progress tasks? Do you read your emails?&lt;/p&gt;
&lt;p&gt;No! That&#39;s all either time-wasting or reactive. This is your time to do competitive analysis, product research, strategy planning, or any number of other productive and non-reactive things. This is your chance to build up the proactive work that will ultimately reduce the reactive work. Remember the hypothesis at the beginning of this article was that reactive work was the product of growth and lack of proactive work. Growth is a net positive, so the only lever you have to pull to reduce reactive work is proactive work.&lt;/p&gt;
&lt;p&gt;You do not have to fall into the trope of product manager succumbing to non-stop meetings. Give yourself time to protect your calendar. Schedule focus or meeting time that&#39;s just for you. Don&#39;t worry if you don&#39;t know exactly what you&#39;ll work on when the time comes. Being free from non-stop meetings will open your opportunities for proactive work and ultimately reduce the reactive work you see later.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Stumbling Into Product Management</title>
    <link href="https://polluterofminds.com/blog/stumbling-into-product-management/"/>
    <updated>2023-02-14T15:11:51Z</updated>
    <id>https://polluterofminds.com/blog/stumbling-into-product-management/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1618517048008-1cbdfd7ce2af?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=Mnw0MDkwMjh8MHwxfHNlYXJjaHw3fHxmYWxsaW5nfGVufDB8fHx8MTY3NjM5NjQ5Ng&amp;amp;ixlib=rb-4.0.3&amp;amp;q=80&amp;amp;w=1080&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Ten years ago, if you had asked me what a product manager did, I&#39;d stumble into some form of &amp;quot;manages products.&amp;quot; Which is, of course, the same as saying I have no fucking clue. Turns out, I did know, but I didn&#39;t know through traditional exposure. Almost nothing I&#39;ve learned in my career has come from traditional exposure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://polluterofminds.substack.com/p/want-to-get-into-product-management&quot;&gt;I&#39;ve written about how starting your own company can help you become a better product manager&lt;/a&gt;. But that&#39;s just one way to stumble into product management. I&#39;ve stumbled so many times and in so many different ways in my career. Fortunately, most of my stumbles have carried me forward, and that&#39;s the best you can hope for. I do think you can position yourself to stumble forward more often than you stumble backward if you commit yourself to progress. When walking or running, if you pitch your body forward just a few degrees, you&#39;re going to stumble forward if you happen to stumble.&lt;/p&gt;
&lt;p&gt;I don&#39;t expect this stumbling adventure of mine to be a good fit for everyone. I&#39;m not sure I would even recommend the circuitous path I took. But I wouldn&#39;t be where I am without taking this exact path. That much I&#39;m convinced of.&lt;/p&gt;
&lt;p&gt;The first thing I have done well in my career is focusing on the customer. Everyone says that, but you have to live it for it to be true. When I graduated with my bachelor&#39;s degree, the only thing I knew for sure was that I wanted a 9-5 in an office after spending the previous 7 years working at a grocery store. I think it was probably a blessing that my 9-5 job came in the form of working in an insurance call center. The people calling in were, invariably, not happy. So, ending a call on a positive note was a challenge. But it was a challenge I leaned into.&lt;/p&gt;
&lt;p&gt;As you might imagine, leaning helps you stumble forward.&lt;/p&gt;
&lt;p&gt;Even though I was helping customers over the phone, most of those customers interacted with the online web app for reporting and managing claims. This exposed me to user experience issues and opportunities. I wasn&#39;t in a position to solve those problems (or even relay them considering the size of the company), but I filed them away in my mind. Eventually, I took a promotion to work on the Customer Experience team for the very same web app that I had been exposed to you tangentially through conversations with customers.&lt;/p&gt;
&lt;p&gt;In this role, I was helping shape the product, but it wasn&#39;t &amp;quot;product management.&amp;quot; I researched customer journeys, reviewed user surveys, watched session replays (back when those were new and exciting), and worked closely with the User Experience team in conducting user experience tests.&lt;/p&gt;
&lt;p&gt;My title was business analyst, but I was working with engineers and suggesting new features. I was even helping QA releases. Some of this was beyond the scope of my job, but, once again, I leaned.&lt;/p&gt;
&lt;p&gt;Eventually, my family and I were ready to move on to new adventures. Serendipitously, I had read a Medium post by one of the co-founders of a company called SlideRoom before we moved to Dallas. The company, as it turned out, was based in Dallas. My resume did not suggest that I was ready to jump into the startup world, but I took a shot. After months of talking with the founders, I was eventually offered a job as…&lt;/p&gt;
&lt;p&gt;An account manager.&lt;/p&gt;
&lt;p&gt;Still not product management, but with startups, a title doesn&#39;t normally reflect your daily duties. My time as an account manager and eventually Director of Account Management was less about sales and more about talking with customers every day, helping them through support and demos, and helping shape the product roadmap based on this feedback. I was the frontline, and once again, focusing on the customer helped me stumble forward. We worked in two-week cycles, had backlog grooming, had roadmap planning, and more. I participated in all of it alongside the CEO.&lt;/p&gt;
&lt;p&gt;While working at SlideRoom, I taught myself to code and launched an app. This was my first product where I had customers I could speak with. I had launched previous companies, but they were all very removed from the end user. This new app I built and launched allowed me to talk with customers and prospects. I learned what people wanted, and—because I built it myself—could make changes quickly based on feedback.&lt;/p&gt;
&lt;p&gt;With my newfound coding skills, I moved into a hybrid software engineering role. I still spoke directly with customers and had influence over the backlog, but I could also contribute to building the product. Still not a product manager, but a little closer to the product.&lt;/p&gt;
&lt;p&gt;Eventually, I decided to go full-time working on my app. As I mentioned before and have written about, starting your own company is a great way to get into product management. It&#39;s the &amp;quot;normal&amp;quot; path, but it&#39;s another stumble forward. I would go on to start another company after this one and was in charge of all product decisions. However, when that company failed and we shut it down, I had a decision to make. Would I try to find a job in product management or contract for a company in product management or something else?&lt;/p&gt;
&lt;p&gt;I made the only logical decision I could make. I decided to contract as a software engineer.&lt;/p&gt;
&lt;p&gt;I like coding, but I don&#39;t generally like coding for someone else. That said, I knew the fastest way to get back into the startup game was to contract as an engineer. And that worked. I contracted for a customer feedback analysis company then eventually moved on to contract for &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was at Pinata where I got to flex all of my product muscles. I was writing code, but I was also jumping on phone calls with customers frequently. &lt;a href=&quot;https://polluterofminds.com/blog/new-digs/&quot;&gt;I became Pinata&#39;s first full-time employee&lt;/a&gt; and quickly transitioned into a full-time product role. My stumbling had finally brought me into the mythical product manager role. As Pinata grew, so did I. I grew into a product leader and a manager, rising to head up the entire product department at Pinata.&lt;/p&gt;
&lt;p&gt;My path did not involve going to school for computer science or product management. I didn&#39;t get an MBA or any certifications. In fact, I went to a for-profit college, got a business degree, then eventually went and got a master&#39;s degree in creative writing. It was almost like I was giving myself no choice but to stumble my way into whatever it was that I was going to do.&lt;/p&gt;
&lt;p&gt;And it&#39;s worked well so far. Let&#39;s see how much farther this stumbling can take me.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Pitfalls of Habits</title>
    <link href="https://polluterofminds.com/blog/the_pitfalls_of_habits/"/>
    <updated>2023-02-13T15:02:05Z</updated>
    <id>https://polluterofminds.com/blog/the_pitfalls_of_habits/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1542596081-6d3eaca5240c?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=Mnw0MDkwMjh8MHwxfHNlYXJjaHwxfHxoYWJpdHN8ZW58MHx8fHwxNjc2MzA2MjI4&amp;amp;ixlib=rb-4.0.3&amp;amp;q=80&amp;amp;w=1080&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Habits are powerful. There wouldn&#39;t be an entire section of books both helping you form good habits and break bad habits if they were not. &lt;a href=&quot;https://jamesclear.com/atomic-habits&quot;&gt;Atomic Habits&lt;/a&gt; is the bible for habits in the business world and beyond. What I find interesting about habits is that they are often conflated with addiction.&lt;/p&gt;
&lt;p&gt;Habits are highly correlated with addiction, but this generally holds true when looking backward from the addiction itself. &lt;a href=&quot;https://www.jstor.org/stable/40752419&quot;&gt;In a study published in 2003&lt;/a&gt; Norman Braun and Paolo Vanini said had this to say about addictions and habits.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Habits may be said to exist if current consumption is positively related to former consumption. Addictions may be defined as strong habits, so that every addiction is a habit, but the converse does not hold true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every addiction is a habit, but not every habit is an addiction. This is a good thing, of course. We don&#39;t need more addictions. However, when building habits that stick, it&#39;s important to remember that habits do not happen on their own. In fact, it&#39;s easy to lose some habits that you&#39;ve built.&lt;/p&gt;
&lt;p&gt;You can see this manifest in an especially strong way when you are trying to do something new. Learning or getting better at something is hard without committing to the habit of the action that drives the underlying outcomes. For example, think about the last time you tried to learn a new language. You may have started with lessons every other day. If you ever let that frequency slip, did you keep up with your learning? My guess is you did not.&lt;/p&gt;
&lt;p&gt;There is probably no better example of this than in working out. Every year, millions of people set New Year&#39;s Resolutions. &lt;a href=&quot;http://maristpoll.marist.edu/wp-content/uploads/2018/12/NPR_PBS-NewsHour_Marist-Poll_USA-NOS-and-Tables_New-Years-Resolutions_1812061019-1.pdf#page=3&quot;&gt;Many of these people resolve to get healthier by working out&lt;/a&gt;, and they hit the gyms in droves. The desire is strong, but the habit has not been built, and most of these people stop going to the gym as frequently after only a few weeks. They may still show up here and there because they feel guilty, but guilt is not a strong enough motivator to continue in a way that will produce results.&lt;/p&gt;
&lt;p&gt;One way I&#39;ve found to combat this type of motivation cliff is to build a habit around the activity. Keeping with the theme of working out, telling myself that every day at 7:00 am, I will work out was a good start. But I struggled with when to take days off. I tried to focus on getting a workout in at least 4 days per week, but that wasn&#39;t a strong enough commitment to build a habit. I would miss a couple of days and then it would be hard to make up the days and hit my goal.&lt;/p&gt;
&lt;p&gt;It wasn&#39;t until I built the habit of working out every day besides two predefined off days that the habit stuck. This applies to many things outside of working out as well. When I was learning to code, I had to build a daily habit of actually writing code in addition to watching videos and reading tutorials for the work to pay off and start to feel natural. Many years ago, I launched a sports blog. I found that the best way to generate enough content to produce ad revenue was to write multiple articles in the morning before work. I committed to that habit and was able to easily hit 4 to 6 articles per day after a while.&lt;/p&gt;
&lt;p&gt;But with all the good that comes from these habits, there&#39;s a pitfall that is important to pay attention to. Going back to the opening of this article, not all habits are addictions. Again, this is good. But that means that when you break the habit, you may not fall naturally back into it.&lt;/p&gt;
&lt;p&gt;Let&#39;s bring it back to working out. If you have committed to a Monday through Friday cycle of working out and built a habit around that, what happens when you go on vacation or get sick? Is it easy to just pick back up and maintain the habit? My guess is you&#39;re like me and it&#39;s very hard to get back into working out after you&#39;ve taken time off. This happens to me even if I take one extra day off.&lt;/p&gt;
&lt;p&gt;Breaking a habit goes beyond just exercise. Learning a new language, learning to code, doing the dishes before bed, taking your pills, etc. All of these things benefit from habit-forming processes, but they also run the risk of falling out of sync if the habit is broken.&lt;/p&gt;
&lt;p&gt;The great thing about recognizing how habits help and how breaking them can hurt is you can plan around change. Mentally, you can prepare yourself if you know you&#39;re going to have to break an important habit. It&#39;s still going to be difficult to get back into the swing of things whenever you resume the habit-based activity, but if you&#39;re prepared for that difficulty, it will make it easier to rebuild the habit.&lt;/p&gt;
&lt;p&gt;Habits can be our friends or our enemies. It&#39;s important to recognize them when they are helping us, and plan for when those good habits ultimately get broken.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How To Shed The Project Manager Hat</title>
    <link href="https://polluterofminds.com/blog/how-to-shed-the-project-manager_hat/"/>
    <updated>2023-02-10T13:06:54Z</updated>
    <id>https://polluterofminds.com/blog/how-to-shed-the-project-manager_hat/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1474666488182-66ec723476c6?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=Mnw0MDkwMjh8MHwxfHNlYXJjaHw1fHxIYXRzfGVufDB8fHx8MTY3NjA1MzIxNA&amp;amp;ixlib=rb-4.0.3&amp;amp;q=80&amp;amp;w=1080&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I once worked on a project with a 10-year completion estimate. In software. 10 years. As you can imagine, this project was at a large company with many legacy approaches. And as you can imagine, executing a 10-year project requires a lot of project management. In fact, the majority of the project was not product or engineering work but project management work.&lt;/p&gt;
&lt;p&gt;I didn&#39;t stick around long enough to see that project come close to completion, but I think even with smaller-scale projects, legacy processes like these creep up in older organizations and even in some startups. If you come from an organization like this or are trying to transition into a true product management role at most modern organizations, you&#39;ll need to find a way to throw away the project management hat and focus on product management instead.&lt;/p&gt;
&lt;p&gt;First, let&#39;s define what project management is. Project management is a reporting and accountability function. Project managers are tasked with ensuring a project stays on track. They do this with Gantt charts and PowerPoints. They do this with spreadsheets and Slack messages. Project managers generally do not do the work. Instead, they bring people together to help facilitate the completion of the work. They force communication when communication is lacking. They push process where chaos might reign supreme.&lt;/p&gt;
&lt;p&gt;Project management is an important function in every company, even startups. However, in a product-led, fast-moving startup or organization, project management cannot be conflated with product management. Project management is everyone&#39;s job in these companies, while product management is the job of people who have a completely different skillsets focused on strategy, collaboration, and execution. I don&#39;t want to minimize the role of project managers, but I do think they tend not to be the right role for fast-moving software companies.&lt;/p&gt;
&lt;p&gt;What exactly is product management, then? Product management is a function that takes in research and critical thinking and outputs products and features. Product managers are not there to move Jira tickets around. If you subscribe to the idea that project management is a team effort, then anyone on the team can move these tickets and help create transparency. Product managers are on the team to help do two main things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Distill the vision of the founders/CEO into products and features that can be implemented for today&#39;s customers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speak with customers directly and research the market to formulate product strategies that drive the company&#39;s mission forward.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully, the delineation of roles is clear. Now, we can get into how and why you might need to shed the project manager hat as you transition into a product manager role. Many companies have roles with &amp;quot;product&amp;quot; in the title. These roles are not created. For example, the role of a product owner is one that confused me early in my career. I thought that&#39;s what I wanted. And for many people, it&#39;s exactly what they want. But a product owner is not a product manager. A product owner is similar to a scrum master or a project manager. Their job is to coordinate tasks. If your company has team collaboration and ownership of this process, you don&#39;t need a product owner. But you do need product managers.&lt;/p&gt;
&lt;p&gt;So, it&#39;s a natural career progression opportunity to move from product owner or project manager to product manager. But the actions you&#39;ll take on the job are different. The biggest change you&#39;ll face when shedding the project manager hat is that of process. Process is everything when you&#39;re the one managing a project. If you, alone, have to report and coordinate, processes are key. However, in a collaborative product development environment, process is distributed across team members. Opening tickets and moving those tickets through whatever tracking system the engineering team uses is likely going to be the responsibility of the individual contributor (IC). Project planning is going to be more iterative and less process-driven as well. And pivots…oh, there will be pivots.&lt;/p&gt;
&lt;p&gt;The last point is, perhaps, the hardest part of the project manager hat to shed. When managing projects, future visibility is important. When working on a fast-moving product team, long-term visibility does not exist. It&#39;s like driving through dense fog. You can prepare, you can create strategies for piercing the fog, but you also have to be ready to swerve if needed. When you are coming from a process-first background, these types of pivots can be hard.&lt;/p&gt;
&lt;p&gt;The best way to prepare yourself for the unknown is to commit to current work and hold your future plans loosely. Seems easy, but it&#39;s not. As soon as you start planning for the future, it&#39;s easy for you mind to cement those details. This is why I tend not to like roadmaps. Roadmaps are concrete and hard to pivot around. Bets are things you can prioritize, though. Ideas are things you can categorize. If something in the market changes and you suddenly have new direction, your ideas live on, but the bets you take related to those ideas change.&lt;/p&gt;
&lt;p&gt;One day, I&#39;ll finally get around to writing about my Loosely Held Ideas framework, but the tl;dr is that when you plan for the future in product management, you need to drop the &amp;quot;plan&amp;quot;. You&#39;re not ever planning. You&#39;re thinking. When I sit on a beach, staring at the ocean, I&#39;m not making plans. I&#39;m thinking. That&#39;s how you should approach the future of your product. By doing this, you&#39;ll be much better equipped to handle the transition from project management to product management.&lt;/p&gt;
&lt;p&gt;Project managers, scrum masters, product owners, et al are useful roles in the right context. I&#39;m assuming throughout this article that you are moving into a context where those roles do not make sense. If that&#39;s true, it&#39;s time for you to hang up your old hat and grab a new one from the rack. Because project management and product management are two different beasts.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Treat Your Brand Like a Band</title>
    <link href="https://polluterofminds.com/blog/treat_your_brand_like_a_band/"/>
    <updated>2023-02-09T13:12:03Z</updated>
    <id>https://polluterofminds.com/blog/treat_your_brand_like_a_band/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://polluterofminds.mypinata.cloud/ipfs/QmQMWBCqvC7BbRTmJSmhjUHXT3tSzuF6mma5qV6einKhkb&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;On October 20, 1977, a mid-size private plane ran out of fuel, crashing into the woods outside of Gillsburg, Mississippi. The crash killed Lynyrd Skynyrd lead vocalist Ronnie Van Zant, guitarist Steve Gaines, and backup vocalist Cassie Gaines, among others. At the time of the crash, Skynyrd was one of the biggest rock bands in the world. They dominated southern rock and seemed to transcend rock around the world.&lt;/p&gt;
&lt;p&gt;That year, their album Street Survivors sold over two million copies. With their lead singer and two other core band members gone, it seemed 1977 would be the end for Lynyrd Skynyrd as a band. And for a while, this proved to be true. The remaining members of the band disbanded for ten years before reuniting with Ronnie&#39;s younger brother, Johnny Van Zant, taking over as the lead vocalist in 1987. While the new version of the band never sold as many albums as the original band did, &lt;a href=&quot;https://www.concertarchives.org/bands/lynyrd-skynyrd&quot;&gt;Lynyrd Skynyrd was able to continue drawing massive audiences to their shows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Between 1987 and 1988, the band played over 50 concerts. In 2001 alone, they played 73 concerts. This trend continued over time despite the band being comprised of increasingly different members than the original band. Without their original lead singers and without key members from the original band, Lynyrd Skynyrd was not only able to survive, but they were able to succeed.&lt;/p&gt;
&lt;p&gt;The parallels to software products may not be obvious, but what we see with the history of Lynyrd Skynyrd is an example of brand loyalty in action. This has happened countless times with bands. Queen built such a massive brand thanks in large part to Freddie Mercury&#39;s vocals that Mercury could never match Queen&#39;s success when he went solo. Black Sabbath was able to transition away from Ozzie Osbourne to Ronnie James Dio because of the band&#39;s loyalty. Of course people loved Freddie Mercury and loved Ozzie Osbourne, but what they loved more was their connection to the band. It&#39;s why music fans play their favorite albums long after the bands that made those albums stopped making music. How can you create products that emulate this level of brand loyalty?&lt;/p&gt;
&lt;p&gt;To help answer this question, I turned to a new app currently in beta testing called &lt;a href=&quot;https://soundoff.io/&quot;&gt;SoundOff&lt;/a&gt;. The app is built by a fantastic team including &lt;a href=&quot;https://twitter.com/jasonnov&quot;&gt;Jason Novack&lt;/a&gt;, &lt;a href=&quot;https://dankantor.com/&quot;&gt;Dan Kantor&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/samantha-stamler-85358055/&quot;&gt;Samantha Stamler&lt;/a&gt;, and &lt;a href=&quot;https://www.linkedin.com/in/richa-naik-01b7a717/&quot;&gt;Richa Naik&lt;/a&gt;. I was fortunate enough to A) have already been in the beta group and B) get my question selected to be answered by the community. The app allows people to pose questions and then the community records audio-only responses to the questions that are publicly available and can be played at anyone&#39;s leisure. &lt;a href=&quot;https://testflight.apple.com/join/VNwmdJy2&quot;&gt;&lt;strong&gt;If you&#39;re on iOS and you&#39;d like an invite, you can use this Apple Testflight link&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here was the question I asked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Besides cost, what makes you loyal to a product or brand?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The answers came from all different types of people, and they were helpful in understanding brand loyalty behavior. From listening to the clips, I was able to extract three main themes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Nostalgia&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quality&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What&#39;s interesting is all three of these themes, to me, roll up into a singular theme of experience. Which is exactly what bands provide. The experience of listening to a band is an emotional one that covers nostalgia, quality, and service. Service is different in the context of products and bands, of course. For a band, service could mean the specific experience of attending a live show, it could mean the way you buy their albums or stream their songs.&lt;/p&gt;
&lt;p&gt;Even more interesting, is two answers to my question both referenced Bounty Paper Towels as an example of a product they are loyal to.&lt;/p&gt;
&lt;p&gt;Cathy from Cleveland said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think I&#39;m loyal to certain brands from growing up with my mother&#39;s choices like Crest Toothpaste, Hines Catch Up, and Bounty Paper Towels.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And Kathy from New Jersey said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If it&#39;s more effective, better in what it&#39;s designed to do, for example, I&#39;ll always choose a Bounty paper towel over a Kirkland&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This could simply be that all the Cathy/Kathys in the world like Bounty, but I think it&#39;s something deeper. Bounty hits on all three items I listed above. There is a nostalgia factor. Bounty has been around since 1965. It&#39;s likely that your parents and even your grandparents have fond memories of the product, and those memories are passed down to you. Bounty has always been associated with quality. This may be marketing at work, but by and large, the United States trusts the quality of a Bounty Paper Towel. And from a service perspective, Bounty has had a 30-day money-back guarantee for as long as the product has existed from what I can find.&lt;/p&gt;
&lt;p&gt;Brand loyalty is often considered a marketing problem, as opposed to a product problem. However, I think product is the primary driver of brand loyalty. But how you build a product to support the three themes above and drive that loyalty?&lt;/p&gt;
&lt;h2&gt;Nostalgia&lt;/h2&gt;
&lt;p&gt;Nostalgia is probably the most difficult theme for a product team to consider. How can you build a nostalgic product? There are two ways you can do this. You can do it through design. Build something that evokes the emotions you have found to be tied to nostalgia. &lt;a href=&quot;http://poolsuite.fm/&quot;&gt;PoolSuite.fm&lt;/a&gt; built an entire music streaming site around the nostalgia of late 90s music players and Summer vacations. The other thing you can do when building for nostalgia is build things that last. You may not see the benefits of this work for many years, but by taking the anti-Google approach of building products that are likely to be thrown away, you have a better chance of achieving longevity and buying nostalgia for your product.&lt;/p&gt;
&lt;h2&gt;Quality&lt;/h2&gt;
&lt;p&gt;Much like building for longevity, quality is something completely under the product team&#39;s control. In tech, we live in an MVP world. Ship it quickly, get feedback, and iterate. But once you&#39;ve learned what you need to learn to go strong into the market, it&#39;s time to focus on quality. David Vandergrift, CTO of 4Degrees &lt;a href=&quot;https://builtin.com/founders-entrepreneurship/product-quality-speed&quot;&gt;suggests that once you&#39;ve penetrated the market, it is likely time to transition to quality focus&lt;/a&gt;. You can&#39;t simply keep moving at break-neck speeds with development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To serve these customers and gain substantial market share, a startup must set aside the move-fast-and-break-things mentality in exchange for a measured, circumspect approach to development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Service&lt;/h2&gt;
&lt;p&gt;The concept of service is one that many company relegate to cost centers. They offshore their customer service teams. They reduce support hours. They try everything they can to reduce the number of inbound messages and calls support members have to respond to. And that is exactly why part of building brand loyalty must revolve around service. When your competitors are not doing it well, you have an opportunity to build loyalty by simply helping people. Crazy right?&lt;/p&gt;
&lt;p&gt;Grant from New Jersey had this to say in response to my question on SoundOff:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would say customer service specifically in regards to how broken products are handled. I&#39;ve had some companies that say you have to buy a new one or you have to pay to have it fixed and then you also have to cover shipping and that makes me not want to do business with that brand again. Conversely, with sunglasses, for example, both Rivo and Costa Del Mar have replaced my sunglasses which broke for no really good reason and given me a new pair. And in the case of Costa once they gave me, allowed me to pick a new style when the style that I was trying to replace wasn&#39;t in stock. And that made me a lifelong brand advocate for those brands. I think that doing right by customers in when they need it is a key differentiator and been building brand equity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It should come as no surprise that doing right by customers will help turn them into lifelong fans. Zappos founder Tony Hsieh wrote an entire book about this idea called &lt;a href=&quot;https://www.amazon.com/Delivering-Happiness-Profits-Passion-Purpose/dp/0446576220/ref=asc_df_0446576220/?tag=hyprod-20&amp;amp;linkCode=df0&amp;amp;hvadid=312243616995&amp;amp;hvpos=&amp;amp;hvnetw=g&amp;amp;hvrand=6060725223463374712&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=9026850&amp;amp;hvtargid=pla-395221952780&amp;amp;psc=1&amp;amp;region_id=674469&quot;&gt;Delivering Happiness&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I started building out the product team at &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt;, my first hire was a community manager. We decided early on that support would be a function of the product team and an opportunity to build better products while driving brand loyalty. It was one of the best decisions we made as a company.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Experience leads to brand loyalty—assuming the experience is great. Good is not enough. The experience is what matters. Going and seeing a band in concert where the set is only good is not enough to drive you to be loyal. Going to a concert where the entire set list has you on your feet singing every song along with the band like you&#39;re up there on stage has the recipe for true lifelong loyalty.&lt;/p&gt;
&lt;p&gt;Combining the power of nostalgia, quality, and service will help you build products that drive the type of loyalty that will ensure long-term success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special thanks to the SoundOff community for great answers to a question I think is very important to all PMs.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Driving Product Strategy At An Early-Stage Company</title>
    <link href="https://polluterofminds.com/blog/driving_strategy_at_an_early_stage_company/"/>
    <updated>2023-02-08T13:41:45Z</updated>
    <id>https://polluterofminds.com/blog/driving_strategy_at_an_early_stage_company/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://polluterofminds.mypinata.cloud/ipfs/QmenbXh4sQCz3NyGSpm9S8k7fzubKtoojT4gTZxansdsqS&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Early-stage companies are a lot like a group of friends sitting around on a Friday night trying to figure out what to do. Everyone knows they want to do something. They know they will probably enjoy it. If they pick the right thing, they also know that the evening will have impact. But no one is quite sure where they will go.&lt;/p&gt;
&lt;p&gt;Strategy in this scenario is a like the friend who wants to coordinate outfits and make sure Ubers are scheduled. They have a plan, but they have no framing for the plan, and that can lead to frustration. The same is true with product strategy in the early stages. Though, it&#39;s probably useful to define what &amp;quot;early-stage&amp;quot; means in this context.&lt;/p&gt;
&lt;p&gt;For the sake of clarity, we&#39;ll call early-stage the stage at which a company is either still trying to find product market fit or they have found tenuous footing around PMF and are trying to maintain it. It is at this stage where companies are often able to raise pre-seed or seed funding and can start to build a team. It&#39;s at this stage where strategy may start to expand from under the strict control of the CEO to other team members, especially product-focused team members.&lt;/p&gt;
&lt;p&gt;When strategy is based around something loose and not something concrete—like a north star—it can be frustrating. But it&#39;s possible to navigate this with the tools you probably already have. Early-stage companies have the same problems larger, more ingrained companies have. They just have them on smaller scales. For example, a large company with clear PMF still must drive product strategy based on the knowledge that &lt;a href=&quot;https://polluterofminds.substack.com/p/product-market-fit-is-like-the-speed&quot;&gt;PMF is a moving target&lt;/a&gt;. They can lose that fit. This means the product strategy at those companies isn&#39;t all about reinforcing the existing product. It can equally be about exploring new markets and new product opportunities. The difference with early-stage companies is your entire job is essentially exploring new markets and new product opportunities.&lt;/p&gt;
&lt;p&gt;The best way to cope with the unknowns of product strategy at the early stage is to shift your perspective on when the right time to commit to something might be. At a later stage, commitment might happen when you have enough data to back up the bet. Product management, after all, &lt;a href=&quot;https://basecamp.com/shapeup/2.3-chapter-09&quot;&gt;is a series of bets&lt;/a&gt;. At an earlier stage, commitment might need to come without proof. It might need to come when you have enough insights to suggest the bet could be successful. This is what founders do when they first launch a company. They have some insight that is uniquely theirs, and based on that insight, they launch.&lt;/p&gt;
&lt;p&gt;Developing insights is the number one job of product people, especially at early-stage companies. Those insights will drive so much more than you think. I&#39;ll give an example from the early days of &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pinata had found solid footing among developers who wanted to upload content to IPFS. However, that product alone was not a revenue driver. We had been paying close attention to NFTs since the company started, and the insights developed over two or three years of thinking about the future of NFTs helped us commit to a fundamental shift in the way Pinata did business. Up until that point, uploads was the business. However, we decided to launch dedicated IPFS gateways and make those the revenue driver for the company. It cannot be understated how big of a shift this was.&lt;/p&gt;
&lt;p&gt;There was no proof that it would work. There was no data to back the decision up. At the time, no one in the market provided anything besides public IPFS gateways. Think of public gateways as public goods that demonstrate the potential, but are not optimized for a world that&#39;s come to expect speed. We had insights from hundreds of customer conversations that led us to believe that launching dedicated gateways that customers owned and could brand with their own domains was going to be the right decision. We had insights that providing traditional web-scale speeds to web3 was going to be a big enough shift that people would pay money for these gateways. But again, the decision to launch was built on insights, not proof.&lt;/p&gt;
&lt;p&gt;Dedicated gateways were a massive success for Pinata. Had we waited for proof—for the data we all naturally crave so much—it would have been too late. Instead, we launched a product that people wanted at the right time because we trusted our insights.&lt;/p&gt;
&lt;p&gt;At early-stage companies trusting insights and launching products based on those insights alone will happen more frequently than in later-stage companies. However, as I mentioned before, later-stage companies have to maintain PMF. Sometimes, they have to make larger bets, and those bets will need to be based on insights rather than proof.&lt;/p&gt;
&lt;p&gt;One final thought I have on driving strategy in the early stages is around the idea of trap doors. It&#39;s important and encouraged to launch products based on insights, but you should also consider whether or not you are taking the company through a two-way door or dropping it through a trap door. A two-way door represents a product that you can come back from. A trap door is a decision or product that you cannot come back from. You will be married to it forever going forward. It should be obvious that if you&#39;re basing a product decision on a trap door, you should have more data. More proof. If you&#39;re building a solution that is a two-way door, insights-based launches are probably safe.&lt;/p&gt;
&lt;p&gt;If you want to stop sitting at home on a Friday night with your friends trying to figure out what to do, start basing more of your decisions on insights. Insights are developed over time. They are not always quantifiable, but they are almost always important.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Landing Pages Are Not MVPs</title>
    <link href="https://polluterofminds.com/blog/landing_pages_are_not_mvps/"/>
    <updated>2023-02-07T14:54:05Z</updated>
    <id>https://polluterofminds.com/blog/landing_pages_are_not_mvps/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://flashbak.com/wp-content/uploads/2018/10/vintage-cereal-toys.png&quot; alt=&quot;Cereal Box Prizes from the 1970s and 1980s - Flashbak&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When I was young, I would beg for cereal almost exclusively based on the toy that was supposed to be inside. My youth was at the tail end of the era when toys actually came in the box. I can still remember pulling a small die-cast race car (I think it was a NASCAR promotion) from my cereal box as a kid. I played with that car for years. My kids may have even played with it when they were younger. The gratification of getting a toy just by eating cereal was unbeatable.&lt;/p&gt;
&lt;p&gt;And then it all changed.&lt;/p&gt;
&lt;p&gt;In the early to mid-2000s cereal companies (probably because of recalls and choking hazards) stopped including toys in cereal boxes. Instead, kids would dig through the box only to find an IOU—a cardboard card asking them to get a parent to mail in for the prize. Hundreds of thousands of kids got to feel the feeling that we all feel today when we visit a slick new landing page where we are excited to try a product only to be presented with an email collection form instead of the product.&lt;/p&gt;
&lt;p&gt;Landing page MVPs are not MVPs. They are the failed promises of cereal box toys.&lt;/p&gt;
&lt;p&gt;What exactly is a landing page MVP? It&#39;s a marketing site promising an application under the guise that the person visiting the site may get access to the app. However, in reality, it&#39;s an email collection machine designed to determine demand for an idea. If you follow the indie hacking community at all, you&#39;ve surely heard this concept touted as the solution to stop you from building apps that no one wants.&lt;/p&gt;
&lt;p&gt;Swyx, a very popular info products indie hacker, &lt;a href=&quot;https://www.indiehackers.com/@swyx/dd474c1b2d&quot;&gt;wrote an article about landing pages&lt;/a&gt; and said this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an indie hacker, it is often (but not always) best to &lt;em&gt;start&lt;/em&gt; with the landing page and then work backwards. Amazon famously &lt;a href=&quot;http://www.allthingsdistributed.com/2006/11/working_backwards.html&quot;&gt;starts every product process by writing the press release&lt;/a&gt;, and your equivalent is the landing page. This helps you start doing customer research (&lt;a href=&quot;https://www.wired.co.uk/article/waze-uri-levine&quot;&gt;falling in love with the problem&lt;/a&gt;) while iterating on your marketing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When planning a product cycle, I also start with marketing first. I write a document for marketing as if we&#39;re already launching the product. This helps align me and the team around the why behind what we&#39;re doing. That document is not shared with the public. The same is true with Amazon&#39;s famous product development process. They are not putting the fake press release in front of customers, they are using it as an internal framing tool.&lt;/p&gt;
&lt;p&gt;There is a real issue with developers and product people falling in love with the problem and getting tunnel vision around solving that problem without validating it with the market. However, I do not believe landing pages solve this problem. Here&#39;s what a landing page will prove to you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;That you can drive traffic to your site (very good thing to be able to do when you have a product)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That people are willing to give you an email address (or not) for updates on the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential extrapolated buying market (if you include a fake buy now button)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Point three is the most problematic, in my opinion. If you include a buy now button and people are clicking on it, can you actually extrapolate the results of that test to indicate the potential market? This depends on the source of the traffic you drove to your landing page. Did they come from an email list you already have? There&#39;s a good chance you already know if those people are willing to buy or not, but do you know if people not on the list are willing to buy? Did the traffic come from ads? How long did the ads run, what were the targets? How will you replicate the traffic without ads?&lt;/p&gt;
&lt;p&gt;There are probably a hundred other questions I could ask, but I&#39;ll leave it there. Driving traffic to your site is important, collecting email addresses is important, and some indication of buying potential is important. But none of those things are an MVP. You may be sending up false flags to yourself.&lt;/p&gt;
&lt;p&gt;Your landing page MVP could also distract you from doing the real work—talking to customers. Everyone wants to scale tedious tasks, but a landing page does not actually scale the real task of talking to customers. Landing pages get you high-level quantitative data, but getting on the phone gets you qualitative data. And it is in that qualitative data where you will learn the most about the problems people have.&lt;/p&gt;
&lt;p&gt;Jason Fried, the founder of Basecamp, &lt;a href=&quot;https://37signals.com/podcast/build-half-a-product-not-a-half-assed-project/&quot;&gt;talks about building MVPs like this&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, the MVP notion is like, you’re not even building a full product. You’re building the minimum viable thing to test. It’s more about, you build it to test. I don’t personally like the approach of building something to test. I think you build something to ship.&lt;/p&gt;
&lt;p&gt;Because I think if you only have this tiny, minimal core of something and you ask people what they think of it, they don’t have the whole thing to think through.&lt;/p&gt;
&lt;p&gt;They don’t have all the context, they don’t have all the stuff. They just have this little small piece. And then you take that information, then you do something with it, but I think it’s incomplete information. So my feeling is, your 1.0, your initial version you launch, is both minimal, it’s viable, but it’s also the whole thing. It’s not a slice of what the whole thing’s going to become. Eventually you add more and more and more, but it’s not treated mentally as this thing that you’re just putting out there to see what happens. It’s like, no, this is the thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With a landing page, people have almost no context. They haven&#39;t felt the thing you want to test. They haven&#39;t experienced it. If someone would have put a landing page for eggplant parmesan in front of me 20 years ago and asked if I thought I&#39;d like it, I would have said no. Instead, my step mother put a plate of it in front of me and told me to try it. It was through that experience that I learned I like eggplant parmesan. The same is true with products.&lt;/p&gt;
&lt;p&gt;The right way to approach MVPs is to start with a problem. Iterate on the problem by talking to people. If you don&#39;t know how to talk to people about product and software problems, I recommend reading &lt;a href=&quot;https://www.momtestbook.com/&quot;&gt;The Mom Test by Rob Fitzpatrick&lt;/a&gt;. As you learn about the problem, you can start to &lt;a href=&quot;https://polluterofminds.com/blog/dont_shrink_the_scope_of_the_solution,_shrink_the_scope_of_the_problem/&quot;&gt;shrink the scope of the problem&lt;/a&gt;. This will make building your MVP more manageable and more likely to be adopted.&lt;/p&gt;
&lt;p&gt;Once you have a scoped-down problem, iterate on the solution. Roll something out AND create a landing page for that thing. Now people have a nice way to learn about what you&#39;re building as well as a nice way to actually test the product. The insights you get from this will be far more valuable than what you get from just a landing page.&lt;/p&gt;
&lt;p&gt;Some people might argue that building anything is a waste of time without validating it. I argue that validation is the process of discovery, and you cannot discover everything you need to learn without having a product to put in front of someone. Put the toys back in the cereal box. Put the eggplant in front of your target customers.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Shrink The Scope Of The Problem</title>
    <link href="https://polluterofminds.com/blog/dont_shrink_the_scope_of_the_solution,_shrink_the_scope_of_the_problem/"/>
    <updated>2023-02-06T15:15:04Z</updated>
    <id>https://polluterofminds.com/blog/dont_shrink_the_scope_of_the_solution,_shrink_the_scope_of_the_problem/</id>
    <content type="html">&lt;p&gt;Problem-solving is very rarely about the &amp;quot;solving&amp;quot; part. The solution is an output. The input is your understanding and framing of the problem. Yet most many people spend the majority of their time on the solution. We beta test solutions. We A/B test solutions. We sell solutions. In product development, this process can lead to scope creep or larger scope than the organization might have an appetite for.&lt;/p&gt;
&lt;p&gt;Scope, in this sense, is inevitably a solution-oriented consideration. What is the scope of the problem? How much more work did we have to do to implement the solution? Can we even implement a solution considering the scope of the proposed solution? This is where I&#39;ve seen so many product discussions get bogged down. A product manager might come to the table with a problem and a solution, the engineering team scopes the solution, and a timeline is formed. The PM and the business must then decide if they are willing to put that level of effort into the solution. And if they are not?&lt;/p&gt;
&lt;p&gt;We cut scope, right?&lt;/p&gt;
&lt;p&gt;The solution is hammered down into something the team can achieve in a reasonable amount of time. The business is happy, the PM is happy, the customer is...happy?&lt;/p&gt;
&lt;p&gt;Did we hammer scope the solution so much that it is now solving a different problem? Have we stopped to consider that? Did we spend too much time reviewing the solution and not enough time reviewing the problem? This is the trouble with cutting scope of solutions. We do it, and it&#39;s necessary at times. But, we should consider cutting scope before we ever arrive at the solution.&lt;/p&gt;
&lt;p&gt;We should consider cutting the scope of the problem. Let&#39;s create an example to see how this might look in practice.&lt;/p&gt;
&lt;p&gt;You&#39;re the product manager (yes, there is only one in this imaginary company) working on a streaming music platform. It&#39;s recently been discovered that customers who have to click more than three times to find a song abandon the platform at a 60% higher rate than everyone else. You have your quantitative data, but you&#39;re a good PM and you know you need some qualitative data.&lt;/p&gt;
&lt;p&gt;The low-hanging fruit is support emails. You reach out to the support team, and they pull all of the support requests they&#39;ve received in the last three months about music discovery and search. As you comb through these emails, you see that people don&#39;t like how long it takes to find a song. They search for an artist, then they search for similar artists, and they may even drill down to find artists similar to the original similar artist. But the consensus is that it takes too long.&lt;/p&gt;
&lt;p&gt;Time for some phone calls. You schedule five phone calls. Each person had similar struggles and all have all since moved to another streaming platform. They wanted to discover new music, but they felt like it took too long to do so. Each person used the similar-artist-algorithm and recommendations to find new artists. They did not use the Discover page your team spent six months building last year, so that&#39;s frustrating. But nevertheless, you have qualitative and quantitative data. The final thing you do is your competitive research.&lt;/p&gt;
&lt;p&gt;Each person you spoke to mentioned one or two streaming services they are trying. You test these services out and you discover it only takes two steps to find similar artists and those artists are nested so there are even fewer clicks for the end user. This makes a ton of sense. You don&#39;t want to copy the competitor wholesale, but when something works, it works.&lt;/p&gt;
&lt;p&gt;The solution is forming. The team needs to re-architect its search functionality to nest artist similarities so a customer can go multiple levels deep with a single search. The engineering team sighs. This is going to be a big one, they say. It&#39;s going to take a long time.&lt;/p&gt;
&lt;p&gt;How long?&lt;/p&gt;
&lt;p&gt;Long. Maybe 3 months.&lt;/p&gt;
&lt;p&gt;Uh oh. The organization doesn&#39;t have the appetite for that. So you start the scope hammering process. What&#39;s the MVP? What will get us close enough to reduce the churn rate? You and the team brainstorm until you arrive at a solution that will only take a month and a half. We can get the number of clicks down to two but we can only show similar artists nested one deep.&lt;/p&gt;
&lt;p&gt;That&#39;ll work. It&#39;s a great start, you think. The team starts building. Things run long. After two months, you ship the new search functionality. The business gives it two months to watch the churn data. Churn goes down slightly, but not enough to have justified two months of development work.&lt;/p&gt;
&lt;p&gt;What went wrong? Maybe we hammered the scope too much, you think. Maybe we should have just built the full solution.&lt;/p&gt;
&lt;p&gt;Record scratch. Stop the playback.&lt;/p&gt;
&lt;p&gt;What would this have looked like if we had focused on the problem a little more and the solution a little less?&lt;/p&gt;
&lt;p&gt;Is the problem the number of clicks it takes to discover new artists? Let&#39;s review the tape. After review, it&#39;s clear that clicks are not the problem. In fact, customers didn&#39;t mention the number of clicks. You did. Your quantitative data did. Customers said it took too long to discover new artists.&lt;/p&gt;
&lt;p&gt;What&#39;s the scope of the problem? Length of time to discover new artists. That&#39;s too broad. How can we reduce the scope of the problem before even considering a solution? Well, we investigate the problem further. With this new perspective, you break out your iPhone and fire up the app. You start a stopwatch on your computer and you time how long it takes you to find a new artist using the new solution your team built.&lt;/p&gt;
&lt;p&gt;You immediately see it. The results are painfully slow to load. It could be a single click and the results would be too slow. The scope of the problem just shrunk. The solution didn&#39;t necessarily need to be a rebuild of the search functionality. It&#39;s quite possible that the solution could have been a new index on the database the team uses for searching artists. The solution could have been as simple as a pre-caching of results. It doesn&#39;t matter what the actual solution is now because you&#39;ve reduced the problem to something useful and manageable.&lt;/p&gt;
&lt;p&gt;Reducing the scope of the problem makes the solution easier to plan for and more aligned with the customer.&lt;/p&gt;
&lt;p&gt;If this sounds a lot like root cause analysis, it&#39;s because it is. However, in product development, it&#39;s easy to get lost in the solution. We know the product. We want to ship improvements and new functionality. A simple database index is hidden, but the experience can be massive. You have to force yourself to reduce the scope of the problem before even addressing the solution.&lt;/p&gt;
&lt;p&gt;If you do that, you&#39;ll likely find your team shipping meaningful solutions faster than ever before.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Agendas Make You a Passive Listener</title>
    <link href="https://polluterofminds.com/blog/agendas_make_you_a_passive_listener/"/>
    <updated>2023-02-01T16:41:31Z</updated>
    <id>https://polluterofminds.com/blog/agendas_make_you_a_passive_listener/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd97db214-f39e-4cd0-81c9-249408cd9111_6000x4000.jpeg&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd97db214-f39e-4cd0-81c9-249408cd9111_6000x4000.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
I’ve developed a method of interviewing job candidates that I know frustrates the more process-oriented hiring managers out there. I do not come into a job interview with any questions beyond, “tell me a little bit about your background and experience.” I don’t have a checklist of behavioral questions. I don’t even have standard work experience questions that I ask of each candidate beyond that one question. I approach interviews this way for a very specific reason—and it’s not because I’m lazy.&lt;/p&gt;
&lt;p&gt;When you ask someone a question and give them all your attention, it’s relatively easy to hear pieces of information that you want to follow-up on. You catch a couple of words that could make all the difference. You hear an anecdote from the candidate that might indicate more about them than the answers to 100 behavioral questions. But those small pieces of information only matter if you hear them and respond to them. This becomes a challenge when you have an agenda.&lt;/p&gt;
&lt;p&gt;When you have a notepad full of questions you’re trying to get through, that’s what your brain will focus on. So even though you are nodding your head as the candidate answers your question, your mind is elsewhere. You will miss key pieces of information. You’ll miss the opportunity to dive deeper on something that matters so much more than “a time you had to deal with an angry coworker.” Even worse, you will ask questions that have already been answered. Asking a question that a candidate has already answered in the process of answering one of your other questions is disrespectful and a waste of both your time and the candidate’s time. It shows to that person that you are only passively engaged, and may impact the strength of the answers throughout the rest of the call.&lt;/p&gt;
&lt;p&gt;Passive listening in candidate interviews is a problem, but it doesn’t just live in that domain. As product people, we must talk with customers and prospects. We must ask questions. When we do this, it’s important that we don’t come into a conversation focused too much on the agenda, or the passive listening will dampen the benefits of the conversation.&lt;/p&gt;
&lt;p&gt;The goal in these conversations (whether it be a job interview you’re conducting or product research) should be to learn. You learn best through active listening and follow-ups. When the person you’re speaking to says something interesting that can provide further value if you follow-up on the response, follow-up. Seems simple, but too often, we simply move on to the next question in our checklist of questions.&lt;/p&gt;
&lt;p&gt;Active listening is not an inherent skill. Fortunately, it’s one you can develop over time. I was not a great active listener early in my working life. Lucky for me, my first job out of college was in a call center. Outside of the script I had to read when answering a call, I didn’t have an agenda to get through with the person on the other end of the line. I generally had no idea what the other person was going to say. This forced me to be an active listener and to think on my feet. It forced me to drill into key pieces of information as I heard it.&lt;/p&gt;
&lt;p&gt;I now use active listening in all conversations I have with customers, prospects, and even job candidates. But I can hear you shouting: WE HAVE TO HAVE AN AGENDA WHEN DOING CUSTOMER INTERVIEWS!&lt;/p&gt;
&lt;p&gt;To that, I ask: Do you?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33be1bf6-d757-42ec-a8ec-aee9a2addc3f_480x270.gif&quot;&gt;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33be1bf6-d757-42ec-a8ec-aee9a2addc3f_480x270.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You need to have a general sense of the topics you want to cover, and depending on the stage of product development you’re in, those questions may be more or less focused on the actual product versus the market. In any event, I argue that you do not need a laundry list of questions prepared in advance. Instead, you need some high-level topics to cover. Similar to how I start an interview with a job candidate with a single question about their background and let the response carry me through the rest of the conversation, you can do this with product research.&lt;/p&gt;
&lt;p&gt;Start with a few high-level topics, ask the person about those topics, but be sure to listen. As the person speaks, you’re going to hear nuggets of information that may not have come out if you were too focused on your agenda. Pull on threads and chase the white rabbit. The most interesting pieces of information are not in your notepad of questions, they are in the responses people give you without realizing they’re giving them to you.&lt;/p&gt;
&lt;p&gt;The last thing you want to do when trying to learn is to rush ahead to the end. If you’re passively listening and just checking off each question you wanted to ask, you’re cheating yourself and you’re cheating the person you’re talking to. Give the conversation the attention it deserves and practice your active listening skills. Just try it once and see how much of a difference it makes. Go into your next product research call with no more than three high-level topics. Force yourself to listen and follow-up on the responses from the person on the other end of the line. Take notes if you must but do not allow the note-taking to distract you from the listening.&lt;/p&gt;
&lt;p&gt;Satisfying the items on your agenda is not the goal. Education and insights are the goals.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing and Distribution</title>
    <link href="https://polluterofminds.com/blog/writing_and_distribution/"/>
    <updated>2023-01-19T22:58:42Z</updated>
    <id>https://polluterofminds.com/blog/writing_and_distribution/</id>
    <content type="html">&lt;p&gt;My writing history is all over the web. In some cases, it&#39;s well preserved. In others, it&#39;s hard to find. This is generally because I bounce between writing solutions like a kid with a pocket full of quarters at an arcade. Way back in the day, I wrote blog posts in Dreamweaver and published them in the OG no-code way. Then I found Blogger. Then I tried WordPress. Then Medium came along and changed the game from an experience perspective. Finally, there was Ghost.&lt;/p&gt;
&lt;p&gt;The trouble wasn&#39;t just options. There have always been options. The problem was in balancing my wants and my needs. I&#39;ve always been stuck worrying about three main things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Discoverability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writing experience&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This has led to the bounce-around approach I mentioned above. Blogger had some discoverability baked in, but I didn&#39;t control my site and the writing experience was bad. WordPress gave me control through self-hosting, but discoverability was bad and until their most recent editor version, the writing experience was bad. Medium provided tons of discoverability and the best writing experience on the web, but it gave me next to no control. Ghost, like WordPress, gave me control, but it took things a step further with a great writing experience. However, Ghost didn&#39;t help with discoverability.&lt;/p&gt;
&lt;p&gt;This three-headed problem has led to my writing being fragmented across many sources. It has led to me being one of Ghost&#39;s worst customers (Sorry, Ghost). I&#39;ve subscribed and cancelled my Ghost service more times than I can count. I&#39;ve rolled my own static site generated blog, I&#39;ve gone back to Medium, I&#39;ve looked at Substack, and I have explored crypto-native solutions like &lt;a href=&quot;https://mirror.xyz/&quot;&gt;Mirror&lt;/a&gt;. But it never felt like I had a sound strategy to solve all three desires for my writing.&lt;/p&gt;
&lt;p&gt;Until now.&lt;/p&gt;
&lt;p&gt;The solution I&#39;ll be experimenting with for 2023 is still a fragmented strategy with a centralized canonicalized reference point. Here&#39;s the plan.&lt;/p&gt;
&lt;p&gt;For personal updates (like this one), I&#39;ll publish on my own site only. The articles will canonically originate here and should only appear here.&lt;/p&gt;
&lt;p&gt;For product and startup articles, I&#39;ll post on Substack (technically, I have a Substack account but have not really used it yet) and copy them to my site. Substack does not support canonical URLs, so I&#39;m not sure yet if I will cross-post to my own site.&lt;/p&gt;
&lt;p&gt;For my technical tutorials, I will post on Medium. Medium does support canonical URLs, so I may experiment with cross-posting and setting the canonical URL in Medium.&lt;/p&gt;
&lt;p&gt;For my web3/crypto-specific articles, I will be testing a sort of Substack-style competitor specifically built for the space called &lt;a href=&quot;https://paragraph.xyz/&quot;&gt;Paragraph&lt;/a&gt;. I&#39;m not sure if Paragraph supports canonical URLs, but it&#39;s likely my writing about web3 will just live there and not appear on this site anyway.&lt;/p&gt;
&lt;p&gt;I believe I&#39;ve been trying to solve my writing problems in the wrong way. An all-encompassing solution would be amazing, but I don&#39;t know that it can exist. I think it is up to me as a writer to put in the effort and to leverage the tools available to satisfy my three requirements.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Can&#39;t Be Evil Is Bad Positioning</title>
    <link href="https://polluterofminds.com/blog/cant-be-evil-is-bad-positioning/"/>
    <updated>2022-11-21T13:56:32Z</updated>
    <id>https://polluterofminds.com/blog/cant-be-evil-is-bad-positioning/</id>
    <content type="html">&lt;p&gt;In 2017, &lt;a href=&quot;https://www.coindesk.com/markets/2017/08/27/cant-be-evil-the-google-inspired-case-for-blockchain/&quot;&gt;Blockstack CEO Muneeb Ali started using the phrase &amp;quot;can&#39;t be evil&amp;quot;&lt;/a&gt; as a blockchain, decentralization-first retort to Google&#39;s old &amp;quot;don&#39;t be evil&amp;quot; motto. It caught on in crypto. People loved it. Blockstack bought billboards and even bought a domain (no defunct). It took a couple of years, but the phrase has gone (web3) mainstream.
&lt;img src=&quot;https://polluterofminds.com/blog/cant-be-evil-is-bad-positioning/__GHOST_URL__/content/images/2022/11/image.png&quot; alt=&quot;&quot; /&gt;
The problem with the messaging is two-fold. One, it&#39;s false. Two, it is exactly the type of marketing message every marketing 101 student is taught to avoid.&lt;/p&gt;
&lt;p&gt;Let&#39;s start with the validity of the message. The idea that apps can&#39;t be evil or that people can&#39;t be evil just because they use blockchains is provably false. I could write a smart contract and disguise it as a legitmate NFT minting contract. I could choose not to publish the source code. I could set up a website with a mint button. I could watch as the smart contract takes user funds while giving them nothing in return. It&#39;s a scheme that would be caught pretty quickly, but it&#39;s one that blockchain does not prevent. At best, open ledgers allow apps and people to &amp;quot;not be evil without being caught easier.&amp;quot;&lt;/p&gt;
&lt;p&gt;Taking this a level deeper (or higher, depending on your view of the application stack), the client application a person is using to interact with web3 technologies can violate your privacy, install malware, steal password, and more. There is nothing about a blockchain that inherently prevents someone from being evil. Protecting against evil is a claim that cannot be supported, which leads me into my next point.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://issuu.com/georgiaurbanagcouncil/docs/uacmag_summer2021_online/s/12539177&quot;&gt;Selling the value proposition&lt;/a&gt; is the best way to market to most audiences. Can&#39;t Be Evil feels more like selling a feature. Or selling an ideology. If the value proposition is Can&#39;t Be Evil, on what is the consumer actually making a decision? Are they truly making a choice between evil and not evil. Logic tells you (and them) the answer is clearly no. So, if Can&#39;t Be Evil is the marketing strategy, it&#39;s a losing one.&lt;/p&gt;
&lt;p&gt;The messaging also sets the target market up for high churn potential. If you do manage to sell an audience on the ideology of Can&#39;t Be Evil, what happens when they experience something they perceive to be evil? A hack of a smart contract is a result of bad code, right? That doesn&#39;t count. The developer wasn&#39;t evil. The app wasn&#39;t evil. But in the mind of the person affected, something evil happened. But you promised Can&#39;t Be Evil. The likelihood that someone who came to web3 on the promises of Can&#39;t Be Evil stays after something like this is slim.&lt;/p&gt;
&lt;p&gt;As the FTX saga unfolds, many will double- and triple-down on the phrase. They will use FTX as an example of on-chain functionality and true decentralization acting as a protective layer. But as long as humans are expected to understand the code that powers decentralized applications and on-chain commerce, then there is an opportunity for evil.&lt;/p&gt;
&lt;p&gt;FTX was centralized, but what if a new-to-crypto user was lured in with the Can&#39;t Be Evil messaging. They dipped their toes in the water of a centralized exchange because it was the most straightforward path to getting their first bits of crypto. This is nice, they thought. This is safe. When FTX loses all of that person&#39;s money, do you think they are going to care that they &amp;quot;didn&#39;t do it right&amp;quot;? That they didn&#39;t actually participate in DeFi? They are going to remember they were promised something and it didn&#39;t live up to their expectations.&lt;/p&gt;
&lt;p&gt;Can&#39;t Be Evil as a marketing strategy sets the entire space up for failure.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>In Favor Of Preservation Over Permanance</title>
    <link href="https://polluterofminds.com/blog/in-favor-of-preservation-over-permanance/"/>
    <updated>2022-11-08T03:01:05Z</updated>
    <id>https://polluterofminds.com/blog/in-favor-of-preservation-over-permanance/</id>
    <content type="html">&lt;p&gt;When I was in high school, I was an idiot. Sure, I was smart. I passed my classes. I did my work. But I was an idiot in the sense that teenagers (especially teenage boys) don&#39;t think before they act. What seems smart when you&#39;re 16 or 17 looks incredibly dumb when you&#39;re 38.&lt;/p&gt;
&lt;p&gt;In one of my yearbooks, I thought it would be a great idea to caption many of the people in my class. Snarky and inappropriate captions litter that yearbook. They are written in permanent marker, and I cannot ever remove them without removing each page that is marked up. Looking through the yearbook now is embarrassing. I can&#39;t show it to my kids. I cringe when my wife looks and makes fun of the stupid teenage version of me.&lt;/p&gt;
&lt;p&gt;It lives on even though I wish it didn&#39;t.&lt;/p&gt;
&lt;p&gt;Contrast that with a collection of pencil sketches I found that I had done when I was in fifth grade. When I was younger, I wanted to be an artist. My gradfather had been a sketch artist for a local police department in the 1960s and I had always been inspired by his artistic talents. I didn&#39;t want to draw criminals and reconstructed images of dead people, though. I wanted to draw comics. So, I drew the likes of Batman.&lt;/p&gt;
&lt;p&gt;I managed to keep a few of my old sketches, and I cherish them to this day. But they are delicate. They are made of paper and graphite. They can crumple. They can smudge. I want them to last, so I take care of them.&lt;/p&gt;
&lt;p&gt;This is the difference between preservation and permanence. Most things shouldn&#39;t be permanent. For the things that should be, it&#39;s usually an indicator that you or someone else cares enough to make sure it lives on. Suggesting up front that something should live on forever is both short-sighted (teenage me can attest to this) and filled with hubris (is whatever it is you&#39;re trying to preserve actually all that valuable to the world?). Naturally allowing that thing to live on because people care enough to preserve it feels right.&lt;/p&gt;
&lt;p&gt;Blockchain technology has perverted the way we think about permanence. Because we think it&#39;s possible to keep a permanent record of everything, we somehow also think we &lt;em&gt;should&lt;/em&gt;. A permanent ledger is an accounting tool. It&#39;s a globally scalable and open accounting measure that anyone can plug into. Permanence here makes sense.&lt;/p&gt;
&lt;p&gt;Extending it much further than that is where things get murky. Should that blog post you wrote in 2017 be permanent? Maybe. What about that comment you left on your ex-girlfriend&#39;s Flickr page when you were drunk back in 2014? Again, maybe.&lt;/p&gt;
&lt;p&gt;Other people might think it&#39;s worth saving. The Internet Archive has been doing this for years with web pages because they care. Those web pages came with no guarantees of permanence when they were published, though. Your blog post shouldn&#39;t either.&lt;/p&gt;
&lt;p&gt;You, as an individual, should have the right to change your mind about something. And when you do change your mind, it&#39;s fair to have the content that follows you around change as well. We remove that fundamental capability when we force things into permanence.&lt;/p&gt;
&lt;p&gt;Web3 should not be &amp;quot;the permanent web.&amp;quot; It should be the &amp;quot;open web.&amp;quot;&lt;/p&gt;
&lt;p&gt;As humans, we show we care through intentionality. Intentionality is stolen from us when things are forced into permanence. Care is stolen from us. When we don&#39;t have to care about something, we won&#39;t.&lt;/p&gt;
&lt;p&gt;Permanence is about control. Preservation is about care.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Literary Entertainment Studio</title>
    <link href="https://polluterofminds.com/blog/literary-entertainment-studio/"/>
    <updated>2022-11-07T02:19:26Z</updated>
    <id>https://polluterofminds.com/blog/literary-entertainment-studio/</id>
    <content type="html">&lt;p&gt;I received my MFA in Creative Writing in 2017. I was fortunate to go through a program that left pretentiousness behind and was as inclusive and welcoming as an expensive graduate program can be. However, there is a distinct feeling that comes out of every MFA that the only way to make it is to be published. Professors are often judged by their publication record. And publication in a literary journal is not enough. You have to be published by, preferably, a large publishing house, and short of that, you have to be published by an independent publisher. When I graduated, I shopped my novel to multiple agents. Got a few bites, but nothing major. This was the way that things went. Take your shot, see what happens. Publish with an indie press if you can. Move on to your next book if you can&#39;t.&lt;/p&gt;
&lt;p&gt;And that&#39;s not a bad path. The science community has a peer review system that, when working well, leverages peers to justify or reject theories. In creative writing, the peer review system is made up of literary journals, agents, and publishers.&lt;/p&gt;
&lt;p&gt;But my product mind has been spinning lately about a world in which artists productize their offerings. Now, before you say that very concept is a bastardization of art and creativity, let&#39;s think about engineering. Computer engineering, in particular, &lt;a href=&quot;https://www.computer.org/publications/tech-news/trends/How-Computer-Engineering-Helps-You-Think-Creatively&quot;&gt;is a creative field&lt;/a&gt;. The creativity of engineers does not happen in a vacuum, though. Most often, engineers are assisted by product managers and marketers that take the creative solutions presented by their code and turn it into something people will pay for.&lt;/p&gt;
&lt;p&gt;In the fiction world, we have examples of this as well. Independent films are often written by, directed by, produced by, and distributed by a small, dedicated team. They effectively productize the story and market it. This is what film festivals are all about. This path is celebrated. &lt;a href=&quot;https://noamkroll.com/the-paradox-of-making-a-profitable-indie-film/#:~:text=Statistically%20speaking%2C%20the%20picture%20is,film%20is%20practically%20unheard%20of.&quot;&gt;It fails&lt;/a&gt; roughly as often as &lt;a href=&quot;https://www.failory.com/blog/startup-failure-rate&quot;&gt;startups in the technology industry fail&lt;/a&gt;, but we don&#39;t think of the two as similar product development paths. One is an artistic pursuit where failure is an accepted outcome. The other is a monetary pursuit where failure is an accepted outcome.&lt;/p&gt;
&lt;p&gt;Artistic. Monetary. Many times, we treat those two words as competitive. But I am not convinced they have to be.&lt;/p&gt;
&lt;p&gt;With novels and short stories, the concept of self-publishing and independent pursuit of success hasn&#39;t caught on as well. There have been platforms to help authors reach their audience. &lt;a href=&quot;https://www.wattpad.com/&quot;&gt;Wattpad&lt;/a&gt; may be the largest. But generally, self-publishing has been relegated to the world of self-help and business guides.&lt;/p&gt;
&lt;p&gt;Perhaps indie film is the only example of end-to-end creative control of fiction? Perhaps the process cannot be extended elsewhere? If that were true, we wouldn&#39;t have Pixar.&lt;/p&gt;
&lt;p&gt;Pixar became one of the biggest brands in the world by productizing their creativity. Pixar wasn&#39;t an independent filmmaker. Pixar became an independent film company. While Hollywood was—and still is—known for buying scripts from writers and developing those scripts into products, Pixar took a different approach. As a creative team, they worked to develop stories in house. They produced those stories. They distributed those stories. They productized the creative process.&lt;/p&gt;
&lt;p&gt;We see this in television as well. Yes, it&#39;s true that television studios might buy a pilot like Hollywood does for film scripts. However, once that pilot is optioned, a team is constructed within the studio. That team is responsible for continuing the story, for marketing the story, and for continuing the story&#39;s distribution.&lt;/p&gt;
&lt;p&gt;We don&#39;t see this with novels and short stories.&lt;/p&gt;
&lt;p&gt;We have independent publishers. &lt;a href=&quot;https://bookshop.org/p/books/leaving-arizona-justin-hunter/14825776?ean=9781952050022&quot;&gt;My book&lt;/a&gt; was published by an indie press, and I am eternally grateful for that. But independent in this sense is very different than independent in the indie film sense. Authors still have to pitch their books to indie presses. They still have to hope they are accepted. And then they must rely on the services of the press as the book is taken to market.&lt;/p&gt;
&lt;p&gt;This is much more akin to the agent/publisher model. Much less akin to the indie filmmaker model.&lt;/p&gt;
&lt;p&gt;The work that goes into writing a screenplay or a television series is not any less than that of writing a novel. If such a process can be productized, brought under an independent studio style umbrella, then why can&#39;t it be done for books? There are probably a million reasons, but as my stream of consciousness thought process evaluates this in the moment, and as my product brain shifts into high-gear, I see opportunity.&lt;/p&gt;
&lt;p&gt;Imagine a literary entertainment studio. This studio would be made up of writers who also must act as product marketers and distributors. They may have to be technologists because technology helps distribution. This studio would be responsible for writing their own books. The authors names would mean something the same way the writers of Pixar movies mean something. The studio would be responsible for marketing and distributing the books. This would mean running the studio like a business. What&#39;s the break-even sales number for any particular book? Work backwards from that to develop a go to market strategy. Apply the strategy, measure the results, iterate.&lt;/p&gt;
&lt;p&gt;Product studios and creative studios are not so different in this regard.&lt;/p&gt;
&lt;p&gt;A literary entertainment studio would have a couple of added benefits as well. Authors within the studio can make a name for themselves while helping other authors in the studio during the development process. This then makes a name for the studio. A successful studio attracts better authors and helps the studio grow. Additionally, the IP rights from the studio would be split amongst studio members. A film or video game adaptation benefits the entire studio equally.&lt;/p&gt;
&lt;p&gt;These thoughts are half-baked, surely flawed, and have probably been tried many times before. But on a Sunday evening after the clocks have been set back one hours and my body is much more tired than the time on the microwave says it should be, these ideas feel inspiring and exciting to me.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Open Data Nostalgia of Farcaster</title>
    <link href="https://polluterofminds.com/blog/the-open-data-nostalgia-of-farcaster/"/>
    <updated>2022-11-05T14:07:53Z</updated>
    <id>https://polluterofminds.com/blog/the-open-data-nostalgia-of-farcaster/</id>
    <content type="html">&lt;p&gt;I&#39;ve been meaning to dive into the &lt;a href=&quot;https://farcaster.xyz/&quot;&gt;Farcaster&lt;/a&gt; protocol for a while now. This past week, I finally took the plunge. While I waited for my invite-only access to generate a username and access the &amp;quot;official&amp;quot; iOS client, I created some Node.js scripts to play around with the protocol. I read the documentation on the &lt;a href=&quot;https://github.com/farcasterxyz/protocol&quot;&gt;protocol&lt;/a&gt; and the &lt;a href=&quot;https://github.com/farcasterxyz/hub&quot;&gt;hubs&lt;/a&gt;. And I played with apps already built atop the Farcaster protocol—apps like &lt;a href=&quot;https://discove.xyz/&quot;&gt;Discove&lt;/a&gt; which I found really inspiring.&lt;/p&gt;
&lt;p&gt;As I explored the protocol, nostalgia began creeping back into my mind. I&#39;ve been working in &amp;quot;blockchain&amp;quot; since 2015, but I didn&#39;t start building in the space until 2017. Back then, I started work on an app called Graphite—an open, but encrypted alternative to Google Docs. It was built atop promises made by &lt;a href=&quot;https://www.stacks.co/&quot;&gt;Blockstack&lt;/a&gt; (now called Hiro). Blockstack offered data portability, name registration, open networks, and driving competition down to client-level UX instead of data walls. I was especially taken by concept of &lt;a href=&quot;https://docs.stacks.co/docs/gaia/&quot;&gt;Gaia Hubs&lt;/a&gt; on Blockstack. These hubs were portable storage locations that could be run by services or by individuals. They were designed to build open networks as an alternative to the way apps had been built throughout the entire cloud-era of creation.  Hubs were controlled by namespaces. Names were registered on the Bitcoin blockchain (and later the Stacks blockchain).&lt;/p&gt;
&lt;p&gt;If this all sounds familiar, it sounded familiar to me too. This is what attracted me to Farcaster. The protocol is laid out in a similar fashion, but it is Ethereum based. Names are registered as NFTs on the Ethereum blockchain. Names, I think, point to hubs? This part is a little fuzzy to me, but in any event, hubs can theoretically be run by anyone. These hubs have peer connections, and the owners of the hubs control the method in which data is persisted beyond disk storage.&lt;/p&gt;
&lt;p&gt;The practical applications of an open data model like this are already exhibited in the proof of concept apps built atop Farcaster now. While Farcaster is still on Ethereum&#39;s testnet and not &amp;quot;production ready&amp;quot;, people are building. And that&#39;s a great sign.&lt;/p&gt;
&lt;p&gt;However, I still have the scars from the failed promises of the Blockstack ecosystem. Almost no one ran Gaia Hubs. This meant that all data was entirely controlled by Blockstack. On its face, I actually don&#39;t mind this. The data was available openly, and anyone could index it or run their own hub. The real problem was scale. Blockstack never reached critical mass. Devs are still using the platform (Hiro), but it still has not reached a scale to which the open data model matters. This is where I&#39;m encouraged by Farcaster&#39;s thoughtful approach.&lt;/p&gt;
&lt;p&gt;Decentralization maximalists might scoff at the idea of a manually curated registry of names and access, but this is exactly what Farcaster needs to do in order to reach critical mass. Couple the curation mechanism with a genuinely useful and pleasant application, and adoption should follow. When the app and therefore the protocol have reached critical mass (1 million users according to &lt;a href=&quot;https://twitter.com/dwr&quot;&gt;Dan Romero&lt;/a&gt;), the benefits of the open data model become significantly stronger. Strong enough to power businesses built atop the protocol.&lt;/p&gt;
&lt;p&gt;I&#39;m cautiously optimistic about the future of Farcaster because it puts product first. It puts experience first. And it is driven by the possibilities of new models being built atop it.&lt;/p&gt;
&lt;p&gt;But then again, I had these feelings before and I was let down.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why I&#39;m Participating in NaNoWriMo For The First Time</title>
    <link href="https://polluterofminds.com/blog/why-im-participating-in-nanowrimo-for-the-first-time/"/>
    <updated>2022-10-31T14:02:33Z</updated>
    <id>https://polluterofminds.com/blog/why-im-participating-in-nanowrimo-for-the-first-time/</id>
    <content type="html">&lt;p&gt;I&#39;ve always been intrigued by the idea of National Novel Writing Month (NaNoWriMo), but I could never bring myself to participate. I received my MFA in Creative Writing in 2017, and it took me an entire year to write the book that would become my thesis. I&#39;m a fast writer, but I couldn&#39;t wrap my head around completing a vomit draft novel in 30 days. I wrote another novel after my MFA program in the morning before work and in the evenings after my kids went to bed. That novel took me eight months to complete the first draft. In 2020, I published a collection of short stories with a small indie press. So, it took me three years to finish enough short stories to make up a decent-sized collection.&lt;/p&gt;
&lt;p&gt;All this to say that a minimum of 50,000 words in a month felt impossible.&lt;/p&gt;
&lt;p&gt;And yet, I am still intrigued by the idea. I need to be working on multiple things at once. It&#39;s the way my brain works. When my oldest son was born, it wasn&#39;t enough that I was working full time and taking care of a baby, I decided to start blogging. For four years, I would wake up at 4am every morning so I could crank out a few articles before going to work. Later, I decided to enroll in an MFA program that required me to write and write frequently. As with blogging, writing stories and critiques for my MFA program took up most of my spare time. But it was writing, and I loved (and still do love) writing.&lt;/p&gt;
&lt;p&gt;In 2017, as I was finishing up my MFA program, I taught myself to code. By this point, I had been working in tech for the last 5 years, so it felt natural to finally learn to code. Plus, I had taught myself to code so that I could &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;build a writing app&lt;/a&gt;. What no one ever tells you about learning to code is that it&#39;s both a super power and an all consuming presence. All of my free time shifted from writing prose to writing code. This isn&#39;t a bad thing, necessarily. This transition allowed me to start two companies and eventually land at &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt; where I head up product. But it did mean less creative writing.&lt;/p&gt;
&lt;p&gt;In the five years since I learned to code, I may have written five total short stories. I poked around at my two novels off an on, never really focusing enough to improve them. &lt;a href=&quot;https://perligo.io/&quot;&gt;I built a writing feedback app&lt;/a&gt;, thinking this would jumpstart my writing. And for a while, it did. I submitted new short stories to the groups on the app for feedback, but it felt more like a bootstrapping mechanism rather than a true creative writing pursuit.&lt;/p&gt;
&lt;p&gt;Despite my fading creative writing output, the lure of storytelling has remained. I joined an &lt;a href=&quot;https://zombiestateuniversity.com/&quot;&gt;NFT project&lt;/a&gt; with a strong storytelling element. I have leveraged my writing skills and storytelling capabilities to help drive content for Pinata. I have built short video games centered around creative stories. I&#39;ve toyed with experimental storytelling in many forms. But at the end of the day, I was still building tech and not writing.&lt;/p&gt;
&lt;p&gt;So, with November bearing down on us, the time feels right for me to finally try my hand at NaNoWriMo. My default is to always fill my spare time with tech and coding. I think this used to come from not being fulfilled at worked. But now, I&#39;m very fulfilled. So, in an effort to jumpstart my creative writing again, I&#39;m participating in NaNoWriMo. I might not succeed. If I do, the output will invariably be horrendous. But by doing something on the side that is unrelated to tech and apps and startups, I feel like I&#39;m freeing up my creative mind.&lt;/p&gt;
&lt;p&gt;I&#39;ll try to keep active on Twitter throughout the month and try to post updates here along the way. But if you&#39;re curious what the novel will be about, you should read my old short story &lt;a href=&quot;https://www.fiveonthefifth.com/vol-3-issue-1-story-5&quot;&gt;&lt;em&gt;The Nothing&lt;/em&gt; here&lt;/a&gt;. I&#39;ve always wanted to extend that world into a full-length novel. No better time than now, right?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Thinking In Public</title>
    <link href="https://polluterofminds.com/blog/thinking-in-public/"/>
    <updated>2022-08-02T14:50:38Z</updated>
    <id>https://polluterofminds.com/blog/thinking-in-public/</id>
    <content type="html">&lt;h4&gt;Why it’s important for leaders to brainstorm and discuss ideas in a way that allows the rest of the company to interact and gain insights into decisions&lt;/h4&gt;
&lt;p&gt;Remote work has pushed us to messaging apps. Conversations that used to happen in the hallways of your office happen on Slack and Microsoft Teams and Discord now. However, the serendipitous communication that arose from in-person work is not gone with remote work. It just requires more intentionality.&lt;/p&gt;
&lt;p&gt;Part of that intentionality is &lt;em&gt;thinking in public&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt;, early on—when the company was just four people—we knew dreaming big was going to be important, but we also knew the best way to dream in color was to share our thought process along the way. It started with a slack channel called &lt;code&gt;#pinnies-dreamland&lt;/code&gt;.
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ivWUrhC7lmwolfpunWuwuA@2x.png&quot; alt=&quot;&quot; /&gt;
The channel was a start. It was permission to talk openly without fear of the what-ifs creeping in. It was permission to explore the possible and, more important, the potentially &lt;em&gt;impossible&lt;/em&gt;. But alone, the channel was just an idea factory in isolation. In order to propose ideas with substance, a shared understanding of multiple concentrations was necessary. Where is the company now? Where is the company going? What could change the trajectory? What does the market look like? What are leading indicators? What are lagging indicators? And so much more.&lt;/p&gt;
&lt;p&gt;In the often isolated silo of remote work, it’s hard to keep people on the same page, so constant communication is key. But how do you balance constant communication with the very real possibility that you run into information overload? I think the answer to this is to not balance it. In truth, more information, even if it gets buried, is better than no information. A company that has the opportunity to see the thought process of leaders and contribute to that thought process will have an advantage over one that discusses the future behind closed doors.&lt;/p&gt;
&lt;p&gt;So, if we aren’t solving for information overload, we should at least optimize for information reception, right?&lt;/p&gt;
&lt;p&gt;In a world where messaging apps like Slack become the de facto communication medium, it’s important that people understand where to look for info and how to contribute. I don’t think Pinata has completely solved this, but one of the things we instilled early one—back when we were a company of four—was that every conversation was open to every member of the company. If you read something that you felt applied to the business, you should share it. Give your perspective, comments on others’ perspectives. If you heard from a customer, share the insight. If you saw a market signal, you should share that with the team and explain why it matters.&lt;/p&gt;
&lt;p&gt;This type of communication requires full trust. It requires respect. It requires a complete lack of ego. You have to be comfortable as a CEO or a CTO sharing ideas that even the newest hire might push back against. You also, as the newest hire, must be comfortable offering your opinions and having a back-and-forth conversation with anyone else at the company.&lt;/p&gt;
&lt;p&gt;An all-hands meeting is a good way to convey information top-down. These types of meetings are useful, but they are not a substitute for thinking in public. All-hands meetings are less collaborative than open, asynchronous communication. They are good for distributing important facts but not for healthy discourse on the varied opinions a team might have on the company or market’s current or future state.&lt;/p&gt;
&lt;p&gt;A half-formed thought, posted on slack or even shared in an email with others, can often lead to fully formed product decisions later. But that can only happen if you’re willing to share. It can only happen if you’re willing to participate when others share. Messages will get lost. But by at least providing the opportunity for others to share in your thought process, you are creating an organization of horizontal leadership. Ideas don’t form in isolation when you think in public. They form concurrently. They form across a horizon of shared understanding. And the company is better for it.&lt;/p&gt;
&lt;p&gt;Optimize for participation, but don’t skip out on thinking in public just because you don’t have the perfect formula for doing so. Share, collaborate, and communicate without fear of being wrong, without consideration of titles and positions in the hierarchy of the organization. Work as the creative people you are, and you will find that the entire organization starts to pull in the same direction much easier.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Chasing Glory</title>
    <link href="https://polluterofminds.com/blog/chasing-glory/"/>
    <updated>2021-08-31T13:24:03Z</updated>
    <id>https://polluterofminds.com/blog/chasing-glory/</id>
    <content type="html">&lt;p&gt;My team lost its first three games of the summer camp season. A diverse group of boys all bunking in the University of San Diego dorms while the real college kids were back home with their families, we all had the same two goals: improve our basketball skills and win the championship. Losing three straight to start the schedule was not the way to snag a trophy.&lt;/p&gt;
&lt;p&gt;We were coached by one of USD’s men’s basketball players. He knew what he was doing because he was playing college ball. And yet, we were losing. Two games a day, cafeteria food for breakfast, lunch, and dinner, and stories told only as boys could tell them in dorms reserved for kids much older than them. It was the time of my life.&lt;/p&gt;
&lt;p&gt;Except for the losing part.&lt;/p&gt;
&lt;p&gt;My team, a bunch of shirts in a sea of skins, was not bad. We had the big guy who could crash the boards. We had the point guard who could lead an army through a minefield. And we had the outside shooters. The guys like me. The guys who, posted like snipers on a rooftop, would fire from a distance. But we were losing, and we were mad.&lt;/p&gt;
&lt;p&gt;So mad, in fact, that we asked the coach if we could throw his playbook out the window. To his credit, and perhaps as a representative showing of his actual coaching prowess, he said yes. He gave us the keys and told us not to crash the car.&lt;/p&gt;
&lt;p&gt;And we didn’t.&lt;/p&gt;
&lt;p&gt;We won every game. Two games a day for the remaining four days of the camp, and we won them all. We won our way right into the championship game. My parents came, ready to take me home only to realize they’d have to sit through one more game before it was time to leave. My sister was there, wondering what the big deal was.&lt;/p&gt;
&lt;p&gt;The big deal was that this was the game. Everything every single boy in that camp had done had culminated in this game. Most of them sat in the stands with the parents, just waiting to go home, wishing they were still on the court. But not me. Not my team. We were the focus, the stars. The team that couldn’t win became the team that couldn’t lose.&lt;/p&gt;
&lt;p&gt;But we did lose.&lt;/p&gt;
&lt;p&gt;By a single possession, we lost, and the magic was gone. The focus was gone. My parents congratulated me and took me home. My team, and my five days living a college life as a pre-teen, faded back against the hills of San Diego, California.&lt;/p&gt;
&lt;p&gt;The way I felt that summer, for those five days, were so powerful and painfully distant that I thought about them nightly. I thought about them all the way into adulthood.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lettersfromhomeandaway.substack.com/p/letter-34-on-wanting&quot;&gt;In a phenomenal post about playing “the game” Ali Montag compares&lt;/a&gt; former high school football stars with today’s internet sensations. The high that comes from being wanted, needed, appreciated, and loved is hard to give up. But like with high school football, the glory days of internet fame are fleeting. And as Ali suggests, the fall from the spotlight is all the more amplified.&lt;/p&gt;
&lt;p&gt;It’s easy to see this comparison take shape across what we now call the creator economy. Building an audience and performing for that audience is not a niche reserved for the few who have already cracked the inner circle. It’s everyone’s job every day on the internet, or so it seems. But outside the creator economy (or perhaps inside still depending on your definition), there is another form of glory chasing that is hard to shake.&lt;/p&gt;
&lt;p&gt;I should know. I’m still chasing my glory days.&lt;/p&gt;
&lt;p&gt;It wasn’t that basketball camp in San Diego. It wasn’t sports at all. What got me was way more technical. An app that people actually used and liked.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;In high school and college, you learn public speaking. Or maybe you don’t because you managed to skip that class or take another elective. But most do. And most never use it in the way it was presented. Most people give presentations to a room of dozens at most.&lt;/p&gt;
&lt;p&gt;I took public speaking in high school. I was forced to practice it in college. I didn’t expect to use the skills I’d learned. But in March of 2018, I found myself on stage in Berlin presenting to a room of more than 200 people.
The secret no one tells you about public speaking is that it doesn’t matter how many times you’ve practiced your speech, you’re still going to almost freeze and die right on stage in front of all those people. Maybe that’s not totally fair, but that’s how I felt.&lt;/p&gt;
&lt;p&gt;My old high school public speaking class carried me through the short talk. That short talk led to press. A lot of it. The app I built, at least on its idea, resonated. People began using it, tweeting about it, complaining about it. The complaints were, in my mind, the highest form of validation. People tend not to take time out of their day to complain about something unless they really care about it.&lt;/p&gt;
&lt;p&gt;The app lived in a niche environment. In the Venn diagram of productivity tools and blockchain, there was &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt; and nothing else. This allowed it to gain adoption quickly. It became the top application on a particular blockchain protocol. In fact, it became the face of that protocol. For a while, at least.
The protocol wanted Graphite featured at events, and they were willing to pay for me to go to these events and talk about this thing I built. I traveled to Oslo, to London, to New York City, to Austin, to San Francisco, and more. I gave talks about the power of user experience in a market where everything was so new that it felt like a research experiment. I talked about learning to code just so that I could build this app.&lt;/p&gt;
&lt;p&gt;These talks generated even more press. They also generated interest from companies I was not well-suited to handle. Companies like CNN and Buzzfeed wanted demos. They asked questions I didn’t have answers for. I doubled down on trying to find those answers, trying to build solutions for the questions they asked. I committed to The Enterprise.&lt;/p&gt;
&lt;p&gt;I quit my job to work full-time on the app, receiving grant money along the way from the protocol. In the circles I hung out in, people knew my name. I was asked to appear on podcasts and do live interviews. People wrote blog posts about my software, they posted on Reddit and Hacker News. Investors reached out to me.&lt;/p&gt;
&lt;p&gt;And then, it all went away.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;You know how when you think back to childhood memories and try to recount those memories only to find out you can’t remember the full details? That’s often how I feel when thinking back on Graphite. Am I getting the details right?&lt;/p&gt;
&lt;p&gt;I doubt I am getting it all right. I am sure I bend the story one way or another at times. My memory of events is shaped by my emotional state at the time of the event. Could Graphite have continued? Maybe. Did I give up? Maybe. Was it really as good as I think it was in the early days? Maybe not.&lt;/p&gt;
&lt;p&gt;These are the things that linger in the back of my mind, and I think they are the same thoughts and feelings that linger in the back of all entrepreneurs’ minds. These thoughts and feelings drive nostalgia, yearning for what once was.
They result in an endless chase of the glory days. Like a broken former football star, re-living the moments when you felt on top of the world can be exciting. But when you snap back to reality, you’re left with two options:&lt;/p&gt;
&lt;p&gt;Continue the chase or move on to something new.&lt;/p&gt;
&lt;p&gt;I’ve done a decent job at moving on to something new, but I think about Graphite every day. I think about my missteps, I question whether I quit on it or not. These are the things you live with as a maker, a builder, an entrepreneur.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://litreactor.com/columns/dont-go-back-avoid-spinning-your-wheels-on-old-stories&quot;&gt;I once wrote that writers should let their old short stories die&lt;/a&gt;. They shouldn’t revisit them and try to revive them years later. And yet, as an entrepreneur, I am tempted every day to try again. I think we all are. This is where the term “serial entrepreneur” comes from. In some cases, though, it is literally trying again. It’s not trying again in the sense that you start another company. It’s trying again in the sense that you rebuild what you once had created, but you do it with the lessons you learned acting as the wind at your back.&lt;/p&gt;
&lt;p&gt;I’m not sure that’s what I’m doing now. But I am building another document editor. Collaborative, private, blockchain-based. This time, I’m building it with a friend. With someone I trust. This time, I’m building it for the public good. Revenue comes last.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What is a Writing Sprint?</title>
    <link href="https://polluterofminds.com/blog/what-is-a-writing-sprint/"/>
    <updated>2021-07-07T11:59:02Z</updated>
    <id>https://polluterofminds.com/blog/what-is-a-writing-sprint/</id>
    <content type="html">&lt;h3&gt;And how can a writing sprint app help hold you accountable?&lt;/h3&gt;
&lt;p&gt;Writing is hard. Damn hard. So many people want to do it, but so many people fire up their word processors only to navigate away to Twitter or Facebook. I get it. Even writing a blog post can be overly demanding. This is where discipline comes in.&lt;/p&gt;
&lt;p&gt;Discipline is the process by which you force yourself to do something until it becomes a habit. Discipline and habit create motivation. Motivation, in turn, translates to excitement. It&#39;s a flywheel, but you have to get that flywheel moving. That&#39;s what writing sprints can do for you.&lt;/p&gt;
&lt;p&gt;I first heard of writing sprints from the screenwriter John August.&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-embed-card&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Let&#39;s do a &lt;a href=&quot;https://twitter.com/hashtag/writingsprint?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#writingsprint&lt;/a&gt; at the top of the hour. 60 minutes, one task, no stopping. I got an action sequence to write. They&#39;re the worst.&lt;/p&gt;— John August (@johnaugust) &lt;a href=&quot;https://twitter.com/johnaugust/status/633379986708107264?ref_src=twsrc%5Etfw&quot;&gt;August 17, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/figure&gt;
&lt;p&gt;He was not the first to implement this idea, but he was the highest-profile person I knew of (through Twitter) doing it consistently. It also happened to coincide with the time when I was starting my MFA in Creative Writing.&lt;/p&gt;
&lt;p&gt;Like many things requiring discipline, writing becomes easier when you do it in short bursts. When you know there is an ending point approaching on the horizon, keeping yourself focused is not as difficult as if you sat down for an open-ended writing session. Not everyone can be Hemmingway, &lt;a href=&quot;https://prowritingaid.com/art/652/Why-You-Should-Limit-Your-Writing-Hours.aspx&quot;&gt;locked away writing for 5-6 hours a day&lt;/a&gt;. Give yourself a shorter sprint, and you&#39;re more likely to actually progress your writing.&lt;/p&gt;
&lt;p&gt;Starting a writing sprint is easy. Decide how long you want to write for, set a timer, and go. But what if you want more than that? What if you want to track your progress, track how often you are conducting your sprints, and what if you want to share the results?&lt;/p&gt;
&lt;p&gt;I built &lt;a href=&quot;https://getwritesprint.com/&quot;&gt;Write/Sprint&lt;/a&gt; to handle these things. Nothing more, nothing less. Like my writing, I kept Write/Sprint minimal. This tends to resonate with writers. Austin Wiggins, an early user who runs a writing group said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;ve been looking for an app like it, to be honest. But a lot of the other apps in similar style have a bunch of bells and whistles that I just didn&#39;t need&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I tried to avoid the bells and whistles because it is in my nature to avoid them, but also because I am new to developing iOS apps. Anything I could avoid, I did avoid. Fortunately, that made for a better product.&lt;/p&gt;
&lt;p&gt;Write/Sprint allows you to set a timer, then it fires off an alert when that timer is up. You can then enter your word count to see how much you did during your sprint. And, you can even share the results.&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://polluterofminds.com/blog/images/timer.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; width=&quot;400&quot; height=&quot;800&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Writing sprints have helped me significantly with staying disciplined with my writing, and I think they can help you too. If you do decide to start a writing sprint, especially if you choose to use my app, tag me on &lt;a href=&quot;https://twitter.com/polluterofminds&quot;&gt;Twitter&lt;/a&gt;. I want to hear about it!&lt;/p&gt;
&lt;p&gt;—&lt;/p&gt;
&lt;p&gt;**&lt;a href=&quot;https://getwritesprint.com/&quot;&gt;Write/Sprint&lt;/a&gt; is available for iOS on the App Store today for just $0.99. **&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>I Bought a SaaS App</title>
    <link href="https://polluterofminds.com/blog/i-bought-a-saas-app/"/>
    <updated>2021-07-01T12:47:25Z</updated>
    <id>https://polluterofminds.com/blog/i-bought-a-saas-app/</id>
    <content type="html">&lt;p&gt;I&#39;ve been thinking about buying a small SaaS application for a long time now. The idea is attractive because my time is valuable, and coding an application from scratch can often be a cost with no return. By purchasing an app, I can potentially save on the cost of development (my time) and avoid loss without the app ever making money (tax write-off).&lt;/p&gt;
&lt;p&gt;So, for the last few months, I&#39;ve been watching Twitter, reading IndieHackers, and generally just keeping an eye out for an app that makes sense. What was I looking for exactly? What were the criteria?&lt;/p&gt;
&lt;p&gt;I really didn&#39;t know. At least, not until I found it.&lt;/p&gt;
&lt;p&gt;I knew at my price range (the seller and I agreed not to disclose the price, but understand that I am not rich, and my ability to acquire apps or businesses is quite limited) would not allow me to purchase a revenue-positive application. So, what did that leave me with?&lt;/p&gt;
&lt;p&gt;I could buy an app that had a mailing list. That&#39;s valuable. But it&#39;s not terribly exciting to me. And people now recognize the value of lists. So even if the app is shit, an app with a large list is going to command a large sum. I could buy an app with a decent, free user base. But even that was going to be pricey.&lt;/p&gt;
&lt;p&gt;What I eventually landed on were the following criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clean code&lt;/li&gt;
&lt;li&gt;Fast load times&lt;/li&gt;
&lt;li&gt;Utility&lt;/li&gt;
&lt;li&gt;Potential for monetization&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;p&gt;Now, I needed to figure out how I&#39;d be able to determine if the first criterion was met. How could I know if the code was clean when most of the apps that might be willing to sell were closed-source? To me, the answer was simple. Look at who built it.&lt;/p&gt;
&lt;p&gt;Since this was the first criterion, it drove my research. I would search side project flipping sites, small acquisition sites, and other places. If I found something interesting, I&#39;d research the founder and developers as best I could. This led me to an app that seemed to meet all of the criteria.&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://polluterofminds.com/blog/images/CleanShot-2021-06-30-at-07.45.34.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; width=&quot;1021&quot; height=&quot;367&quot; sizes=&quot;(min-width: 720px) 720px&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Muell Post was a disposable email service. Need a quick email address, but nothing permanent, Muell Post could help you out. When I found Muell Post, I was impressed with how simple it was but how effective it was. The app was fast and it did exactly what it said it would do.&lt;/p&gt;
&lt;p&gt;Better yet, &lt;a href=&quot;https://medium.com/@lukas.klein/how-i-built-a-disposable-email-service-in-two-hours-7dd942d96d78&quot;&gt;the developer wrote about how he built it&lt;/a&gt;. The app had been around for a while, it was created by a guy who clearly knew what he was doing, and I had this technical background into how it was built. I could also immediately see potential in how the app could be monetized.&lt;/p&gt;
&lt;h3&gt;How The Purchase Happened&lt;/h3&gt;
&lt;p&gt;Once I felt comfortable with this app being the one I tried to purchase, I had to figure out how to go about it. The app surely could have been purchased on marketplace sites like Tiny Acquisition or Flippa, but I did not clearly understand the due diligence process when using those sites. I&#39;m sure there is something built-in, but I didn&#39;t even explore the idea of buying the app on any marketplace site because I didn&#39;t know for sure.&lt;/p&gt;
&lt;p&gt;Instead, I do what I normally do. I took to Twitter.&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://polluterofminds.com/blog/images/CleanShot-2021-06-30-at-06.52.32@2x.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; width=&quot;1186&quot; height=&quot;908&quot; sizes=&quot;(min-width: 720px) 720px&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;A quick note on this for any acquisition marketplace site: For buyers, it is crucial to understand what the process is. An offer is not the first thing a buyer wants to do when exploring a purchase. This is why I didn&#39;t use Tiny Acquisition.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While I waited for Lukas to respond, I researched him a little more and felt increasingly comfortable that the app was going to be solid. Lukas is the founder of &lt;a href=&quot;https://datacake.co/&quot;&gt;Datacake&lt;/a&gt;, an IoT company. He knows what he&#39;s doing. He was quick to respond to my first message and provided some numbers.&lt;/p&gt;
&lt;p&gt;Within a day, I made an offer, he accepted, and we planned out the acquisition process. All over Twitter dms. The internet is a magical place.&lt;/p&gt;
&lt;p&gt;We agreed that he would take the weekend to get everything documented around the codebase and services the app used and I would put together a Software Acquisition Agreement. I didn&#39;t want to get too fancy with the agreement, and luckily &lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/1684508/000168450816000003/softwareacquisitionagreement.htm&quot;&gt;I found a template from past acquisitions&lt;/a&gt; on the SEC&#39;s (Security Exchange Commiission) website. I modified the template, sent it to Lukas, and by Monday, Lukas had the agreement in-hand (or on-screen to be more accurate).&lt;/p&gt;
&lt;p&gt;He signed the agreement, sent it back, and got the code to me. With that, I started the transfer process. We kept it simple. A wire transfer from my bank to his. The transfer was quicker than we both expected, and he had the funds in his account by the end of the day.&lt;/p&gt;
&lt;h3&gt;Transfering Ownership&lt;/h3&gt;
&lt;p&gt;I wasn&#39;t sure what to expect with the transfer of the app. I had a suspicion that I would change the domain and the name of the app, but I wanted to own the original domain just in case. It turned out that wasn&#39;t a problem at all. Lukas transferred the domain without issue.&lt;/p&gt;
&lt;p&gt;The next hurdle was figuring out how to transfer the existing services. That was not as easy. An easier solution was to stand up these services under my own account and transfer the data accordingly. This process took me a total of 30 minutes because Lukas had so thoroughly documented everything. Big props to him for that.&lt;/p&gt;
&lt;p&gt;On the same day that the sale happened, I was able to get the app up and running. That&#39;s pretty impressive, and it&#39;s exactly why I was exploring a small SaaS app acquisition. Instant gratification.&lt;/p&gt;
&lt;h3&gt;What&#39;s Next?&lt;/h3&gt;
&lt;p&gt;I see a ton of potential in the app. &lt;a href=&quot;https://www.mailr.cc/&quot;&gt;I&#39;ve already ported it over to a new domain and renamed it&lt;/a&gt;. The old domain also now forwards to the new domain. Right now, the app is nothing more than a free burner email address.&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://polluterofminds.com/blog/images/CleanShot-2021-06-30-at-07.46.28.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; width=&quot;992&quot; height=&quot;430&quot; sizes=&quot;(min-width: 720px) 720px&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;However, I think there are some paths to explore for turning this into a business:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paid API Access - Developers often need to create accounts for their apps during testing. API access would allow this process to be included in the testing scripts.&lt;/li&gt;
&lt;li&gt;OpenAI Integration - Not sure what this would look like, but I have access to OpenAI and I want to make use of it somewhere.&lt;/li&gt;
&lt;li&gt;Custom Domains - With very few tweaks, this can turn into an email forwarding and email client service that uses your own custom domains.&lt;/li&gt;
&lt;li&gt;Something else?&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;p&gt;If you have an idea about how this can be monetized, I&#39;d love to hear it. You can always drop me a note at justin [at] this site URL.&lt;/p&gt;
&lt;p&gt;I very much enjoy writing software and building apps, but this was such a fun experience. I don&#39;t think you have to be the original author of the code to enjoy using and improving it—hell, that&#39;s what software engineers working for companies in their day jobs do all day, right? I think acquiring small projects, if done right, can be a nice hobby. And if lucky, it can make me some money.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>You Shouldn&#39;t Talk To Customers</title>
    <link href="https://polluterofminds.com/blog/how-to-talk-to-customers/"/>
    <updated>2021-06-29T10:31:34Z</updated>
    <id>https://polluterofminds.com/blog/how-to-talk-to-customers/</id>
    <content type="html">&lt;p&gt;I often get asked how to talk to customers. This question comes from engineers, product people, new founders, and others. I get this question because I have started &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;https://simpleid.xyz/&quot;&gt;companies&lt;/a&gt; in the past and I&#39;ve written about the power of talking and asking questions of the very people we hope to serve and sell to. But the immediate problem I see with most of the questions I get is in the initial framing of the question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do I talk to customers?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You don&#39;t. You should never be talking to customers or prospects. You should be talking &lt;strong&gt;&lt;em&gt;with&lt;/em&gt;&lt;/strong&gt; them. What&#39;s the difference?&lt;/p&gt;
&lt;p&gt;When you talk to someone, you are driving the conversation. You are conveying your thoughts, sharing your ideas, inundating the recipient with your biases. This is a great thing for conference talks and conversations at the bar. However, it&#39;s a terrible thing when trying to learn about the problems of a customer base you are hoping to tap into.&lt;/p&gt;
&lt;p&gt;By talking &lt;em&gt;to&lt;/em&gt; customers, you ultimately lead them without recognizing it. Rob Fitzpatrick wrote in &lt;a href=&quot;http://momtestbook.com/&quot;&gt;The Mom Test&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Talk about their life instead of your idea Ask about specifics in the past instead of generics or opinions about the future. Talk less and listen more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you find yourself talking more than the person you are supposed to be talking with, you&#39;re in trouble. Rob calls this pitching. I call it not listening.&lt;/p&gt;
&lt;p&gt;But knowing that you shouldn&#39;t be talking *to *customers (or better put—potential customers) doesn&#39;t make it any easier to understand how to talk *with *them. I&#39;ve put together a simple framework that has served me well and might work for you too.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Think about the things the person you&#39;re going to talk with needs to accomplish in a day. This is often referred to as &lt;strong&gt;jobs to be done&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Have a standardized list of questions ready for every discussion and every potential customer. These questions absolutely must be open-ended. They also cannot be leading. What does that look like in practice? Here&#39;s an example: &amp;quot;What was the last software product you used, and why did you use it?&amp;quot; This question is awesome because it can hint at so many things, but it also parlays nicely into point 3 in this framework…&lt;/li&gt;
&lt;li&gt;Listen and follow up. A good question can turn pointless if you don&#39;t follow up on the person&#39;s response. If a potential custom tells you they last used Instagram because they were trying to find some design inspiration from designers they follow, it&#39;d be reasonable to follow up with a question about why they were doing this. We&#39;re not looking for the old corporate &lt;a href=&quot;https://www.mindtools.com/pages/article/newTMC_5W.htm&quot;&gt;Five Whys&lt;/a&gt;, but you do want to dig for more information.&lt;/li&gt;
&lt;li&gt;Close with an ask. The ask can be as simple as requesting another person the interviewee might know that you should talk with. It can be a request to send a demo to them. It can be anything. But closing with an ask creates commitment. This is important because the person you&#39;ve spoken with, should they agree to your ask, is now connected to you in a way that is more meaningful than interviewee/interviewer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With your framework in place, you may think the next part is the hard part: finding people to talk with. Founders are busy. Marketers are busy. Your potential customers are busy. Right?&lt;/p&gt;
&lt;p&gt;My experience has shown me that people are not nearly as busy as we fear they are. Sure, &lt;a href=&quot;https://poluterofminds.com/help-others-and-dont-be-a-time-cop/&quot;&gt;there are people who protect their time&lt;/a&gt; with almost evangelical fervor, but for the most part, people are social creatures who like to talk about themselves. When you&#39;re not selling something, you&#39;re immediately positioning yourself better than most other people these potential customers interact with. That puts people at ease and makes them more likely to say &amp;quot;yes&amp;quot; to your request.&lt;/p&gt;
&lt;p&gt;So the answer to how do I get people to talk with me is: Ask them.&lt;/p&gt;
&lt;p&gt;I like to use cold email, Twitter, and LinkedIn. But you should use whatever works. Reach out, be genuine, don&#39;t sell. Once you&#39;ve received a &amp;quot;yes&amp;quot;, schedule the call. Don&#39;t waste your time or theirs with back-and-forth emails. Schedule the meeting, then move on to finding more people to talk with.&lt;/p&gt;
&lt;p&gt;Remember, talking to people is your mistake. Once you&#39;ve figured out how you&#39;re going to talk *with *them, it should become increasingly easy to make connections, get meetings booked, and finally learn from real-world potential users.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Audience Building Has Broken Blogging</title>
    <link href="https://polluterofminds.com/blog/audience-building-has-broken-blogging/"/>
    <updated>2021-06-01T01:43:47Z</updated>
    <id>https://polluterofminds.com/blog/audience-building-has-broken-blogging/</id>
    <content type="html">&lt;p&gt;You&#39;ll notice that this post does not require you to subscribe to my site. It doesn&#39;t cost you any money. There are no ads, and it will not generate any revenue for me.&lt;/p&gt;
&lt;p&gt;And that&#39;s perfectly fine.&lt;/p&gt;
&lt;p&gt;I have gone back and forth way too much with making my posts for subscribers only or for everyone (and even once for paying members—who the hell did I think I was?!). I want to be closer to the people who read my writing. &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt; doesn&#39;t offer that. Twitter is not the right format. &lt;a href=&quot;https://substack.com/&quot;&gt;Substack&lt;/a&gt; is close, but it&#39;s not as open as they want you to believe. So, I&#39;ve toyed around with making my blog posts available for subscribers only. I&#39;ve turned the &amp;quot;members only&amp;quot; flag on and off so many times that I&#39;ve lost count.&lt;/p&gt;
&lt;p&gt;Today, I&#39;m switching all of my posts to public. A community is not built with walls. It&#39;s built by trust. It&#39;s built by shared interests. I do hope you will subscribe to my blog. But I&#39;m not going to force it. That&#39;s both disingenuous and counter-effective.&lt;/p&gt;
&lt;p&gt;The first time I ever blogged, it was on Blogger. Or Blogspot. Or whatever the appropriate name was at the time. It was easy, it was mine. I didn&#39;t need subscribers, I just needed an outlet. Over time, the tools got better. WordPress quickly became the de facto solution for a self-hosted site. With all the plugins and extra features, I could have set up an email wall. I could have hidden my blog away to only the few who were willing to pay me in bytes representing an email address. But I didn&#39;t. Then, Medium came along. It was amazing. The writing experience was incredible. It was exclusive. They were only letting a few people in at a time, and &lt;a href=&quot;https://medium.com/@the5_5hole/college-is-nothing-more-than-a-small-business-loan-74ca53be0588&quot;&gt;I happened to get early access somehow&lt;/a&gt;. But even then, there were no subscriber requirements. It may not have been published on a site I owned, but it was my writing, and it was open. Shortly after I discovered Medium, an upstart called Ghost burst onto the scene. It promised all the ownership of WordPress with a writing experience as good or better than Medium. I jumped ship, and I have mostly been writing on Ghost ever since.&lt;/p&gt;
&lt;p&gt;But then, the creator economy happened.&lt;/p&gt;
&lt;p&gt;And this isn&#39;t a bad thing. Honestly, it&#39;s not. I love the creator economy. I am part of the creator economy. But it resulted in trends and confusion to which I have fallen prey. Substack gave rise to a new path to getting paid as a creator. Something I fully support. I have written for free for far too many companies to ever suggest that your work is worthless. Get yours while you can get it.&lt;/p&gt;
&lt;p&gt;BUT.&lt;/p&gt;
&lt;p&gt;Substack has confused people. It has confused people into misappropriating content. A blog does not need a subscriber wall. A newsletter does. The difference is a blurred line. But if you step back far enough, that line comes into focus.&lt;/p&gt;
&lt;p&gt;A newsletter is infrequent. It is intentional. A blog is frequent, and it is spontaneous. Writing is now called &amp;quot;content&amp;quot;, so I can see how the argument of spontaneity in blogging could be thrown out the window, but my definition holds. True blogging is the result of an emotion transcribed into words. As is the case with this post. Such writing should not be withheld for the simple fact that it may be shit. Emotions are messy. They are ugly and free-flowing. They are good and bad. They are both worth your time and a complete waste of time.&lt;/p&gt;
&lt;p&gt;They are the antithesis of a product.&lt;/p&gt;
&lt;p&gt;Newsletters on the other hand are &amp;quot;always-on&amp;quot;. They are productized words. They are worthy of email address walls and even some paywalls. They are carefully crafted, revised, and vetted. Every line of a newsletter serves a purpose not built on emotion but built on solutions. What solutions? That depends on the person and the newsletter. It could be as simple as an alternative to traditional news. It could be a guide on sewing. It could be jokes that make you laugh every Sunday morning when you read them. No matter the solution, newsletters seek problems.&lt;/p&gt;
&lt;p&gt;Blogging seeks nothing more than release. And that release may be consistent enough to warrant someone&#39;s email address. It may warrant the build-up of an audience. But, in many cases, it is simply a creative person&#39;s brain dump.&lt;/p&gt;
&lt;p&gt;This is my brain dump. This is my (hopeful) declaration that my posts on this site will not be placed behind a wall. It is also my hope that you might still be willing to subscribe. And there lies the true question. Why do I care?&lt;/p&gt;
&lt;p&gt;I have never emailed anyone on a list tied to my blog about a product I&#39;m building. I&#39;ve never asked them to buy anything. I do sometimes send my posts to subscribers directly, but not always. So why then do I even care if you give me your email address?&lt;/p&gt;
&lt;p&gt;It&#39;s a connection. It&#39;s the shared state of enjoyment and creation. Should I ever feel as if something I create is worthy of an email to the list, it&#39;s there. It&#39;s like the blanket my son carried around when he was small. He didn&#39;t really need it, but he liked knowing it was there. And maybe, just maybe, there would be a day when he really did need it. Having that comfort and connection is important.&lt;/p&gt;
&lt;p&gt;But not at the expense of being able to get my words out freely.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Write Shitty Code</title>
    <link href="https://polluterofminds.com/blog/write-shitty-code/"/>
    <updated>2021-05-01T13:59:45Z</updated>
    <id>https://polluterofminds.com/blog/write-shitty-code/</id>
    <content type="html">&lt;p&gt;When I was in seventh grade, way back in 1996, I took my first computers class. I don&#39;t remember much of what we learned in the class except that I got my first taste of HTML. I got my first taste of &amp;quot;view source&amp;quot;. I got my first look at how one could make a web page look like anything they wanted. For me, that meant literally copying the Yahoo! home page and changing the background color while also changing the logo to Justin!&lt;/p&gt;
&lt;p&gt;If you don&#39;t remember what Yahoo! looked like back in &#39;96 (and what most of the web looked like back then), here&#39;s a snapshot:&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--mQW6Pw5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/46dv24hcvjr4nyzyko4g.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;I didn&#39;t do anything groundbreaking with my copy and paste &amp;quot;fork&amp;quot; of Yahoo!&#39;s source, but I did catch the bug. I have loved computers and technology ever since. In college, while bouncing from major to major before eventually failing out, I took a web design class. What I didn&#39;t realize at the time was that designing websites using Dreamweaver (the software we used in the class) was not exactly coding. What I also didn&#39;t realize is how far ahead of its time products like Dreamweaver were. WYSIWYG editors didn&#39;t really tickle me the way editing Yahoo!&#39;s source code did years earlier, and the class did not focus on the code editor portion of Dreamweaver. So, my coding adventure came to an end in that class.&lt;/p&gt;
&lt;p&gt;For a while at least.&lt;/p&gt;
&lt;p&gt;In the intervening 15+ years, I tried many times to pick up coding. I learned HTML and CSS first, of course. I enjoyed that, but I wanted to make web pages DO things. So, I took a stab at JavaScript. I tried to learn through books at first, knowing that without the fundamentals I&#39;d be doomed to failure. But learning to work on the web from a book often meant the content was quickly out of date. Unless the author published updates, the web just moves so fast it was hard to be sure the techniques in the book were still applicable. So, I transitioned to YouTube videos. I got further, but I was stuck in this rut where the fundamentals were incredibly boring without some form of practical application. Sure, a variable is cool and all, but how the hell do I use it to make my website do X? A for loop seems awesome, but when do I get to make it do something other than count?&lt;/p&gt;
&lt;p&gt;I&#39;m sure I&#39;m not alone in these feelings. I suspect many new developers who take a non-traditional path end up feeling just as frustrated and bored by the traditional way of learning as I did. I even tried online coding schools like &lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt; and &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codeacademy&lt;/a&gt;. Both are fantastic programs that have evolved a ton since I tried them, but at the time, I was still bored and unable to get over the hump of learning the fundamentals.&lt;/p&gt;
&lt;p&gt;Fast forward a few more years, and I&#39;ve now been working in non-development jobs for over a decade. I also discovered that in addition to loving the web, I loved writing. Where I had trouble picking up the fundamentals of development, I had no such issue with the fundamentals of writing (creative writing, to be exact). In enrolled in an MFA program in Creative Writing and wrote countless stories and even a couple novels. All of that writing was stored in Google Docs. I loved the convenience of the technology when compared to the antiquated patterns my classmates followed. Save to Word. Email copy to themselves. Fetch email and download document. Work on Word on another machine. There was no way I was ever going back to that model. So Google Docs worked for me.&lt;/p&gt;
&lt;p&gt;Until it didn&#39;t.&lt;/p&gt;
&lt;p&gt;I had been developing a suspicion of big tech companies like Google for a long time by that point. But it wasn&#39;t until I was just about done with my MFA program that I realized I had literally handed over control of my most important writing. I wanted to believe I was in control of those files. Google tells me I am, right? But the truth is, Google could lock me out anytime they wanted. They could tell me I had violated their Terms of Service, and they were under no obligation to tell me specifically how I violated them, and they were under no obligation to provide me any sort of hearing or arbitration process. If that happened, I would have lost everything.&lt;/p&gt;
&lt;p&gt;This realization came to me not long before &lt;a href=&quot;https://www.valuewalk.com/2017/10/locked-out-of-google-docs/&quot;&gt;some journalists (and others) had been accidentally locked out of the Google accounts and could not access their work&lt;/a&gt;. It wasn&#39;t my imagination. Google had too much control over my writing.&lt;/p&gt;
&lt;p&gt;I decided to find an alternative to Google Docs that allowed me to own my writing for real this time. I needed to know that no matter what I&#39;d have access. However, no such product existed. None that I could find, at least. So, I had two options. I could go back to using Microsoft Word and store my writing on my computer, inaccessible to any other device I worked on. Or, I could build my own writing app, just for me.&lt;/p&gt;
&lt;p&gt;As I think you&#39;ve probably gathered by now, I chose the second option.&lt;/p&gt;
&lt;p&gt;Even though I had little experience in anything but HTML and CSS, I dove in. I knew I&#39;d write the app in JavaScript, so I started looking for simple JavaScript web app tutorials. I built a few tiny apps through reading blog posts and coding sites. I still didn&#39;t understand everything I was doing, but I was OK with that. I might not have understood what I was doing, but I was seeing tangible results. The next step was diving into something that would allow me to build the app I wanted to build.&lt;/p&gt;
&lt;p&gt;There are many options available for learning to code. I talked about a few earlier, but when it came time to build a functioning application, I chose &lt;a href=&quot;http://udemy.com/&quot;&gt;Udemy&lt;/a&gt;. Udemy has an incredible library of courses that help you learn the fundamentals, learn advanced concepts, and learn everything in between. I settled on a React course (even though I didn&#39;t know all the fundamentals of vanilla JavaScript yet), and I got to work.&lt;/p&gt;
&lt;p&gt;I built a functioning, full-stack &lt;a href=&quot;https://codebriefly.com/difference-between-full-mean-and-mern-stack-development/&quot;&gt;MERN&lt;/a&gt; app. Then I built another one. Finally, I went through the course again, much more confident in my ability to understand the core concepts, and I built my app along the way rather than build the course&#39;s app.&lt;/p&gt;
&lt;p&gt;By the end, I had the first functioning version of &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get there, I had to extend what I was learning in the course. I had to take concepts from the course, dive deeper into them, and apply them into the app I was building. That meant, Stackoverflow, Google, blog posts, etc. All in addition to the course itself. That meant writing &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=spaghetti%20code&quot;&gt;spaghetti code&lt;/a&gt; just to get to the point of the app basically working. And guess what? I shipped that spaghetti code.&lt;/p&gt;
&lt;p&gt;The app was never supposed to be for the public. It was supposed to be for me alone. But people close to me encouraged me to put it out there, and I did. I shipped it with bugs. I shipped it with most of the code written in a single JavaScript file. I shipped it with very little understanding of how single page apps worked, how React worked, and how JavaScript worked. In short, I shipped shitty code.&lt;/p&gt;
&lt;p&gt;But, and this a big point to take away from this entire article, I never would have shipped the app at all and probably would have given up if I had waited until I understood everything perfectly. If I had waited until I wrote beautiful, reusable code, I wouldn&#39;t have an app with thousands of users. I wouldn&#39;t even have an app with me as a user. Had I waited and tried to really nail down every tiny fundamental detail, I would have quit.&lt;/p&gt;
&lt;p&gt;And if I quit, I never would have learned those fundamentals.&lt;/p&gt;
&lt;p&gt;See, after I shipped my app, I kept learning. I had a product out in the world, and I wanted it to get better. So I kept taking courses, kept reading, kept refactoring. I&#39;ve rewrote Graphite in its entirety at least four times, and that doesn&#39;t count minor refactoring. Is that a tenable way to build apps for a product company? No. Is that a wonderful way to finally get over the coding hurdle, ship an app, and learn? Hell yeah, it is.&lt;/p&gt;
&lt;p&gt;Fundamentals are important, but I&#39;m convinced that if you are hitting a wall in your coding journey you should just ship something. Take a course that gets you from point A to B. Ship an app. Learn to improve it after you&#39;ve built it. For many people, learning the basics without a tangible application of those basics is fine. But for those that struggle like I did, it&#39;s OK to build without understanding the fundamentals. It&#39;s OK to use a JavaScript framework before learning how everything in plain old JavaScript works. You have permission to do whatever the fuck you need to do to get over the hump.&lt;/p&gt;
&lt;p&gt;But getting over the hump means continuing to learn. Write shitty code, but keep getting better.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Your Niche Idea Probably Isn&#39;t Niche Enough</title>
    <link href="https://polluterofminds.com/blog/your-niche-idea-probably-isnt-niche-enough/"/>
    <updated>2021-04-29T15:16:20Z</updated>
    <id>https://polluterofminds.com/blog/your-niche-idea-probably-isnt-niche-enough/</id>
    <content type="html">&lt;p&gt;When I built &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite Docs&lt;/a&gt;, I was serving a very tiny niche—me. It had to meet my demands. That’s it. But when I turned it into a product, the “me” niche didn’t work. So, I knew I needed something that would appeal to a market broader than myself but was still niche enough for me to build.&lt;/p&gt;
&lt;p&gt;I chose the privacy space. I thought, hey people like privacy, and if they like privacy, they might be willing to pay for a writing and collaboration app that preserves their privacy. I redesigned my site, added case studies for various verticals that might need a privacy-preserving document platform (journalism, medical, law, etc), and I re-launched. But there was a problem.&lt;/p&gt;
&lt;p&gt;Even as I was building this, my good friend &lt;a href=&quot;https://twitter.com/adamisrusty&quot;&gt;Adam&lt;/a&gt; told me I needed to pick one vertical and serve them well first. He said I shouldn’t be building for journalists and lawyers and doctors and NGOs and schools. I pushed back and told him I had niched down considerably by choosing the privacy community versus the broader writing community. He relented after a while, but guess what?&lt;/p&gt;
&lt;p&gt;He was right.&lt;/p&gt;
&lt;p&gt;Graphite ultimately failed. Had I chosen a single vertical within the privacy space, I may have had a better shot at success. I also wouldn’t have suffered from the significant scope creep I saw happening but felt powerless to stop.&lt;/p&gt;
&lt;p&gt;My next company was one I co-founded with two others. It was focused on the blockchain space. Niche enough, we thought. Niche enough to get us into a startup accelerator. However, as we began doing customer research, the needs and scope of supporting “blockchain” in general would have been monumental.&lt;/p&gt;
&lt;p&gt;While we had thought we found a small niche, we needed to niche down further. We eventually chose to focus on the Ethereum blockchain community. This was a good choice and has helped the company continue (even after I left).&lt;/p&gt;
&lt;p&gt;My current project, &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt;, has suffered the niche problem as well. I built it based on my experience as a writer. When I got my MFA, the feedback and critique process was disjointed. So, Perligo set out to solve that for writers.&lt;/p&gt;
&lt;p&gt;But wait. What types of writers? You guessed it. I launched trying to support all different kinds of writers—fiction, poetry, non-fiction, comics, etc. Writers as a market is a niche, but not defining the subset of writers to support meant that I would be building features that ranged from critique group support to automated editing support and analytics.&lt;/p&gt;
&lt;p&gt;Fortunately, with Perligo, I knew I was breaking the rules I’d learned during the launches and subsequent lifecycles of my other products. I knew that I was taking a shot in the dark with too wide a net. I did this intentionally with the plan that if it didn’t work (and it probably wouldn’t), I would niche down.&lt;/p&gt;
&lt;p&gt;I’m in the research process of doing that now, but it’s kind of nice to have yet another example of how niches are often so loosely defined that we don’t recognize when they are not actually niche enough. If you feel like you’ve found your niche, ask yourself if there is a subset of that niche market you could serve even better if you focused in on them. Doing so will help your product be more targeted and, hopefully, easier to adopt.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;I’ve gone back and forth on whether my writing should be member-only or freely available or a combination of both. This post is freely available, but most of my writing is (free) membership only. I’d love it if you became a member and subscribed for updates, and I promise there’s something in it for you. You’ll get dedicated content only available to members. Click the button below to subscribe.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Your App Might Not be a Business</title>
    <link href="https://polluterofminds.com/blog/your-app-might-not-be-a-business/"/>
    <updated>2021-04-23T13:53:18Z</updated>
    <id>https://polluterofminds.com/blog/your-app-might-not-be-a-business/</id>
    <content type="html">&lt;p&gt;I have tricked myself many times. Forced things I didn&#39;t need to force. Let my mind wander from hobby to company too easily. And I bet you have too. The danger of conflating apps or fun projects with businesses is strong, and the only way to escape that danger is to charge money if you think you&#39;re building a business.&lt;/p&gt;
&lt;p&gt;Getting people to use your app is hard, but the simple existence of a user base does not mean you have a business. When I launched Graphite Docs, I had no intentions of it being a business. In fact, &lt;a href=&quot;https://www.indiehackers.com/interview/how-taking-back-my-privacy-inspired-a-product-that-became-a-business-bd931dfc1d&quot;&gt;I never even meant for it to be an app that the public used&lt;/a&gt;. However, when I decided it was a viable business opportunity, I made the mistake of continuing to let people sign up for free. I didn&#39;t even introduce a paid plan until more than a year after the launch. How&#39;d that work out?&lt;/p&gt;
&lt;p&gt;Despite having tens of thousands of users, Graphite was never a business. I received grant money during the build process, but because I never made money from my customers, it didn&#39;t become a business. &lt;a href=&quot;https://www.failory.com/interview/graphite-docs&quot;&gt;There were a lot of mistakes over the course of Graphite&#39;s three years&lt;/a&gt;, and not charing for the product earlier was one of those mistakes. Had I charged earlier, I could have potentially avoided the problem of &lt;a href=&quot;https://polluterofminds.com/blog/your-app-might-not-be-a-business/__GHOST_URL__/the-traps-youll-fall-into-when-validating-a-market/&quot;&gt;incorrectly assuming I had validated the product and had market fit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you think your app is a business (and it&#39;s ok to have an app NOT be a business), then you need to charge for it. And charge for it early. I almost repeated the mistakes of Graphite with my new side project, &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt;. I launched with a paid plan AND a free plan. This makes sense for many apps, but for a side project for which I want to test the business validity, I need to know very soon how viable things are. Having a free plan extends the runway of time before you learn if people are willing to pay for your solution.&lt;/p&gt;
&lt;p&gt;So, last night I sent an email to all Perligo users and subscribers letting them know the free plan would be eliminated on Monday. Existing users on the free plan would get to keep that plan (and its terms) forever, but everyone else going forward would not have a free plan option. This type of decision surely limits the access you have to gaining new (free) users, but capturing free users is only important if you are trying to impress venture capitalists. If you are trying to make money from your businesses, no matter how big or small they are, you need paying users, not free users.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Your Launch Doesn&#39;t Define Your Product</title>
    <link href="https://polluterofminds.com/blog/your-launch-doesnt-define-your-product/"/>
    <updated>2021-04-11T14:39:58Z</updated>
    <id>https://polluterofminds.com/blog/your-launch-doesnt-define-your-product/</id>
    <content type="html">&lt;p&gt;I&#39;ve now launched 11 products on Product Hunt. Of those launches, only one of them got real traction. &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt; blew up when it was launched. It was my first product and it was one of the few products submitted to Product Hunt where I was not the submitter (there could be some algorithmic preference to products posted by random people and not the makers).&lt;/p&gt;
&lt;p&gt;My most recent product launch came this past week. &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt; never even cracked the fold. The thing is, the launch matters, but not that much. In fact, I launched Perligo knowing full-well that after my alpha and beta period there were still a lot of problems. During testing, users did not validate the product as is, but gave me the feedback I needed to push it in the right direction. Still, I launched.&lt;/p&gt;
&lt;p&gt;Not launching is the easy thing, but it becomes contagious. You don&#39;t launch because you&#39;re worried you need to fix X. Well, you fix X and then you get some feedback on Y. So you still don&#39;t launch. Eventually, you look back and realize you&#39;ve been building the app for two years or more and have not launched.&lt;/p&gt;
&lt;p&gt;That&#39;s why it&#39;s important to me to just get products out there. The app, in its current state, works really well. However, it serves a very niche audience. I learned what I need to do to expand its reach into something more viable, but I didn&#39;t want to wait to implement those changes.&lt;/p&gt;
&lt;p&gt;So I launched, and it flopped. So what? I still have to build. I still have to hustle. I still have to sell. All of that would have been true whether I had a huge launch or not.&lt;/p&gt;
&lt;p&gt;Don&#39;t let your launch define your product. You define your product. Your users define your product.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Make Small Apps</title>
    <link href="https://polluterofminds.com/blog/make-small-apps/"/>
    <updated>2021-03-19T17:31:58Z</updated>
    <id>https://polluterofminds.com/blog/make-small-apps/</id>
    <content type="html">&lt;p&gt;I’m finding myself more and more attracted to the idea of building small apps as a solo dev.&lt;/p&gt;
&lt;p&gt;I work full time for a company I love, but I will always make things on the side. In the past, this has meant building large scale applications, the kinds you would normally expect to find working at a startup. Graphite Docs was my first. It started small, then it grew into a complex, permissioned, encrypted collaboration platform. I then built a blogging platform and a finance app. I’ve built dozens of apps, many of which were probably too large of a scale for a solo dev.&lt;/p&gt;
&lt;p&gt;I’m now building &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt;, and I can see the writing on the wall. If I listen to my backlog, this thing is going to grow to be too big, too complex for me to manage as an indie. I have not yet launched out of alpha, but I am happy with the product now. My former MFA cohort uses the app and is happy with it. So, this means I might just leave it alone, even at the risk of it not being something people will pay for.&lt;/p&gt;
&lt;p&gt;I’ve started working on smaller apps. I have a new one on iOS and macOS coming out soon. I feel like the constraints of small apps are better suited to indies, but the upside is, as you’d expect, much smaller.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Intentionally Breaking All The Rules</title>
    <link href="https://polluterofminds.com/blog/intentionally-breaking-all-the-rules/"/>
    <updated>2021-01-29T15:04:18Z</updated>
    <id>https://polluterofminds.com/blog/intentionally-breaking-all-the-rules/</id>
    <content type="html">&lt;p&gt;There are many variations of this quote attributed to many different people over time, but for the sake of this post, who said it and when doesn’t matter.&lt;/p&gt;
&lt;p&gt;“Learn the rules before you break them.”&lt;/p&gt;
&lt;p&gt;I heard this during my graduate program in Creative Writing. There are rules of writing that many people break without even knowing they are rules. Use of italics in books, use of exclamation points, use of adverbs and even quotations—these are all unwritten (and sometimes written rules) for writers that cover varying specificities. But here’s the cool thing:&lt;/p&gt;
&lt;p&gt;Once you know those rules, you also know when, why, and how to break them.&lt;/p&gt;
&lt;p&gt;The same applies to business. Especially around the concept of validation. It is all but proven that you should not go out and build something without validating it. What does validation look like? It looks like pre-sales, newsletter signups, pre-purchases, an audience. It looks like a bunch of things, but it does not look like a developer building a product before going out and talking to people.&lt;/p&gt;
&lt;p&gt;But guess what? That’s sort of what I’m doing with &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have built apps through proper validation processes. I have conducted interviews that would satisfy The Mom Test. I have validated in a way that Rob Walling would be proud. But I’ve also built products from sheer passion.&lt;/p&gt;
&lt;p&gt;The best representation of this is Graphite Docs. That was not a validated product before I built it. I built it because I wanted to and I wanted it to exist. And sometimes that’s enough. Graphite was enough. It let me quit my day job. It made me a developer.&lt;/p&gt;
&lt;p&gt;And now, I’m following a similar path.&lt;/p&gt;
&lt;p&gt;I know what my experience was in my master’s program. I know what my experience was before that program. Finding groups that could provide good, reliable feedback on my written work was hard. So, I’m building Perligo for that kid who needed a community, for the adult who found his community but needed better tools, and for every other writer out there who wants to get better and wants a group around them to help.&lt;/p&gt;
&lt;p&gt;I’ve learned the rules of building a SaaS business, and in this case, I’m choosing to break them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Ship Pretty, Functional Things</title>
    <link href="https://polluterofminds.com/blog/ship-pretty-functional-things/"/>
    <updated>2021-01-02T15:17:58Z</updated>
    <id>https://polluterofminds.com/blog/ship-pretty-functional-things/</id>
    <content type="html">&lt;p&gt;When &lt;a href=&quot;https://www.businessinsider.com/the-iterate-fast-and-release-often-philosophy-of-entrepreneurship-2009-11&quot;&gt;Reid Hoffman said&lt;/a&gt; that if you’re not embarrassed by the first version of your app, you shipped too late, I think he was referring to features and bugs. Not design and functionality. The app has to function well enough to solve a problem. The design has* to be pretty enough not to turn off users, but the rest is where Hoffman’s quote comes into play. Polishing features, writing costly (in time) integration tests—I know many devs will hate me for this point—and other things prevent you from launching.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*&amp;quot;has&amp;quot; is loosely defined here. There are plenty of examples, including ones pointed out to me on the IndieHackers forum, of products that were ugly and hard to use that worked out just fine. Those stories feel like survivorship bias stories, though. Maybe I&#39;m wrong?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nail the design. Nail the initial functionality. And ship.&lt;/p&gt;
&lt;p&gt;I write this because I’ve noticed that as I focus more on design and UX for my MVPs, I am relying less and less on frameworks and libraries. I’ve found myself writing all my css and styling from scratch. It takes quite a bit longer, but you get a feeling that is unique and not something picked up off the shelf. That, to me, is worth the extra time. And that falls outside of the famous Reid Hoffman quote, in my opinion.&lt;/p&gt;
&lt;p&gt;This is not to say you should dump the frameworks. Bootstrap and other css frameworks can help you get started quickly. Those frameworks all provide a really nice baseline design, so you&#39;ll be able to ship pretty things. That said, I think it&#39;s harder to stand out in a crowded market if you lean too heavily on a framework. And that is where writing my own css and styles comes in here. The market for &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt;, is one that is well-defined. However, it&#39;s defined by products that are ugly and slow. A competitive advantage beyond the functionality is simply providing a better experience. So, I&#39;ve chosen to handle all styling myself. But, by all means, if you are shipping a pretty, functional product, feel free to use frameworks.&lt;/p&gt;
&lt;p&gt;The point is, it&#39;s ok to be embarrassed by your product’s immaturity at launch. It&#39;s ok to be embarrassed by bugs. But don’t be embarrassed by its design and lack of functionality.&lt;/p&gt;
&lt;p&gt;There&#39;s a &lt;a href=&quot;https://blog.asmartbear.com/slc.html&quot;&gt;great post from 2017 by Jason Cohen&lt;/a&gt; about his disdain for MVPs and how we should be building simple, lovable, and complete products. I think that post closely aligns with my thinking here. Jason says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But no customer wants to use an unfinished product that the creators are embarrassed by. Customers want &lt;strong&gt;great&lt;/strong&gt; products they can use &lt;strong&gt;now&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is possible to fund success by shipping ugly, hard-to-use products. But if you can avoid it, you should. Your users will thank you.&lt;/p&gt;
&lt;p&gt;This is what I’m applying as I build &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Progressive Web Apps Will Save The Open Web</title>
    <link href="https://polluterofminds.com/blog/progressive-web-apps-will-save-the-open-web/"/>
    <updated>2020-11-22T14:22:14Z</updated>
    <id>https://polluterofminds.com/blog/progressive-web-apps-will-save-the-open-web/</id>
    <content type="html">&lt;p&gt;Not enough people know about the power of &lt;a href=&quot;https://web.dev/tags/progressive-web-apps/&quot;&gt;Progressive Web Apps&lt;/a&gt; (PWAs). Whenever I bring the concept up with friends (including developer friends), they tend not to understand what the benefits of PWAs are or why any users would ever use a PWA over the traditional web browser they know and love (or maybe hate). My answers to the confusions surrounding PWAs are numerous, but I want to try to use some practical examples to explain why I think PWAs will save the open web even as we see walled gardens raising their walls higher by the day.&lt;/p&gt;
&lt;h2&gt;Case Study in Anti-Competitive Practices&lt;/h2&gt;
&lt;p&gt;You may have heard of the &amp;quot;epic&amp;quot; battle being waged in courts between Epic Games and Apple. If not, the tl;dr is Epic Games no longer wants to pay Apple 30% of the proceeds they receive from players who purchase their in-game currency on iOS devices. Epic released an in-game payment system on iOS that bypassed Apple&#39;s payment system, and, very expectedly, they got banned. They did the same thing on Android devices, and they were subsequently banned on Android too. Epic used the bans as a springboard to file anti-trust lawsuits against both Google and Apple.&lt;/p&gt;
&lt;p&gt;This case study is not about whether you stand with Epic, stand with Apple, or stand in the corner twiddling your thumbs. What it is is an illustration of anti-competitive practices and their impact on the web. Apple is a walled garden. There is no disputing this. It&#39;s a fact paraded around as convenience, as security, as usability. Your iOS device or iPad is not yours in the sense you cannot install whatever you want on it. You can only install what Apple says you can install.&lt;/p&gt;
&lt;p&gt;There is some truth in the protective qualities of a walled garden approach like this. Apple has been known for decades now for its stability and its lack of viruses. Yet, that stability and security comes at a cost. You may not be getting the best deals you can when making payments in-app for the software you use on your phone or iPad. Surely, apps tack on a percentage to whatever they would otherwise charge to help offset the fees Apple extracts. And what about those older Apple devices that are no longer supported by Apple? Those perfectly serviceable iPads lying in the junk heaps or in your junk drawers? In an open ecosystem, in the open web world, a device&#39;s age has no bearing on whether it can be used, on whether new software can be installed.&lt;/p&gt;
&lt;p&gt;So, take sides in the Epic vs. Apple battle if you want, but the point is not about that one particular battle. The point is about the wider problems a closed web (and make no mistake, native apps on phones and tablets are part of the new web) pose to everyday people.&lt;/p&gt;
&lt;h2&gt;How PWAs Can Solve This Problem&lt;/h2&gt;
&lt;p&gt;Progressive Web Apps, at their core, are nothing more than web apps. They are applications you access via a traditional desktop browser or a mobile browser. And yet, PWAs offer something so much more than the traditional experience.&lt;/p&gt;
&lt;p&gt;PWAs offer a place on your phone&#39;s or tablet&#39;s home screen. They offer an opportunity to live among the convenience layer offered by having an app available with just a simple click on your home screen. PWAs also offer the opportunity for apps built for the web to live in your start menu or in your dock on desktops and Macs.&lt;/p&gt;
&lt;p&gt;As exciting as the proposition of a web app being something that can be installed like a native app is, that only scratches the surface of the potential offered by PWAs. APIs that offer near-native app access are powerful and can create an experience that is indistinguishable from native apps. Push notifications, file system access, splash screens, offline support, and more are all available through PWAs just like they are with native apps. Web apps can be distracting if for nothing more than the always-there option to open another tab. With PWAs, you can focus. With a web app that opens like a full-screen, native app, you can focus on the thing you intended to do. This benefits users, but it also benefits the app developers in that their users are less likely to leave quickly.&lt;/p&gt;
&lt;p&gt;The biggest benefit PWAs provide is their circumventive nature. Apple, unless they decide to entirely disregard web standards, cannot prevent PWAs from being installed on user&#39;s home screens. Apple and Google cannot levy 30% taxes on purchases made in these apps. As devices age, they can still continue to be useful with new software obtained outside the App Store and Play Store ecosystems. Competition can be restored.&lt;/p&gt;
&lt;p&gt;To prove my point, I offer you another mini-case study:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Amazon Luna&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Amazon Luna is a still-in-beta streaming video game service. Much like Google Stadia or Nvidia GeForce Now, Luna offers players a nice library of games they can play for a monthly fee. The players do not need to worry so much about their device&#39;s hardware capabilities as these games stream from powerful, remote machines straight to the player&#39;s device or computer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.theverge.com/2020/9/18/20912689/apple-cloud-gaming-streaming-xcloud-stadia-app-store-guidelines-rules&quot;&gt;Apple refuses to allow&lt;/a&gt; streaming gaming services on the App Store without significant concessions from the providers. So, Amazon Luna decided not to even worry about a native iOS or iPadOS app that would have to be submitted for review to the App Store police. Instead, they built their service as a PWA.&lt;/p&gt;
&lt;p&gt;I installed the Amazon Luna PWA on my iPhone and my iPad. The experience of firing it up feels incredible. It feels like I&#39;m launching a traditional native app. And yet, it&#39;s not. It&#39;s free from the shackles of app store regulations.&lt;/p&gt;
&lt;p&gt;Luna is not even the first contender in what I expect to be an onslaught of companies offering PWA experiences so that they, as companies, may have more flexibility in their offerings and so that users have more options available to them. Nvidia GeForce Now, since September, has had the option to install their service as a PWA on mobile devices.&lt;/p&gt;
&lt;p&gt;Streaming gaming services face rules that do not apply to streaming video services, so they may ultimately be the ones that lead the charge in widespread PWA adoption. PWAs are not new, and many big companies, including Google (which is odd considering their ban on Epic), Starbucks, Pinterest, and Twitter support PWAs.&lt;/p&gt;
&lt;h2&gt;The Downsides&lt;/h2&gt;
&lt;p&gt;There is a whole new (and really old) world of opportunity offered by PWAs, but that is not to say they are perfect. PWAs have a lot of power. The APIs get better by the month and that means developers get an increasing amount of access to your device.&lt;/p&gt;
&lt;p&gt;This means the onus of security shifts from app store reviewers to users themselves. This feels like the right tradeoff, but there will surely be malicious actors as PWAs gain popularity, and there will surely be users that fall victim to those actors.&lt;/p&gt;
&lt;p&gt;But the web is a place for sovereignty and choice. Part of that is responsibility. If people are never given the opportunity to learn how to protect themselves, they will always be beholden to others. Perhaps, PWAs offer people the opportunity to take back control and truly learn how to protect themselves.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&#39;m excited about the future PWAs offer. The web, including mobile apps, should be open. It should be competitive. Despite Facebooks and Googles and Apples, the web can remain open, and PWAs will play a role.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Spend $60 to Store a 7mb File - Or Why You Should Write Unit Tests</title>
    <link href="https://polluterofminds.com/blog/how-to-spend-60-dollars-on-a-7-mb-file/"/>
    <updated>2020-11-18T15:33:55Z</updated>
    <id>https://polluterofminds.com/blog/how-to-spend-60-dollars-on-a-7-mb-file/</id>
    <content type="html">&lt;p&gt;I&#39;m not the best at writing automated tests. Sometimes I write them as I go, sometimes I write them before checking my code in, and sometimes I don&#39;t write them at all. This is bad practice, and I acknowledge it&#39;s an area where I need to improve. And today, I&#39;ll walk you through exactly why you shouldn&#39;t be like me.&lt;/p&gt;
&lt;p&gt;A little background first:&lt;/p&gt;
&lt;p&gt;I&#39;m working on a project for my company, &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt;, where we interact with the &lt;a href=&quot;https://filecoin.io/&quot;&gt;Filecoin&lt;/a&gt; blockchain. Filecoin works as an open-market, long-term storage solution for content. Unlike using a service like Amazon S3 Glacier, you can search for a storage provider (called miners) with rates you like and choose that provider to store your content for an agreed amount period of time. At the time of this writing, the minimum amount of time a storage deal can be made for is about six months.&lt;/p&gt;
&lt;p&gt;As part of the process for finding storage providers and proposing a &amp;quot;contract&amp;quot; to store the content, it is important (to us at least) to convert the cost of storage to USD. However, the conversion is not exactly straight forward.&lt;/p&gt;
&lt;p&gt;Storage providers provide quotes for storage in a format called AttoFil. This is the smallest denomination of the Filecoin currency called FIL. One AttoFil is 10^-18 FIL. The quoted price is also for a single epoch of time (approximately 30 seconds) and is per GB. So for example, if someone quoted &lt;code&gt;500000000&lt;/code&gt;, the calculation for cost in FIL for 30 seconds of storage would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(500000000 * Math.pow(10, -18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s pretty straight forward so far. But there are three additional variables missing in order to achieve our goal. We are storing content for about six months (In Epochs), we are not storing exactly one GB each time, and we need to know that we are not overpaying in USD.&lt;/p&gt;
&lt;p&gt;The first step was to calculate the current cost of FIL in USD. That&#39;s pretty easy. As of right now, the price of one FIL is $28.48. Next, we need to figure out what the cost of one AttoFil is in USD. To do that, we take &lt;code&gt;28.48 * Math.pow(10, -18)&lt;/code&gt;. Next, we need to figure out the size of our file to store in bytes and convert that to GB. There are many ways to do this, but for simplicity, the calculation is essentially this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const sizeInKb = FileSize/1024;
const sizeInMb = sizeInKb/1024;
const sizeInGb = sizeInMb/1024;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we need to calculate how many epochs (30 second periods of time) there are in six months. I&#39;ll save you the math and tell you it&#39;s about 518400 epochs.&lt;/p&gt;
&lt;p&gt;With all of this information, the trick is calculating the right price to propose to the storage provider. There&#39;s no going back if they accept the proposal...even if you mess up and overpay. And that&#39;s exactly what happened to me.&lt;/p&gt;
&lt;p&gt;I did not have a unit test in place to verify the price we would be paying did not exceed the price in USD we were comfortable with for six months of storage for any given file size. Because of this, I happened to query a storage provider who quoted a verify high price and a bug in my code missed the verification calculation. So, we ended up paying $60 to store a file that was about 7MB for six months.&lt;/p&gt;
&lt;p&gt;The moral of this story is test, test, test.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What I Would Have Shared on Twitter - Week One</title>
    <link href="https://polluterofminds.com/blog/what-i-would-have-shared-on-twitter/"/>
    <updated>2020-11-17T15:37:18Z</updated>
    <id>https://polluterofminds.com/blog/what-i-would-have-shared-on-twitter/</id>
    <content type="html">&lt;p&gt;Do you have that special place or moment where your brain is free to wander, where you feel more at peace than anywhere else? For me, that has been—for several years now—the thirty minutes between when I get up in the morning and when my kids get up. A peanut butter bagel, a cup of coffee, and for longer than I&#39;d like to admit, doom scrolling through Twitter.&lt;/p&gt;
&lt;p&gt;Wait. That doesn&#39;t seem peaceful, does it? The bagel, great. The coffee, awesome. Twitter, increasingly terrible. Twitter breathes life into the saying &amp;quot;slippery slope.&amp;quot; What once was a utilitarian tool slipped into a mindless addiction engine. That then turned into doom-seeking behavior. Don&#39;t get me wrong, there&#39;s a lot of bad shit happening in the world. But Twitter doesn&#39;t solve the problems that lead to that bad shit.&lt;/p&gt;
&lt;p&gt;When I first joined Twitter in 2013—late to the party, I know. But I did so strictly to follow baseball news. I had started a blog that covered baseball injuries and it became popular among fantasy baseball players. Getting instant access to baseball news was critical, so Twitter was the perfect solution.&lt;/p&gt;
&lt;p&gt;Later, as I grew into creative writing and went through my MFA program, Twitter became my source for #Writing news and updates. It&#39;s where I learned about literary journals, shared links to my published stories, and where I learned about the stories and books others were releasing.&lt;/p&gt;
&lt;p&gt;And as I began starting my own companies, Twitter became a marketing channel. I could reach thousands of people quickly and efficiently. Any new product I released, I could tweet about it. Even if it resulted in just a few link clicks, that was worth the literally 5 seconds of effort.&lt;/p&gt;
&lt;p&gt;Yet, throughout each of these cycles of Twitter usage, my Twitter bubble grew beyond the self-contained topics I was interested in. It grew into a true news feed. Journalists, bloggers, news publications filled my timeline. The bubble became a doom bubble.&lt;/p&gt;
&lt;p&gt;If you don&#39;t recognize this about social media, and I&#39;m sure you do, just look at all the people who say something like &amp;quot;taking a break from twitter, see you in a couple months.&amp;quot; How healthy can the thing you are using be if you have to take months away from it because of the mental strain it has caused? And yet, despite seeing the warning signs, I consciously chose to continue using Twitter.&lt;/p&gt;
&lt;p&gt;Until Sunday.&lt;/p&gt;
&lt;p&gt;On a whim, while sitting at the dining room table Sunday morning, I held my finger down on the Twitter app on my phone until a screen popped up asking if I&#39;d like to delete the app. I clicked delete, and it was gone. I&#39;ve been documenting how each day has gone without Twitter &lt;a href=&quot;https://www.indiehackers.com/polluterofminds&quot;&gt;here on Indie Hackers&lt;/a&gt;. But I&#39;ve discovered something interesting. Things I would normally share on Twitter don&#39;t have their traditional home.&lt;/p&gt;
&lt;p&gt;Realizing only recently that I could send emailed posts (like a newsletter) to members of my site right from the blogging interface, I thought it might be cool to start a weekly newsletter of the things I would have shared on Twitter. I promise the intro to each week won&#39;t be this long, and in that vein, I&#39;ll keep the things I share short this week.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.eventbrite.com/e/online-film-screening-tipping-point-tickets-126869563279?ref=eios&amp;amp;aff=eios&quot;&gt;Tipping Point - A Documentary About The Largest Civil Rights Protests in American History and Portland&#39;s Impact&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My sister lives in Portland and has seen the protests and police brutality that came along with those protests first-hand. She shared with me this documentary (WHICH IS ONLY AVAILABLE THROUGH TODAY).&lt;/p&gt;
&lt;p&gt;Considering the importance of the Black Lives Matter movement, the light shined on police brutality, and the awakening to a larger socio-economic problem in our country, this documentary will surely be an important one in helping understand not just how the American people have found their voice but how Portland, Oregon helped lead the discovery.&lt;/p&gt;
&lt;h3&gt;Progressive Web Apps Can Relieve us of Our Addictions&lt;/h3&gt;
&lt;p&gt;In removing Twitter from my phone, I have found myself directly visiting sites more frequently. In fact, I&#39;ve done this enough that I have begun &amp;quot;installing&amp;quot; these apps on my home screen. Despite progressive web apps (PWA) becoming more and more standard, not many sites make use of the technology and that&#39;s a shame. So, here are some resources on PWA:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simicart.com/blog/create-a-pwa-tutorial/&quot;&gt;Build a React App PWA (SimiCart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2015/12/getting-started-pwa&quot;&gt;Getting Started With PWAs (Google)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/four-questions-to-understand-if-you-need-pwa/&quot;&gt;Reasons to Consider a PWA (freeCodeCamp)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;p&gt;Is Discourse the Key to Growth?&lt;/p&gt;
&lt;p&gt;As you may have noticed, I do not have comments on my blog. This is because I want to share information, and I don&#39;t necessarily think the discussions that may be attached to what I share help me or anyone else grow. This comes from years of watching the comments sections of various platforms. It comes from the fact that we have all heard the phrase &lt;em&gt;Don&#39;t Read The Comments&lt;/em&gt;. And yet, as was pointed out to me by someone on IndieHackers, platforms like Reddit thrive and maintain mostly civilized discourse through comments.&lt;/p&gt;
&lt;p&gt;So I leave you with the question: Do you grow as a person through learning without discussion or by reading and participating in the discussions associated with what you are learning?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That&#39;s all for my first week of this. I hope this is enjoyable. I hope you&#39;ll share it. And I hope it doesn&#39;t cause you to drop your membership on my site 🙂.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Lure of Enterprise</title>
    <link href="https://polluterofminds.com/blog/the-lure-of-enterprise/"/>
    <updated>2020-10-27T13:54:48Z</updated>
    <id>https://polluterofminds.com/blog/the-lure-of-enterprise/</id>
    <content type="html">&lt;p&gt;The money. So much money. Just a few clients and you’ll be rolling in the dough. That is the lure of enterprise. It is also, quite frequently, a trick. A game of smoke and mirrors. A rigged carnival game that will find you with turned-out pockets and a head hung low.&lt;/p&gt;
&lt;p&gt;I came from an enterprise SaaS background when I started &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt;. I managed higher education accounts for an online college portfolio software company. I worked with admissions departments, handled RFPs (requests for proposal), rode out the 6-12 month sales cycles that some of the deals required. I also handle customer support, customer experience, and was the frontline on feature requests and bugs. Eventually, I transitioned into engineering with this company to round out my enterprise SaaS experience.&lt;/p&gt;
&lt;p&gt;So, when I started Graphite, I was an expert in enterprise. I’d seen the deals that could be landed when working with organizations over individuals. It was only natural, in my mind, that Graphite be an enterprise software tool. This was the biggest mistake I’d ever made with Graphite and &lt;a href=&quot;https://www.failory.com/interview/graphite-docs&quot;&gt;it’s what ended up hurting the company more than anything else&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enter into the enterprise market, you generally need to have a Rolodex. Kids, a Rolodex is a—come on, I’m not old enough to have used one of these. Anyways, the enterprise market tends to need salespeople with pre-existing contacts they can tap into. I didn’t have that. But that’s only one half of the problem. The other half is closing the deal.&lt;/p&gt;
&lt;p&gt;I surprised even myself by getting in front of some large, well-known organizations. But getting a few meetings is a far cry from closing an enterprise deal. You have to convince many people along the way that your product checks all of their boxes, is priced right, and will be around long enough to make their IT staff happy. Then, there are the legal and compliance departments.&lt;/p&gt;
&lt;p&gt;For a small operation or a solo founder, landing all of the things you need to land to close an enterprise deal is damn near impossible. But I spent so much of my time and resources on chasing enterprise. In fact, I spent so much time on this that I let a completely viable market pass me by.&lt;/p&gt;
&lt;p&gt;I had users, many of which would have surely paid for the product I was offering. But I all but ignored them because of my tunnel vision focus on enterprise.&lt;/p&gt;
&lt;p&gt;The lure of enterprise is strong, but make sure you are well-informed and seriously prepared before you decide to dive head into that market. The consumer and “prosumer” markets are totally viable and may be the right path for you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Sell Everything</title>
    <link href="https://polluterofminds.com/blog/sell-everything/"/>
    <updated>2020-10-22T12:47:49Z</updated>
    <id>https://polluterofminds.com/blog/sell-everything/</id>
    <content type="html">&lt;p&gt;I spent a lot of my life giving away creative work for free. Baseball blogging, short stories, blog posts, software. It was all free, sometimes given away under the naive belief that it would result in exposure. Problem is, exposure isn’t worth a damn.&lt;/p&gt;
&lt;p&gt;But the experience is.&lt;/p&gt;
&lt;p&gt;So, I want to be upfront about this post and say definitely make things and give them away for free. But do it for the experience. &lt;a href=&quot;https://polluterofminds.com/blog/sell-everything/__GHOST_URL__/its-ok-to-build-to-learn/&quot;&gt;Build and create to learn&lt;/a&gt;. But once you’ve done enough of that, you should take it to the next level and sell your shit.&lt;/p&gt;
&lt;p&gt;The first thing I ever wrote that people actually read was about the San Diego Padres. I wrote it because I had been writing things about the San Diego Padres that no one read, except this one guy. This one guy read my writing and asked me to come write for a site where people actually read the words that were published. It was there that I found an audience that would, for better or worse, consume the things I wrote.&lt;/p&gt;
&lt;p&gt;But I didn’t get paid.&lt;/p&gt;
&lt;p&gt;My writing there got recognized and I was offered an editor position where I could help coach others who would write for the same site. I took it, I wrote, I coached, I edited.&lt;/p&gt;
&lt;p&gt;But I didn’t get paid.&lt;/p&gt;
&lt;p&gt;That effort led to me getting asked to come write for an even bigger site. My words would reach thousands of people. So of course I jumped at the opportunity. I got the chance to write about more than just the San Diego Padres (though did a good bit of writing about them too). I was invited to talk on sport radio shows. I became part of an inner circle on Twitter.&lt;/p&gt;
&lt;p&gt;But I didn’t get paid.&lt;/p&gt;
&lt;p&gt;After a while, I realized the work I was doing had value. I had gained the experience I needed and had reached a point where the returns of doing something for free were so diminished they were almost non-existent. So, I started my own site. Instead of ad revenue from my writing going to some large sports media company while I got nothing, the revenue went to me.&lt;/p&gt;
&lt;p&gt;Now, I was getting paid.&lt;/p&gt;
&lt;p&gt;This is where you can run into trouble. Once your creative work has been rewarded with payment, how do you go back to giving it away for free? The truth is, I think you don&#39;t. I think you must categorize your creativity. Once you&#39;ve proven there is a &amp;quot;market&amp;quot; for a particular creative work, you no longer have a reason to give it away for free. This is not to say you never do anything for free again, and this is certainly not to say you can just up and charge people for all your creative works, even if they come from different categories. Instead, what it means is, sell what you can, and as you develop new skills (should you choose to), the work you do in your newest creative endeavor can become the thing you give away for free.&lt;/p&gt;
&lt;p&gt;For me, that was fiction first, followed by software. Writing blog posts is very different than writing fiction, but I have always loved fiction. The first short story I can remember writing was from third grade, and from that moment on, I was enamored with the idea of storytelling. But I&#39;d never taken the time to learn—to dive in. So, that&#39;s what I did. I wrote, I joined critique groups, I got better, and I eventually enrolled in an MFA*.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*Big disclaimer here: I was fortunate enough to be at a point in life where I could afford the cost of an MFA, knowing full well the investment would not pay for itself in terms of job opportunities. You DO NOT need an MFA to be a great writer.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As I went through my MFA program, I started putting out my fiction. I submitted to literary journals. Most do not pay because, frankly, they have no money. So as I started getting acceptances, I was once again giving my creative work away for free. And that was totally cool. I was learning. I was gaining experience. Remember, build and create to learn.&lt;/p&gt;
&lt;p&gt;Then sell.&lt;/p&gt;
&lt;p&gt;And that&#39;s what I did with my fiction. I was able to put together a &lt;a href=&quot;https://www.rhythmnbone.com/leaving-arizona&quot;&gt;collection of short stories&lt;/a&gt; that a small press agreed to publish and sell on my behalf. When the book was released, people actually paid for it. Does this mean I&#39;ll never release short fiction for free? Absolutely not. But it does mean I&#39;ve moved past the creating for experience phase. If I were to write a novel (which I have—twice), I would not release it for free. Many people do. Check out Wattpad. That&#39;s a great place to build and create to learn. But again, once you&#39;ve proven that people will pay for a creative work you can put out, you should consider...you know...getting paid.&lt;/p&gt;
&lt;p&gt;This takes me into software. Towards the end of my MFA program, I had an idea for an application I wanted to use myself. That idea was the thing that propelled me to get over a decade-long struggle to learn to code. Once I learned, I started releasing software into the wild. Everything was free.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt; started out entirely free before I turned it into a business—one that I would shut down after three years. I then built a bunch of small side projects, all of which I released for free. Until I felt confident enough to release something that people might pay for. Once I felt like I had the experience, I started charging businesses for Graphite. I&#39;ve written a lot about my mistakes with Graphite, but I had sign-ups. People paid me (very little) for the software I had written. I then released a &lt;a href=&quot;https://getwritesprint.com/&quot;&gt;small side project&lt;/a&gt; as a one-time fee, paid app. And people continue to buy that app here and there.&lt;/p&gt;
&lt;p&gt;Now, I&#39;ve reached the point where I write code professionally. I get paid for just about every line of code I write. That does not mean I won&#39;t write code for side projects. In fact, I do that frequently now. However, I do it knowing one of two things is going to happens I&#39;m going to build something with the explicit goal of learning something new, and I will likely never get paid for what I choose to build, or I build something knowing I will charge for it once it&#39;s released.&lt;/p&gt;
&lt;p&gt;See, selling things doesn&#39;t mean you have to run a company. Not all apps are businesses. But many apps can be something people pay for. And with that in mind, I now will always release my software with a price tag unless I&#39;m learning or contributing to the open-source community.&lt;/p&gt;
&lt;p&gt;This whole post was an extraordinarily long-winded way of saying that creating things and releasing them for free is fine and good and normal. But you&#39;d be surprised what people might pay you for.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>New Digs</title>
    <link href="https://polluterofminds.com/blog/new-digs/"/>
    <updated>2020-10-05T20:53:40Z</updated>
    <id>https://polluterofminds.com/blog/new-digs/</id>
    <content type="html">&lt;p&gt;Today is my first day as a full-time employee in well over a year. It&#39;s a weird feeling, but I&#39;m excited, so let me trace the path here and explain why I&#39;m joining &lt;a href=&quot;https://pinata.cloud/&quot;&gt;Pinata&lt;/a&gt; as a Fullstack Engineer.&lt;/p&gt;
&lt;p&gt;In April of 2019 I said goodbye to the stability of full-time employment to put all my effort into &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt;—a project I had started two years prior. Unfortunately, Graphite almost immediately fizzled. I didn&#39;t officially shut Graphite down until a few months ago. After Graphite began to fizzle, a new opportunity presented itself and I co-founded &lt;a href=&quot;https://simpleid.xyz/&quot;&gt;SimpleID&lt;/a&gt;. SimpleID found enough traction to be accepted into the Consensys accelerator, Tachyon.&lt;/p&gt;
&lt;p&gt;Then COVID hit.&lt;/p&gt;
&lt;p&gt;SimpleID was struggling to raise its seed round and &lt;a href=&quot;https://polluterofminds.com/startups-and-difficult-decisions/&quot;&gt;I felt it best to free up capital for my other co-founders by stepping away&lt;/a&gt;. When I made that decision, I knew I wasn&#39;t going to jump straight back into regular employment, so I began contracting. During that process, I started contracting for Pinata, among other companies. Soon, I found myself enjoying it so much that I was contracting exclusively for Pinata with the goal of transitioning to full-time employment.&lt;/p&gt;
&lt;p&gt;And that&#39;s where we&#39;re at today. I can finally announce my official position with Pinata.&lt;/p&gt;
&lt;h3&gt;Why Pinata&lt;/h3&gt;
&lt;p&gt;I&#39;ve known Matt and Kyle, the founders, for a few years now. In fact, Pinata provided the infrastructure to power some of Graphite&#39;s more cutting-edge experiments. I&#39;ve been a big fan of IPFS since I first heard about it, and Pinata&#39;s name has grown synonymous with IPFS. If you think pinning, you think Pinata.&lt;/p&gt;
&lt;p&gt;When Matt heard I was contracting, he talked to me about working together. This coincided with Filecoin&#39;s ramp up toward its mainnet launch. I was fortunate to work on the core Pinata product while building brand new functionality on a brand new technology.&lt;/p&gt;
&lt;p&gt;The future for Pinata is incredibly bright. It&#39;s led by two smart people, has the respect of an entire industry, and has proven itself patient and calculating—two traits I favor in a company.&lt;/p&gt;
&lt;p&gt;I&#39;m excited for what the future holds, and if you&#39;re interested in building on top of IPFS or Filecoin, I&#39;d love to help you. Reach out on &lt;a href=&quot;https://twitter.com/polluterofminds&quot;&gt;twitter&lt;/a&gt; or via &lt;a href=&quot;mailto:justin.edward.hunter@gmail.com&quot;&gt;email&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>It&#39;s OK to Build to Learn</title>
    <link href="https://polluterofminds.com/blog/its-ok-to-build-to-learn/"/>
    <updated>2020-09-21T12:52:21Z</updated>
    <id>https://polluterofminds.com/blog/its-ok-to-build-to-learn/</id>
    <content type="html">&lt;p&gt;I write a lot about &lt;a href=&quot;https://polluterofminds.com/make-something-today/&quot;&gt;product&lt;/a&gt;, &lt;a href=&quot;https://polluterofminds.com/your-failure-is-your-fault/&quot;&gt;startups&lt;/a&gt;, and &lt;a href=&quot;https://polluterofminds.com/the-traps-youll-fall-into-when-validating-a-market/&quot;&gt;market validation&lt;/a&gt;. But I&#39;m also a developer who is constantly learning. So, it&#39;s important, in my mind, to recognize that not everything we build has to find a market. Not everything has to make money. It is 100% valid to build something because you want to and because you want to learn, then see if there is a market.&lt;/p&gt;
&lt;p&gt;The trick here, of course, is not to fool yourself into believing that just because you build it, people will come. If you set out to learn something new or to build an app just because you want to, you should expect that it will not be used by many people. You should expect that you will not make money from it. That said, you can absolutely put it out there and see if it finds a market, even a niche market.&lt;/p&gt;
&lt;p&gt;I am building an application called &lt;a href=&quot;https://perligo.io/&quot;&gt;Perligo&lt;/a&gt;. The idea behind it was two-fold—learn new programming concepts and build something that would help the creative community based on my experiences as a writer. If I were going to build this as &amp;quot;my next startup&amp;quot;, I actually wouldn&#39;t have written a line of code yet. I would have been out interviewing people, finding friction points, verifying a willingness to use software like this, and most importantly verifying a willingness to pay.&lt;/p&gt;
&lt;p&gt;I have not done any of that with Perligo, and that&#39;s OK. If you read IndieHackers or Hacker News or Product Hunt or any number of sites dedicated to building and shipping products, you may come away thinking that building something without confirming there is a market and a way to make money is pointless. Fortunately, those sentiments are absolutely not true.&lt;/p&gt;
&lt;p&gt;Justin Jackson, a well-known indie hacker and podcaster said on Twitter recently that building something without verifying there is a market, demand, and willingness to pay is not building a business, it&#39;s making art.&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-embed-card&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&quot;I only want to bake pies.&quot;&lt;br /&gt;&lt;br /&gt;That&#39;s fine, but that makes you an artist, not a business.&lt;br /&gt;&lt;br /&gt;A business person, who discovers that 9 times out of 10 people prefer cake over pie, will switch to selling cake.&lt;/p&gt;— Justin Jackson (@mijustin) &lt;a href=&quot;https://twitter.com/mijustin/status/1301578364570882049?ref_src=twsrc%5Etfw&quot;&gt;September 3, 2020&lt;/a&gt;&lt;/blockquote&gt;&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/figure&gt;
&lt;p&gt;He&#39;s absolutely right, and like he indicated in his tweet, making art is perfectly valid.&lt;/p&gt;
&lt;figure class=&quot;kg-card kg-embed-card&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;THIS!!! 💯&lt;br /&gt;&lt;br /&gt;There&#39;s nothing wrong with being an artist! The world needs more art. 👍&lt;/p&gt;— Justin Jackson (@mijustin) &lt;a href=&quot;https://twitter.com/mijustin/status/1301580933372411904?ref_src=twsrc%5Etfw&quot;&gt;September 3, 2020&lt;/a&gt;&lt;/blockquote&gt;&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/figure&gt;
&lt;p&gt;I want to take this sentiment a step further. There&#39;s nothing wrong with being an artist and making art. But there&#39;s also nothing wrong with selling that art. Even if you haven&#39;t validated demand. Building something you are proud of is enough incentive to at least try to sell it. As long as you understand what you&#39;re doing.&lt;/p&gt;
&lt;p&gt;Understanding is the key. If you make art, expect that art to sell a ton and make millions, but you didn&#39;t put the leg work in up front, you&#39;re kidding yourself and setting yourself up for disappointment. However, if you make something because you want to learn or make art or just want to pass the time, and then you decide to try to sell it knowing there&#39;s not likely to be a huge influx of cash from what you made, that&#39;s totally fine. In fact, it&#39;s something to be encouraged. Learning by doing doesn&#39;t just apply to those who pre-validate markets and build to demand. You learn almost as much by shipping something that you built from passion.&lt;/p&gt;
&lt;p&gt;You just might not make any more doing it 😉.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Traps You&#39;ll Fall Into When Validating a Market</title>
    <link href="https://polluterofminds.com/blog/the-traps-youll-fall-into-when-validating-a-market/"/>
    <updated>2020-09-19T18:51:17Z</updated>
    <id>https://polluterofminds.com/blog/the-traps-youll-fall-into-when-validating-a-market/</id>
    <content type="html">&lt;p&gt;On September 17, 2020, &lt;a href=&quot;https://blog.mozilla.org/blog/2020/09/17/update-on-firefox-send-and-firefox-notes/&quot;&gt;Mozilla announced the end of life&lt;/a&gt; for two products that many people thought were game-changers. Firefox Send and Firefox Notes were the answer to Google&#39;s Drive and Docs. The antithesis of the data-mining economy. Make no mistake, these two products were always experiments—something Mozilla spun out of their &lt;a href=&quot;https://medium.com/firefox-test-pilot/adios-amigo-51bec2a00072&quot;&gt;now-defunct Test Pilot program&lt;/a&gt;. The program was designed for experimentation, user feedback, and product validation. It&#39;s that last part that drives the main thesis of this entire post.&lt;/p&gt;
&lt;p&gt;Mozilla clearly thought they had something with both Send and Notes. They must have, otherwise they would not have continued development of those applications as standalone products even as Test Pilot was shut down. And here comes the brutal fact that product &amp;quot;experts&amp;quot; won&#39;t tell you. Market validation is fucking hard. It&#39;s so hard, in fact, that if you build products long enough, you will invariably fall into the trap of believing you&#39;ve validated a market.&lt;/p&gt;
&lt;p&gt;It happened to me with &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt;. Much like it seems Mozilla thought they had found and validated a market with Send and Notes, I thought I had found and validated a market with Graphite. I had a ton of early interest. I had a loyal community. Graphite got press, was highly touted on product aggregation sites and blogs, and seemed to establish itself as a known quantity.&lt;/p&gt;
&lt;p&gt;But I was fooled.&lt;/p&gt;
&lt;p&gt;What actually happened was I had built a niche product for a niche community while thinking I had build a product for a generalized market and had validated demand for that market. I had actually only validated demand in the niche community. Creating a product for a niche market is a really good way to build a business, but you have to be intentional about it. You can&#39;t accidentally do it and then expect the product to work long-term. Unfortunately, that&#39;s exactly what happened with Graphite.&lt;/p&gt;
&lt;p&gt;And I believe that&#39;s what happened with Firefox Send and Firefox Notes.&lt;/p&gt;
&lt;p&gt;Mozilla&#39;s Firefox browser &lt;a href=&quot;https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22deviceType%22%3A%7B%22%24in%22%3A%5B%22Desktop%2Flaptop%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-09%22%2C%22dateEnd%22%3A%222020-08%22%2C%22segments%22%3A%22-1000%22%7D&quot;&gt;has less than an 8% market share&lt;/a&gt; and that has been holding steady for a long time now. Firefox, at this point, serves a niche audience itself. So, any product released by the parent organization—Mozilla—should be considered a niche product. Perhaps that is how Mozilla views all of their experiments, but they prepared widespread announcements around their Send product. They had product launches on the most popular sites. It &lt;em&gt;felt&lt;/em&gt; like it was designed to be a commercially viable, secure alternative to file sharing tools currently on the market.&lt;/p&gt;
&lt;p&gt;Unfortunately, either through abuse as Mozilla has indicated or a lack of adoption, the product was not viable as a widespread solution. So, the question is how do we avoid outcomes like this? Is it possible to avoid?&lt;/p&gt;
&lt;p&gt;Validating a market must be an ongoing process. You are never done. That first taste of validity should be met with skepticism. If you did not set out to build a niche product, you have to, at this point, ask yourself if the market validation you&#39;re seeing is validation from a much smaller market than you intended. This is hard. It&#39;s not going to be obvious, but there are ways to analyze the reception of your product that will help.&lt;/p&gt;
&lt;p&gt;For Graphite, I had a pretty good grasp on who was using Graphite in the abstract &amp;quot;persona&amp;quot; sense. I did not have actual user data, so I could not do as much analysis as other companies, but I had a fully formed user persona based on the traction I had seen.&lt;/p&gt;
&lt;p&gt;Yet, I ignored it.&lt;/p&gt;
&lt;p&gt;It&#39;s really easy to ignore the personas being formed and assume that capture one particular segment of a wider market means the other segments will be captured as well. So, in your analysis, you have to understand the personas of the people using the product. If you see a trend, that&#39;s when you must ask yourself if you should be scaling your expectations back and focusing on a niche.&lt;/p&gt;
&lt;p&gt;There is a flip-side to this process, though. If you spot a trend in user personas and prematurely scale your expectations back, you have no chance of capturing the wider market. So through the process of analyzing user adoption, you need to be on the lookout for signs or hooks into other segments of the market. Do you have a few personas that indicate your user base is highly-technical but you have small, growing pockets of users who seem to be new to tech? Perhaps scaling back to a techno-focused niche is premature. However, if you see those small pockets of non-technical users churning, that is a sign that you can capture initial interest, but your product might not be suited for that group.&lt;/p&gt;
&lt;p&gt;As you can probably gather from the preceding paragraphs, analyzing your market is difficult. Predicting a market ahead of time—i.e. during a fundraise—is mostly a guessing game. Educate yourself as much as possible so that your guesses are as accurate as possible.&lt;/p&gt;
&lt;p&gt;But most importantly, don&#39;t allow yourself to be fooled into thinking traction within a segment of your wider target market means you have validated your product within that market. You have to always ask yourself what is real and what is a trap.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Help Others and Don&#39;t Be a Time Cop</title>
    <link href="https://polluterofminds.com/blog/help-others-and-dont-be-a-time-cop/"/>
    <updated>2020-07-30T12:06:35Z</updated>
    <id>https://polluterofminds.com/blog/help-others-and-dont-be-a-time-cop/</id>
    <content type="html">  &lt;!--kg-card-begin: html--&gt;
&lt;div style=&quot;position:relative; padding-bottom:calc(56.25% + 44px)&quot;&gt;&lt;iframe src=&quot;https://gfycat.com/ifr/UniqueMessyAsianconstablebutterfly&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;100%&quot; height=&quot;100%&quot; style=&quot;position:absolute;top:0;left:0;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://gfycat.com/uniquemessyasianconstablebutterfly-ultimate-fighting-championship-organization&quot;&gt;via Gfycat&lt;/a&gt;&lt;/p&gt;
&lt;!--kg-card-end: html--&gt;
&lt;p&gt;I&#39;ll be honest, the title of this article was mostly an excuse to find a Timecop gif. But the content of this article actually matters, so stop trying to find where you can stream Timecop and pay attention.&lt;/p&gt;
&lt;p&gt;I tweeted about this phenomenon, but I wanted to expand my thoughts on the topic. If you don&#39;t click the link to my &lt;a href=&quot;https://twitter.com/polluterofminds/status/1288072710141214720&quot;&gt;tweetstorm&lt;/a&gt;, here&#39;s the tl;dr:&lt;/p&gt;
&lt;p&gt;In hustle culture/Silicon Valley culture/startup culture/bro culture, you will find a lot of advice around protecting your time. While there is something to be said for respecting your time and other people&#39;s time, doing so does not mean you don&#39;t &lt;em&gt;make&lt;/em&gt; time for others.&lt;/p&gt;
&lt;p&gt;Take a look back on your career. Be honest with yourself. How many people helped you along the way. If you&#39;re not hiding behind a rewritten history, you&#39;ll surely find many people who were willing to give you some of their time to help you along the way. The very least you can do is pass that along. And here&#39;s the kicker:&lt;/p&gt;
&lt;p&gt;**You might actually benefit from making time for others. **&lt;/p&gt;
&lt;p&gt;Getting something out of letting another person pick your brain should never be the goal, but it can absolutely be an end result. When I was running Graphite, I was lucky enough to have a good launch of my product. I started getting bombarded by meeting requests and emails. People around me told me that I would have to learn to ignore those things. And sure, some of it was spam from event marketers and sales people, but a lot of it came from bootstrappers, indie builders, new developers, and people like me who were going through the same things I had gone through. I made the conscious decision to try not to turn down any of those meeting requests.&lt;/p&gt;
&lt;p&gt;The results of that decision were friendships, business partnerships, speaking engagements, customers, interviews, and so much more. But that was never the goal. I felt it was worth my time to help other people, and you should feel that way too. Let&#39;s face it, you&#39;re not all that popular. You&#39;re not Elon Musk or Mark Zuckerberg. You&#39;re you, and any success you have can surely be partially attributed to the help you got along the way. So help others.&lt;/p&gt;
&lt;p&gt;Don&#39;t be a time cop. Be smart about when you &amp;quot;protect your time&amp;quot; and when you help others. There is a balance, but to default into rejecting all meetings and ignoring emails is the wrong approach. I said this to a friend on Twitter and I will leave you all with the same sentiment:&lt;/p&gt;
&lt;p&gt;People are the key to business and meeting/making time for them matters. If you aren&#39;t willing to put in the time to help other people, what&#39;s the point in running a business to launching a product?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Your Failure is Your Fault</title>
    <link href="https://polluterofminds.com/blog/your-failure-is-your-fault/"/>
    <updated>2020-07-27T11:29:03Z</updated>
    <id>https://polluterofminds.com/blog/your-failure-is-your-fault/</id>
    <content type="html">&lt;p&gt;Last week, I announced the shut down of &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite Docs&lt;/a&gt;, a company I had spent the last three-plus years working on. It was a hard decision, but it was one that was a long-time coming. While deciding to shut the company down was hard, what may have been even harder was coming to terms with the reason Graphite failed.&lt;/p&gt;
&lt;p&gt;When I first recognized Graphite&#39;s chances at success were waning, I wrote the problems off as something that would pass. It wasn&#39;t that I wasn&#39;t trying to correct the course, it was that I wasn&#39;t looking at the problems in the right light. And when you are trying to solve the wrong problems, you are only digging yourself deeper into a hole. As I grew closer and closer to what would be the end, I blamed external forces. I told my wife and my close friends that market conditions had hurt me, that cutting-edge tech was the problem, that blah blah blah.&lt;/p&gt;
&lt;p&gt;I was the problem, and that&#39;s ok. Every founder is the main problem their company faces. Those problems, though, can be turned into successes by accepting responsibility, changing course, and making sound decisions. Not many companies do this, not many founders do this. And that&#39;s why so many companies fail. Graphite&#39;s failure was not the result of any external forces beyond my control. It was squarely within my control, but I failed to execute.&lt;/p&gt;
&lt;p&gt;I won&#39;t enumerate the decisions I would revisit if given the opportunity—that&#39;s for another post. Instead, I will use this post to illustrate to other founders that while it is easy to blame something else, someone else, the success and failure of your company is fully under your control. Are there times where a founder literally can&#39;t do anything to fix things? Sure, but those are rare. Much rarer than founder interviews would have you believe.&lt;/p&gt;
&lt;p&gt;There is nothing wrong with making bad decisions, even if those bad decisions lead to the end of your company. Nothing wrong, unless of course, you don&#39;t learn from those bad decisions. Your failure is your fault, but it is also your opportunity. The opportunity to learn from failure is huge, and not recognizing it, not grasping it, squeezing every bit of knowledge you can out of it, is the true failure.&lt;/p&gt;
&lt;p&gt;Just remember, don&#39;t strive for failure. Strive to learn, knowing that failure is always a possibility. Don&#39;t hide from failure, don&#39;t find shame in it. Learn, adapt, move on. But acknowledge it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Start a Business Without Even Trying</title>
    <link href="https://polluterofminds.com/blog/how-to-start-a-business-without-even-trying/"/>
    <updated>2020-07-22T13:38:17Z</updated>
    <id>https://polluterofminds.com/blog/how-to-start-a-business-without-even-trying/</id>
    <content type="html">&lt;p&gt;After I left my last startup, I started looking for my next gig. This, of course, meant the dreaded job application. While I have spent the couple years working for myself, and while I love it, I thought it was time to try working for a startup again. As it would turn out, I ended up working for myself in a freelancing/contractor role anyway, but that&#39;s beside the point of this post. Instead, I want to tell you one of the stories I told in most of my cover letters/interviews when applying to jobs. It reminded me of how we can accidentally find our way into entrepreneurship.&lt;/p&gt;
&lt;p&gt;I first got the itch to build something when I was still in high school. I was working on cars with my friends and we had trouble affording the parts. So, I had an idea. What if we could get the parts for significantly cheaper? All we had to do was start a business and reach out to suppliers saying we would be re-selling the parts. At least, that&#39;s what I thought the process would be.&lt;/p&gt;
&lt;p&gt;I applied for and got a business license, and I thought that was it. I was in. However, this was before the boom in e-commerce, and auto parts sellers were not friendly to online merchants at the time. They wanted a brick and mortar store before they’d deal with me.&lt;/p&gt;
&lt;p&gt;There was no way my friends and I could afford a physical location, so I turned on the salesperson in me and went back with a pitch, a vision. I got on the phone with parts managers and founders at these auto parts companies and explained the vision (a vision that I hadn&#39;t even thought through since my original goal was just to get parts for my car for cheap). An online parts store. &lt;a href=&quot;https://www.imdb.com/title/tt0232500/&quot;&gt;Fast and the Furious&lt;/a&gt; had just come out. The market was about to boom. That was the pitch. They would love it.&lt;/p&gt;
&lt;p&gt;They didn&#39;t.&lt;/p&gt;
&lt;p&gt;Now, I was left wondering if my crazy idea to get cheap auto parts for me and my friends would ever work. I had one more idea. What if I actually built the business?&lt;/p&gt;
&lt;p&gt;I built out an online store, posted an inventory of parts I did not even have available, and started selling to people I knew from around town. Soon, I had real orders and no product. I let those build up a bit and went back to each and every one of the parts managers and founders who had turned me down. I showed them my back orders and convinced them to sell to me. Having an online presence to prove the validity of the business helped, but having orders and money ready to flow in helped more.&lt;/p&gt;
&lt;p&gt;After landing the wholesaler agreements and my friends and I getting our pick of the cheapest parts we&#39;d ever buy, a funny thing happened. It wasn’t just about getting cheap parts for my car anymore. It was about building a business&lt;/p&gt;
&lt;p&gt;I fell in love with building businesses and building products. All by accident.&lt;/p&gt;
&lt;p&gt;As a fun aside, here’s an archived snapshot of that fateful website: &lt;a href=&quot;https://web.archive.org/web/20031223033513/http://www.ja1racing.com/&quot;&gt;https://web.archive.org/web/20031223033513/http://www.ja1racing.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The point to this story is you never know where inspiration might come from. If you&#39;re waiting for the right moment to do something, that moment may never come. Things don&#39;t always happen for a reason. Sometimes, they happen by accident.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Nothing Mastered, Everything Gained</title>
    <link href="https://polluterofminds.com/blog/nothing-mastered-everything-gained/"/>
    <updated>2020-07-15T11:39:49Z</updated>
    <id>https://polluterofminds.com/blog/nothing-mastered-everything-gained/</id>
    <content type="html">&lt;p&gt;The concept of a &amp;quot;master of nothing&amp;quot; has been around &lt;a href=&quot;https://en.wikipedia.org/wiki/Jack_of_all_trades,_master_of_none&quot;&gt;since at least 1592&lt;/a&gt;, but its meaning has changed over time. Perhaps it&#39;s best to start with the full quote that lends itself to the concept of being a master of nothing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jack of all trades, master of none.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The truth is, that&#39;s not the full quote. The original quote from 1592 was a compliment directed at people who were able to juggle multiple tasks. To people who were multi-disciplinary. Over time, the &amp;quot;master of none&amp;quot; part of the quote was added as an insult. Perhaps this was because there were people who dedicated their lives to a single focus and to not master something was to not give your all. Perhaps it was simply a disillusion that mastery was necessary for success. Regardless, the quote should remain a compliment. I say this because I am, in fact, a master of nothing.&lt;/p&gt;
&lt;p&gt;But I am pretty damn good at a lot of things.&lt;/p&gt;
&lt;p&gt;A quick list of &lt;em&gt;some&lt;/em&gt; of the things I&#39;ve done in my 30+ years on Earth in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built soapbox derby cars&lt;/li&gt;
&lt;li&gt;Built go-karts&lt;/li&gt;
&lt;li&gt;Wrote a screenplay&lt;/li&gt;
&lt;li&gt;Got a business degree&lt;/li&gt;
&lt;li&gt;Started an auto parts business online&lt;/li&gt;
&lt;li&gt;Started a sports blog&lt;/li&gt;
&lt;li&gt;Got a masters degree in creative writing&lt;/li&gt;
&lt;li&gt;Gave radio interviews to ESPN&lt;/li&gt;
&lt;li&gt;Learned to code&lt;/li&gt;
&lt;li&gt;Learned to make beer&lt;/li&gt;
&lt;li&gt;Rebuilt the entire backend of a 1984 Toyota Corolla&lt;/li&gt;
&lt;li&gt;Made comic books&lt;/li&gt;
&lt;li&gt;Published a collection of short fiction&lt;/li&gt;
&lt;li&gt;Managed a team of call center employees&lt;/li&gt;
&lt;li&gt;Led customer experience for an edtech company&lt;/li&gt;
&lt;li&gt;Conducted customer experience journey mapping&lt;/li&gt;
&lt;li&gt;Analyzed systems processes for a technology company&lt;/li&gt;
&lt;li&gt;Started a blockchain company&lt;/li&gt;
&lt;li&gt;Started another blockchain company&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;p&gt;Could I even have done half the things on this list if I had focused on mastery? Absolutely not. Are there things on this list I might want to master? Sure, but not today.&lt;/p&gt;
&lt;p&gt;The journey is the value. I would argue that a lack of mastery but a general knowledge in a lot of things makes you immensely more hirable than mastery in a single discipline. David Epstein, an investigative journalist &lt;a href=&quot;https://bookshop.org/books/range-why-generalists-triumph-in-a-specialized-world/9780735214484&quot;&gt;wrote a book on the topic of generalists versus masters&lt;/a&gt; and had this to say in an interview on the topic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Breadth of training predicts breadth of transfer. The more varied your training is, the better able you’ll be to apply your skills flexibly to situations you haven’t seen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You are a more prepared human being when you learn and apply yourself in many different areas. When thrust into a situation for which you have no training, no experience, and no clue what to do next, you are better equipped to figure it out. In my life, I&#39;ve seen this on many occasions. Asked to do a sales demo without any education or work background in such a thing, I was able to adapt and not only do the demo but lead the demos going forward. Asked to automate a process, my background in various technical areas allowed me to take a very basic knowledge of some subjects, learn the additional material I needed, and apply what I had learned to build an automation tool. When struck by a desire to create something, I have been able to dive in, even without the seemingly necessary knowledge that would be required to finish the thing I wanted to create because I have taught myself how to learn over years of mastering nothing but experimenting with much.&lt;/p&gt;
&lt;p&gt;This is not to say mastery is unnecessary in the world. In fact, it&#39;s quite the opposite. We need mastery in many areas. But we do not need everyone to master a given topic. General knowledge, when applied broadly and with passion, can create an equitable field of employment in many different sectors, it can enhance the creative arts, it can enrich lives, and it can make the world more enjoyable.&lt;/p&gt;
&lt;p&gt;So, the next time you are interested in something new, don&#39;t ask yourself how much time you&#39;ll be able to dedicate to it. Don&#39;t ask yourself if you&#39;ll be able to master it. Don&#39;t ask yourself anything. Just take the leap. Learn. Enjoy. Master nothing.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Running a Filecoin Lotus Testnet Node on a Macbook Pro</title>
    <link href="https://polluterofminds.com/blog/running-a-filecoin-lotus-testnet-node-on-a-macbook-pro/"/>
    <updated>2020-07-08T12:28:22Z</updated>
    <id>https://polluterofminds.com/blog/running-a-filecoin-lotus-testnet-node-on-a-macbook-pro/</id>
    <content type="html">&lt;p&gt;In my recent work, it became necessary to experiment with the &lt;a href=&quot;https://filecoin.io/&quot;&gt;Filecoin&lt;/a&gt; network. Filecoin is a decentralized protocol for incentivized storage of content. It is a compliment to &lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt; and provides the incentive layer to those who store content and ensure its availability. At the end of the day, Filecoin, combined with IPFS, seeks to allow for 100% uptime websites and applications. It also seeks to preserve content and fight back against censorship.&lt;/p&gt;
&lt;p&gt;Filecoin has not yet released its mainnet, but it has a very active community participating in its testnet. My work requires application interface capabilities with the eventual Filecoin network, so I needed to get a testnet node up and running. This post is not going to be instructional on how to get a node running on your machine since Filecoin&#39;s docs are pretty good at that already. Instead, I want to focus on what&#39;s missing from the docs—system and hardware requirements.&lt;/p&gt;
&lt;p&gt;The only system requirements &lt;a href=&quot;https://docs.lotu.sh/en+hardware&quot;&gt;listed&lt;/a&gt; for installing, syncing, and running the Lotus client of the Filecoin testnet is a single requirement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lotus can build and run on most &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Linux&lt;/a&gt; and &lt;a href=&quot;https://www.apple.com/macos&quot;&gt;MacOS&lt;/a&gt; systems with at least 8GiB of RAM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I read that and thought, &amp;quot;Cool, my Macbook has that much RAM and then some, but what about the storage requirements, what about the cooling requirements, what about what about what about...&amp;quot;&lt;/p&gt;
&lt;p&gt;As a quick preface, here&#39;s a snapshot of my Macbook Pro (a 2015 model):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Pro (Retina, 15-inch, Mid 2015)&lt;/li&gt;
&lt;li&gt;Processor 2.5 GHz Quad-Core Intel Core i7&lt;/li&gt;
&lt;li&gt;Memory 16 GB 1600 MHz DDR3&lt;/li&gt;
&lt;li&gt;Storage 500GB SSD&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;p&gt;After I cloned the Lotus client repository and built it from source, I was ready to run the client and sync the testnet chain. The syncing process is what would take the most time. Per the Lotus client documentation, it could take between a few hours and a couple of days. I can tell you now, it took my machine nearly 17 hours to sync the whole chain.&lt;/p&gt;
&lt;p&gt;Here was my experience:&lt;/p&gt;
&lt;p&gt;The syncing process started off smoothly. It wasn&#39;t until about 5 minutes in that my Macbook&#39;s fan even kicked on. When it did, I checked the CPU strain via Activity Monitor. The Lotus client using up between 400% and 700% of the CPU resources. And my machine started to sound like it might take flight.&lt;/p&gt;
&lt;p&gt;But I pressed on.&lt;/p&gt;
&lt;p&gt;Keep in mind, I&#39;m running this on my primary machine, so I had other work to do, Chrome tabs to open, Electron apps to run. For a while, my computer handled this fine, but after about an hour, it started slowing down. I once again checked Activity Monitor. Memory consumption seemed fine, but the CPU resources were still spiking. This time, I also checked the Disk tab on Activity Monitor and had a miniature heart attack. The Lotus client seemed to have written over 30GB of data to my machine and I was only about 10% of the way through the chain sync.&lt;/p&gt;
&lt;p&gt;I quickly killed the syncing process even though I wasn&#39;t sure if that meant I would have to start from the beginning again. I Googled the expected size of a full node for the Filecoin testnet and came away with nothing. Fortunately, the folks at &lt;a href=&quot;https://textile.io/&quot;&gt;Textile&lt;/a&gt; are always knowledgeable and helpful. In their slack, they suggested that a full node would probably sit at about 30GB. That meant that the disk writes I had seen were surely writes followed by immediate deletes.&lt;/p&gt;
&lt;p&gt;With that in mind, I fired up the node and started the sync process again. Fortunately, the syncing quickly caught back up to where I left off and I settled in for the rest of my day.&lt;/p&gt;
&lt;p&gt;About an hour or so later, with possibly 900 Chrome tabs open because I&#39;m a masochist and at least 5 separate Electron-based desktop apps running, my mouse stopped moving. I tried to use the keyboard to navigate between windows, but it also didn&#39;t respond. In fact, my entire machine had locked up.&lt;/p&gt;
&lt;p&gt;Knowing I had this node syncing in the background, I didn&#39;t want to do anything. Normally, I&#39;d do a hard reboot, but in this case, I just sat there staring into the void that was my frozen monitor screen. I sat and sat until...&lt;/p&gt;
&lt;p&gt;My computer restarted itself.&lt;/p&gt;
&lt;p&gt;Shit. Now, I would surely have to start the entire syncing process over again for the Filecoin testnet node. If it&#39;s not clear by now, I&#39;m not sure how the sync process is tracked locally. I figured any temporary caching of data that helped the sync process pick up where it left off the last time was erased and I&#39;d be starting from the beginning. But to my surprise, that was not the case.&lt;/p&gt;
&lt;p&gt;With the node syncing once again, I closed any unnecessary programs on my desktop and reduced my Chrome tabs to the bare minimum needed. That helped a ton and I was able to finish out my day of work. When I finished, I just left my computer on, ensured it wouldn&#39;t go to sleep and lose WiFi connection, and hoped for the best.&lt;/p&gt;
&lt;p&gt;This morning, I came into my office to find that everything had synced up successfully. My CPU resources were back to normal, my computer fan had stopped buzzing like a bandsaw, and I had a fully operational Lotus client for the Filecoin testnet.&lt;/p&gt;
&lt;p&gt;I took a look in the hidden &lt;code&gt;.lotus&lt;/code&gt; folder on my computer to see how much data had actually been written, and to Textile&#39;s credit, it was right at 30GB. So, the moral of this story is that you will probably have problems, and it may lock up your machine, but running a Filecoin testnet on a Macbook Pro is totally doable while multi-tasking. Ideally, you&#39;d run the instance on a dedicated machine to avoid these problems, but that&#39;s not always going to be an option for people.&lt;/p&gt;
&lt;p&gt;My recommendation for system requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At least 8GB RAM&lt;/li&gt;
&lt;li&gt;i7 Quad Core or better&lt;/li&gt;
&lt;li&gt;At least 100GB of free space on your hard drive&lt;/li&gt;
&lt;li&gt;Patience&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
</content>
  </entry>
  
  <entry>
    <title>How I Became a Developer in My 30s</title>
    <link href="https://polluterofminds.com/blog/how-i-became-a-developer-in-my-30s/"/>
    <updated>2020-07-05T15:37:36Z</updated>
    <id>https://polluterofminds.com/blog/how-i-became-a-developer-in-my-30s/</id>
    <content type="html">&lt;p&gt;When I was building &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt;, I was fortunate enough to be able to go to quite a few developer-focused events and speak. Invariably, at some point in the talk, I would describe my path to becoming a developer. The non-traditional developer path is one that tends to inspire and motivate, but every time I told it, I felt like that guy at the bar who would tell the same old story no matter how many times people had heard it. It&#39;s taken me a long time to get over that feeling and a long time to recognize that this &amp;quot;bar&amp;quot; is made up of millions of people who have never heard my story. Some will not want to hear it, some won&#39;t care. But some will find something in it that helps them.&lt;/p&gt;
&lt;p&gt;So, for the first time, I am laying out my path to becoming a developer in my own words in written form.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In 2015, I enrolled in a Master&#39;s program. It wasn&#39;t for computer science. It wasn&#39;t for information technology. It was a Masters in Fine Arts in Creative Writing. I&#39;d been writing my whole life. In fact, one of my first companies was a sports media company where I literally wrote thousands of blog posts to help that company gain traction. But blog posts are very different from fiction. I&#39;ve been an avid reader, and I had even dabbled in writing screenplays (landing myself an agent and everything...I think*). But I had never written prose. No short stories. No novels—at least none since I was 10 or 11.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*This is a story for another day&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I had waited until more than a decade after I had finished high school, and more five years after my very extended time getting a bachelor&#39;s degree to commit to an education I was actually excited about. I used my bachelor&#39;s degree as my practical degree, the thing that allowed me to get a job and get my finances under control. And once they were under control, I spent a ridiculous amount of money on an MFA, knowing full well that the degree would never pay for itself in terms of salary and job opportunities. But it was something I really loved and wanted to do.&lt;/p&gt;
&lt;p&gt;As I went through that program, I started building up a portfolio of short stories. I started having my work published in literary journals. I began what would become my thesis—my first real novel. All of it was saved in Google Docs. I was a very early adopter of cloud storage and cloud tools, and there was no way I was going to do my writing on a piece of software that was locked to the device I was using (Microsoft Word). Yet, as I progressed through the program, I noticed issues with Google.&lt;/p&gt;
&lt;p&gt;They would &lt;a href=&quot;https://www.ftc.gov/news-events/press-releases/2019/09/google-youtube-will-pay-record-170-million-alleged-violations&quot;&gt;violate privacy&lt;/a&gt;, they would &lt;a href=&quot;https://www.engadget.com/2017-10-31-google-docs-users-locked-out.html&quot;&gt;lock people out&lt;/a&gt;, they would &lt;a href=&quot;https://www.businessinsider.com/facebook-google-information-nsa-iphone-android-data-personal-2016-2&quot;&gt;sell user data&lt;/a&gt;. These things would only become more prevalent as time went on, and I became increasingly uncomfortable with the idea that my most important writing was under the control of a conglomerate that could lock me out at any time or spy on what I was doing. So, I looked for an alternative. Something that would let me own my own content and protect it while still experiencing the benefits of cloud storage and access from any device.&lt;/p&gt;
&lt;p&gt;I couldn&#39;t find a good alternative.&lt;/p&gt;
&lt;p&gt;Rather than give up, I decided to build an alternative for myself. I&#39;d been into technology since I was in elementary school. I&#39;d first taken a computers class and learned HTML in 7th grade. But I had never been able to get over the hump of learning to code no matter how many times I tried. And I tried a bunch. Some businesses I wanted to launch never got off the ground because I couldn&#39;t build them. This time, though, it felt different. I had an end goal. A specific application that would solve a specific problem. I had no intention of turning it into a business. I just wanted to write.&lt;/p&gt;
&lt;p&gt;In 2016, I started learning. As the Google privacy and ethical violations mounted, I doubled down on my learning. I didn&#39;t enroll in another university program. Instead, &lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt;, &lt;a href=&quot;https://udemy.com/&quot;&gt;Udemy&lt;/a&gt;, and YouTube were my campuses. What had always felt so abstract when I tried learning programming before was more concrete. I could see how I could apply the abstract concepts to specific problems. I learned and I built.&lt;/p&gt;
&lt;p&gt;I built my son a &lt;a href=&quot;https://github.com/jehunter5811/jehunter5811.github.io&quot;&gt;JavaScript side-scrolling Minecraft&lt;/a&gt; story game and eventually &lt;a href=&quot;https://jehunter5811.github.io/&quot;&gt;published it online&lt;/a&gt; for anyone to play. I built small projects and even began contributing to some open-source projects. During all of this, I&#39;d fallen down the rabbit hole of bitcoin and blockchain technology. I could see the potential to leverage this technology to cryptographically protect my writing. And this is where the true beginning of Graphite came from.&lt;/p&gt;
&lt;p&gt;With a year of development experience (on small side projects) under my built, I was able to build the app I had wanted to build. I finished the first iteration of Graphite just as I was finishing my MFA.&lt;/p&gt;
&lt;p&gt;The first interface was simple, ugly, but functional. You&#39;ll also note I made the mistake many developers make early on—scope creep. My little document editing app became a full office suite. That was ultimately a huge mistake, but again, that&#39;s a story for another day.&lt;/p&gt;
&lt;p&gt;As I was learning and building, I joined developer communities. I helped answer questions where I could, and I got my questions answered many times. I made friends and learned a ton. And eventually, people found out about Graphite. They encouraged me to release it into the wild. Technically, Graphite launched in December of 2017, but I&#39;d been using it for months before that.&lt;/p&gt;
&lt;p&gt;Launching Graphite and participating in developer communities helped me get the attention of a lot of people. I was asked to &lt;a href=&quot;https://www.youtube.com/watch?v=71jvS8g1YWA&quot;&gt;present Graphite&lt;/a&gt; at a developer-focused, blockchain-centric conference in Berlin. Somehow, I had gone from non-developer to open source developer speaking at conferences across the globe.&lt;/p&gt;
&lt;p&gt;Graphite would go on to be featured on Product Hunt and to trend on the front page of Hacker News for two days. I built it up to thousands of users and was able to speak at many more events. But at the end of the day, the thing that mattered most to me is that I had finally learned to code. That transition set off a series of events that would allow me to make the full jump into programming. First, at my day job. Then full-time on my own projects at Graphite, &lt;a href=&quot;https://simpleid.xyz/&quot;&gt;SimpleID&lt;/a&gt;, and now my consultancy.&lt;/p&gt;
&lt;p&gt;I hope that people who are interested in learning to code read this and feel encouraged. I hope people recognize that it doesn&#39;t matter how old you are. It may take many attempts to learn, but that&#39;s OK. It took me over 20 years to finally get over the hump, but I did it. And you can too.&lt;/p&gt;
&lt;p&gt;If you ever have questions and think I might be able to help, &lt;a href=&quot;mailto:justin.edward.hunter@protonmail.com&quot;&gt;don&#39;t hesitate to reach out&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Post Mortem on the Tachyon Startup Accelerator Experience</title>
    <link href="https://polluterofminds.com/blog/post-mortem-on-the-startup-accelerator-experience/"/>
    <updated>2020-06-29T18:27:13Z</updated>
    <id>https://polluterofminds.com/blog/post-mortem-on-the-startup-accelerator-experience/</id>
    <content type="html">&lt;p&gt;As some of you now know, &lt;a href=&quot;https://polluterofminds.com/startups-and-difficult-decisions/&quot;&gt;I left my last start-up&lt;/a&gt; to help the company extend its runway and survive. That startup is an alum of &lt;a href=&quot;https://labs.consensys.net/tachyon/&quot;&gt;Consensys&#39;s Tachyon accelerator&lt;/a&gt;, and it represented my first experience with a startup accelerator. I&#39;ve oscillated between a general disdain for venture funding and an admission that many companies just can&#39;t exist without it. Startup accelerators, of course, represent venture funding. Just on a smaller scale and with more hands-on coaching.&lt;/p&gt;
&lt;p&gt;Before I dive in, a little background. SimpleID was launched as a response to a shared experience my co-founders and I had in building decentralized apps. The onboarding experience was absolute shit. We had built in the Blockstack ecosystem and couldn&#39;t get real traction outside the crypto-enthusiast market because of the poor user experience around decentralized key management. So, we started building an open source solution to the Blockstack problem. However, we realized Blockstack&#39;s ecosystem was far too small to sustain anything that might turn into a real business. So, we began exploring Ethereum. Ethereum has a much larger developer population, significantly more applications, and, importantly, investment money spread out across protocols, tools, and apps. That was attractive to us, so we pivoted into an onboarding tool for developers building in the Ethereum space. It was with that pitch—give developers the tools to build onboarding experiences in the Web3 space that are as easy as Web2—that we were accepted into the Tachyon accelerator.&lt;/p&gt;
&lt;p&gt;We were the third cohort for the blockchain-focused accelerator. This particular cohort was focused on decentralized finance (DeFi), and while we were not specifically a DeFi tool, our software could be leveraged by everyone operating in the decentralized finance space.&lt;/p&gt;
&lt;h3&gt;Enough Background, Just Tell Me How It Was&lt;/h3&gt;
&lt;p&gt;If you&#39;re reading this, you surely care less about SimpleID than you do the startup accelerator experience itself, so let&#39;s get to it. How does a startup accelerator work, what&#39;s the day-to-day, how do you balance attendance with...having a life?&lt;/p&gt;
&lt;p&gt;I can only speak with confidence on the Tachyon accelerator, but from conversations I&#39;ve had with other founders and through my own research, other accelerators operate very similarly to Tachyon&#39;s. In Tachyon&#39;s case, the program was three months. However, those three months were stretched to four months because of the Fall and Winter holidays in which participants got breaks to go home to see family.&lt;/p&gt;
&lt;p&gt;The first thing you have to do if you don&#39;t already live in the city where the accelerator is being held (almost all accelerators require founders to attend in person), is find living accommodations. Tachyon is based in New York City, and &lt;a href=&quot;https://www.vox.com/the-goods/2019/1/9/18174095/airbnb-lawsuit-new-york-city&quot;&gt;NYC has had&lt;/a&gt; a &lt;a href=&quot;https://www.cnet.com/news/airbnb-finally-settles-lawsuit-against-nyc-and-hands-over-host-data/&quot;&gt;rough history&lt;/a&gt; with Airbnb, so my co-founders and I were initially hesitant to consider Airbnb as an option. However, per New York&#39;s law at the time, if we considered keeping the rental for the entire duration of the program (breaks included), we would have fallen within the legal requirements and could have used Airbnb. So we began pricing out the rental.&lt;/p&gt;
&lt;p&gt;It. Was. A. Lot.&lt;/p&gt;
&lt;p&gt;We knew it would be a lot going in, and we knew that meant spending a good chunk of the investment money that came with our accelerator program on living expenses. But Tachyon structured their funding in a way that was designed to help mitigate this as much as possible. The first part of the funding was available to founders right away in a stock purchase deal. That first part was a relatively small portion of the overall amount that could be expected from the program, but that amount was largely designed to ensure companies attending the program had enough funds to survive in NYC for 3-4 months.&lt;/p&gt;
&lt;p&gt;My co-founders and I have very different life backgrounds. I have a family, I have a mortgage, bills, etc. They have some of those things, but they have significantly more freedom, so an idea arose. What if they just moved from San Francisco to New York permanently? Instead of spending money on an Airbnb, they could uproot themselves and move the company headquarters to New York. It was an attractive idea in my eyes because New York City is where the vast majority of the action is in the blockchain space. But there was no way I was going to tell my co-founders they should move. I left that decision up to them entirely.&lt;/p&gt;
&lt;p&gt;Ultimately, they decided to make the move and got an apartment in Brooklyn.&lt;/p&gt;
&lt;p&gt;With them in New York, I had to say goodbye to my wife and kids for the three-month program (not really, I visited them every two weeks). The program started the first week of November. My co-founders and I showed up on day-one unsure what to expect. Standing outside the building where the accelerator would be held, the first team we met was an Italian team building &lt;a href=&quot;https://idle.finance/&quot;&gt;Idle&lt;/a&gt;. We didn&#39;t know it at the time, but those guys would become our best friends in the program and we would carry that friendship on after the program.&lt;/p&gt;
&lt;p&gt;The truth is, the whole experience was a lot like college. You show up with a few friends and a lot of strangers. If all goes well, you walk away with even more friends, more knowledge, and a shit pile of debt.&lt;/p&gt;
&lt;p&gt;I&#39;m joking about that last bit. Venture funding is, generally, in the form of equity or debt, and we did walk away with both debt and shares given out in exchange for funding, but unlike college, we had something tangible to show...money and a business.&lt;/p&gt;
&lt;p&gt;But I digress. The experience within the program was structured in a way that allowed us to work as autonomously as possible while still helping us learn. There were just enough interruptions every day that it quickly became clear one of our co-founders, our CTO, could not come into the office and expect to get all the technical work done for our product to succeed. So, he stopped coming, and Tachyon was totally cool with that. They want you to build a successful company. For SimpleID, we were fortunate in that we had three co-founders. My other co-founder and I stuck around, taking the train to SoHo every day and working on the customer development side of the business while attending sessions Tachyon put on for founders.&lt;/p&gt;
&lt;p&gt;Let&#39;s talk about the sessions.&lt;/p&gt;
&lt;p&gt;Again, Tachyon gave founders as much flexibility as possible, but they also wanted you to learn. Now, it&#39;s hard to make a program dynamic enough to address the varying levels of experience founders have, and in our cohort&#39;s case, 80% of the cohort was from outside the United States, so there were definitely ranges in knowledge around US-based business operations and startups.&lt;/p&gt;
&lt;p&gt;The sessions were largely good. One session might be focused on fundraising, the next might be on operational processes and legal structures. These sessions were good, if not always helpful. But the area where Tachyon really shined was their Thursday happy hours.&lt;/p&gt;
&lt;p&gt;The happy hour was designed around founder lessons. Tachyon would bring in founders of companies that had raised money, had seen success. These founders would talk about their experiences and then take questions from the cohort. And then, we&#39;d all hang out in the office with the invited founders, drink beers, eat snacks, and talk shop. This is where I learned the most.&lt;/p&gt;
&lt;p&gt;In fact, it was in those early Thursday happy hours that I learned the best way to make our business successful was to get out and meet with customers and potential partners in a more casual way than business schools would suggest. This is where NYC did its thing. There was never a shortage of places my co-founders and I could meet customers, partners, and investors.&lt;/p&gt;
&lt;p&gt;I had started other companies before this one, but I wouldn&#39;t have said I was good at talking to customers before this program. The combined knowledge I gained from the program and the newfound ability to go out and meet people in person combined to up my customer development game significantly.&lt;/p&gt;
&lt;p&gt;But I digress again.&lt;/p&gt;
&lt;p&gt;This thing is getting long, so let&#39;s get to the part you might care about the most.&lt;/p&gt;
&lt;h3&gt;What About Demo Day And The Money&lt;/h3&gt;
&lt;p&gt;Tachyon doesn&#39;t do a traditional startup demo day. Instead, they have an &amp;quot;Investor Day.&amp;quot; In this scenario, the startups do not get up on a stage and pitch to a crowd. Instead, a bunch of investors are brought in and placed into meeting rooms. The teams then get to speed pitch the investors in a round robin format.&lt;/p&gt;
&lt;p&gt;This experience was invaluable. I&#39;m not sure I would have predicted that when first told of this process. I think going in, I thought a traditional demo day would be better. But what this structure did was force us all to learn how to properly take investor meetings. The compressed timeframe helped us frame our pitches. The practice we got leading up to the event made it so that when the event day came, we knew every question someone might ask us and had an answer ready.&lt;/p&gt;
&lt;p&gt;All that said, I still look back on Investor Day as investor meeting practice. I&#39;m not sure if anyone walked away from that day with investment commitments. But I can promise every single company walked away better equipped to go set their own meetings and execute on those meetings.&lt;/p&gt;
&lt;p&gt;Now, the money. As I mentioned, the first part of Tachyon&#39;s investment was a stock purchase agreement. The second, larger part, was in the form of a convertible note. I was not as excited about this as I was about an equity arrangement. In fact, my co-founders and I seriously considered rushing our fundraising effort to avoid having to take the convertible note. Having a debt instrument hang over you just felt like it would be unnecessary pressure in an environment where the pressure was already ratcheted up to 1000.&lt;/p&gt;
&lt;p&gt;However, to Tachyon&#39;s credit, they were very patient with my co-founders and I. They had multiple meetings with us, offered up their legal team for us to grill with questions, and generally gave us room to make a wise decision. Which I think we did in taking the convertible note.&lt;/p&gt;
&lt;p&gt;Actually, I don&#39;t think it. I know it. See, COVID-19 hit right at the end of our program (a story I didn&#39;t realize was a story that I&#39;ll tell in another blog post). The world changed. Fundraising changed. Had we not taken that note, SimpleID would not have survived.&lt;/p&gt;
&lt;h3&gt;Would I Do It All Again&lt;/h3&gt;
&lt;p&gt;I&#39;ve asked myself this question a few times since the program ended, and it&#39;s important to know my situation is different from most of the startup founders I know. Having a family back home while I was living in New York was really hard. The stress of days that could stretch on to 15, 16, 17 hours was hard—especially since I am very much anti the workaholic culture.&lt;/p&gt;
&lt;p&gt;But I learned so much. I built relationships that I expect to have for the rest of my life. I succeeded and failed in ways that I couldn&#39;t have had I not done this program. So, would I do it all over again?&lt;/p&gt;
&lt;p&gt;Yep.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Startups And Difficult Decisions</title>
    <link href="https://polluterofminds.com/blog/startups-and-difficult-decisions/"/>
    <updated>2020-06-19T23:12:23Z</updated>
    <id>https://polluterofminds.com/blog/startups-and-difficult-decisions/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Long story short (or as the kids call it, tl;dr): I&#39;m leaving the company I co-founded. Here&#39;s why.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When you run any company you have to be willing to make tough calls. You can&#39;t waver, can&#39;t hesitate. Quite often, the survival of the company hinges on your ability to make the right decision. In a startup, these decisions can range from something as simple as &amp;quot;what&#39;s the right color for this banner on the marketing site&amp;quot; to &amp;quot;should we sell the company&amp;quot;. The success of a startup is often tied to how long the company can survive. Take this quote from a &lt;a href=&quot;https://www.forbes.com/sites/abdoriani/2019/10/24/11-surprising-and-insightful-statistics-about-startups/#33c9bd096120&quot;&gt;Forbes analysis&lt;/a&gt; on startups from last year:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Founders need 2 to 3x longer than they expect to validate a business model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Startups need time to iterate, time to find product-problem fit, and eventually find product-market fit. That&#39;s why it should be no surprise that the early years of a startup are the most dangerous. Succeeding often means holding on for dear life and making it until you &amp;quot;make&amp;quot; it. &lt;a href=&quot;https://www.failory.com/blog/startup-failure-rate&quot;&gt;According to data by Failory&lt;/a&gt;, the first five years for a startup are the danger years.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Failure is most common for startups during years two through five, with &lt;strong&gt;70%&lt;/strong&gt; falling into this category.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As some of you know, I have now founded or co-founded a few startups. Most recently, I co-founded &lt;a href=&quot;https://simpleid.xyz/&quot;&gt;SimpleID&lt;/a&gt;. SimpleID is a user retention and communications platform built for blockchain applications. Our company participated in the third cohort of Consensys&#39;s Tachyon accelerator, giving us invaluable knowledge and opportunity as well as a little bit of funding to bring a product to market. And bring a product to market we did.&lt;/p&gt;
&lt;p&gt;We became the first communications platform in the blockchain space, a space notorious for not talking to their customers. We have begun working with some of the biggest names in blockchain. We have created technology that flat-out didn&#39;t exist before.&lt;/p&gt;
&lt;p&gt;However, we also operate in a market that is nascent. A market that is on the brink of breaking out but hasn&#39;t gotten there yet. We operate in a market where the technology and the capabilities change almost daily. The opportunity is huge, but the timeframe in which a company must survive to reap the benefits of that opportunity is unclear. That presents a challenge when you are surviving on investor dollars. You have to prove traction and prove a future market while stretching every dollar as far as it can go.&lt;/p&gt;
&lt;p&gt;The above is a difficult proposition under normal circumstances. When COVID-19 hit, the difficulty ratcheted up. Raising a seed round during a pandemic in a nascent field became a daunting task, and we decided to double-down on the long-term sustainability of the business. The market will catch up to the technology, and the pandemic will end. But how do we ensure the company survives that long?&lt;/p&gt;
&lt;p&gt;For SimpleID, the answer became clear to me. Clear, but difficult. If I step away, it lengthens the runway for the company considerably. And at the end of the day, I don&#39;t care about whether my name is attached to the company as much as I care about the company carrying on, building great things, and serving that market which will soon be huge.&lt;/p&gt;
&lt;p&gt;So, the difficult decision has been made. I will be leaving the company in the very capable hands of my co-founders Prabhaav Bhardwaj and Alex Carriera. Our time working together will forever be held in our memories, and the friendship we built will always remain. That is why I am confident in my decision, confident in SimpleID&#39;s future, and confident in what my co-founders—my friends—will be able to accomplish.&lt;/p&gt;
&lt;p&gt;What&#39;s next for me? I will be taking some time to do contract work and maybe that contract work turns into something more permanent. Or maybe I decide to control my fate entirely and continue contracting indefinitely. Maybe entrepreneurship will come calling for me again, or maybe I will settle into work on existing products. All I know now is that I&#39;m excited for what&#39;s next and I welcome the challenge.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Remote Done Right</title>
    <link href="https://polluterofminds.com/blog/remote-done-right/"/>
    <updated>2020-05-24T13:21:34Z</updated>
    <id>https://polluterofminds.com/blog/remote-done-right/</id>
    <content type="html">&lt;p&gt;The future is remote. This has become clear in the months since COVID19 disrupted our entire way of life, but there are still plenty of people who argue that remote work is not conducive to a productive workplace. There are people who believe that employees must be tracked to drive productivity, that relationships cannot be built when co-workers are no co-located.&lt;/p&gt;
&lt;p&gt;Let&#39;s get a major caveat out of the way right now: *Remote work is not possible for many jobs. That&#39;s clear, not debatable, and hopefully it&#39;s obvious that this post does not make reference to those types of jobs. *&lt;/p&gt;
&lt;p&gt;When I was getting my MFA, I chose a distance program because I was a working adult. It wasn&#39;t until I was in my 30s that I could afford to get a &amp;quot;frivolous&amp;quot; advanced degree in Creative Writing. And to be able to afford that degree (and keep a roof over my family&#39;s head), I could not quit my job and go attend classes full-time. Fortunately, many graduate programs have adapted a hybrid style learning model where the majority of classes are taught online and they hold a few &amp;quot;residencies&amp;quot; throughout the program. For my program, we had three residencies over the course of the two-year program. Two were located on the university&#39;s campus. One was in Edinburgh—a place I fell so much in love with that my wife and I travelled there for our 10-year anniversary.&lt;/p&gt;
&lt;p&gt;While the distance part of the education was totally immersive and helped me improve significantly as a writer, it was the residencies that helped me create bonds with my cohort that still exist to this day. I did not need to be sitting in a classroom with these folks for two years. All I needed was a few days out of the year to see them in-person, to work alongside them, and to drink with them. Complete immersion is not a necessary component of relationships.&lt;/p&gt;
&lt;p&gt;And that brings me back to remote work. One of the most common arguments I see from employees is that they won&#39;t be able to bond with their co-workers. That may be true of the company is remote without onsite get-togethers or company retreats. But if the company structures their remote work like my MFA program, where the whole company gets together once or twice a year, I promise you the bonds you expect to build by working in the same place as your co-workers can still be built without seeing them in-person everyday.&lt;/p&gt;
&lt;p&gt;How does this work for large companies, though? I worked for GEICO for a number of years. They now have somewhere in the range of 50,000 employees. Google has over 100,000 employees. How can you possibly manage a remote workforce of that size? And how can you have the occasional meeting of the entire team?&lt;/p&gt;
&lt;p&gt;To those questions, I pose two more questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you worked at a large organization like this, were you managed by the same person who managed all 50,000 or 100,000 employees, or were you managed by someone who was in charge of your subset, your much smaller group of employees?&lt;/li&gt;
&lt;li&gt;If you&#39;ve worked at a large organization like this, who did you interact with? My guess is you interacted with a sub-department within a regional office in which you worked. My guess is you didn&#39;t have much in-person interaction with the other 49,950 employees within the company.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- --&gt;
&lt;p&gt;Large organizations already have a governance structure and a hierarchy that supports remote work. You can&#39;t ever interact with all 50,000 or 100,000 other people working at the company. You can, and probably do, interact with the 10-30 other people that work within your department or team. Your boss manages those same people, and your boss could manage those people remotely. Your boss could organize onsite meetings throughout the year to build up the camaraderie. I&#39;d argue that this is all easier to do within a large organization. All the organization has to do is choose to do it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.coinbase.com/post-covid-19-coinbase-will-be-a-remote-first-company-cdac6e621df7&quot;&gt;Coinbase is choosing&lt;/a&gt;. &lt;a href=&quot;https://ottawa.ctvnews.ca/shopify-says-most-employees-will-permanently-work-remotely-following-covid-19-1.4948371&quot;&gt;Shopify is choosing&lt;/a&gt;. &lt;a href=&quot;https://www.wsj.com/articles/facebook-to-shift-permanently-toward-more-remote-work-after-coronavirus-11590081300&quot;&gt;Facebook is choosing&lt;/a&gt; (albeit in an underhanded, take your San Francisco-based pay rate away kind of way).&lt;/p&gt;
&lt;p&gt;There are many other things to consider when it comes to remote work, and I hope to cover them in future posts, but there are some phenomenal resources already out there. Here&#39;s a list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.amazon.com/Remote-Office-Required-Jason-Fried/dp/0804137501&quot;&gt;Remote&lt;/a&gt;&lt;/em&gt;, Jason Fried and David Heinemeir Hannson&lt;/li&gt;
&lt;li&gt;Buffer&#39;s annual &lt;em&gt;&lt;a href=&quot;https://lp.buffer.com/state-of-remote-work-2020&quot;&gt;State of Remote Work&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://knowyourteam.com/blog/&quot;&gt;Know Your Team&lt;/a&gt;&lt;/em&gt; blog&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
</content>
  </entry>
  
  <entry>
    <title>I Wrote a Puppeteer Script That Ran For Two Days</title>
    <link href="https://polluterofminds.com/blog/i-wrote-a-puppeteer-script-that-ran-for-two-days/"/>
    <updated>2020-05-12T19:36:45Z</updated>
    <id>https://polluterofminds.com/blog/i-wrote-a-puppeteer-script-that-ran-for-two-days/</id>
    <content type="html">&lt;p&gt;I have experienced first-hand why open data is so important. Imagine a scenario where you&#39;ve paid for software. This can be something you&#39;ve done personally or something you&#39;ve done for the organization you work for. Now, you are ready to move on to another vendor, another piece of software. All of the data you&#39;ve stored is vital to your work (personal or professional). That data needs to be moved to the new software. This shouldn&#39;t be a problem because it&#39;s your data.&lt;/p&gt;
&lt;p&gt;But is it really?&lt;/p&gt;
&lt;p&gt;If you can&#39;t easily port the data from one service to another, it becomes less owned by you and more owned by the company providing the software. If there&#39;s no way at all to get the data out, it becomes wholly owned by the company managing the software you&#39;re using. This is called vendor lock-in. It can be intentional and strategic or it can be a poor product design. In any case, if you&#39;re in the latter situation, you&#39;re out of luck.&lt;/p&gt;
&lt;p&gt;Unless…&lt;/p&gt;
&lt;p&gt;I found myself in a situation where the software vendor had complete control of the data. Data that did not belong to them and should have been easily accessible. There were no APIs to query to get the data. Everything was rendered server-side and returned to the client. So sifting through network requests didn&#39;t help. There was only one solution left to try: Puppeteer.&lt;/p&gt;
&lt;p&gt;From the &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer Github&lt;/a&gt; repository:&lt;/p&gt;
&lt;p&gt;Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.&lt;/p&gt;
&lt;p&gt;Generally speaking, Puppeteer is used for automated client-side testing. It allows you to run a headless browser that can crawl a page, look for elements, enter text, click buttons, and more.&lt;/p&gt;
&lt;p&gt;Turns out, it&#39;s also great for scraping data. And by &amp;quot;great&amp;quot;, I mean tedious as hell but gets the job done. In my case, I not only had to use Puppeteer to scrape certain pieces of data from a software vendor that had locked the data in their own silo, but I had to also wrestle with legacy web technology.&lt;/p&gt;
&lt;p&gt;Remember &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset&quot;&gt;framesets&lt;/a&gt; and frames? Not &lt;code&gt;iframes&lt;/code&gt; but &lt;code&gt;frames&lt;/code&gt;. This pre-HTML5 technology was still in use by the vendor in question, so I got to dig deep into my JavaScript toolbox to properly scrape the necessary data from the pages I accessed.&lt;/p&gt;
&lt;p&gt;There were four main things I had to do with my Puppeteer code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the raw text data from each page&lt;/li&gt;
&lt;li&gt;Navigate to the links to other pages referenced on the original page and grab text data from each of those pages&lt;/li&gt;
&lt;li&gt;Download all files linked on each page&lt;/li&gt;
&lt;li&gt;Screenshot each page (in case anything was missed in this scraping process, at least the screenshot would provide reference data)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of the above had to be applied to &lt;em&gt;7,000 pages&lt;/em&gt; of data. Wow.&lt;/p&gt;
&lt;p&gt;If you&#39;ve ever used Puppeteer (or really, if you&#39;ve ever used the web), you know that network requests can take varying amounts of time to resolve. For an application that is rendered server-side, this means you have to wait for the network request to finish before you can do any scraping. So, each page could take anywhere between one and five seconds to load. Assuming the average load time was 2.5 seconds, we are already at 17,500 seconds of scraping time just for loading those pages.&lt;/p&gt;
&lt;p&gt;But remember, I also had to grab the links to referenced pages within the original pages and grab the sub-data from those pages. We&#39;ll play it conservative and say there was just one additional page referenced on each original page. And if we apply the same 2.5 second average load time, that&#39;s an additional 17,500 seconds of scraping time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gets out calculator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For just the first two steps above, we have a script that will need to run for &lt;em&gt;9.72 hours&lt;/em&gt;. What about for the next two steps in the four-step process?&lt;/p&gt;
&lt;p&gt;Each original page had various files attached that needed to be downloaded. These files could be PDFs, email messages, images, documents, and more. The sizes of the files ranged. A conservative estimate here would put an average of four files on each of the original pages. Each file download probably averaged about a second.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More math&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The file downloads would take upwards of 28,000 seconds, or an additional 7.77 hours. But we&#39;re not done, because we also have to take a screenshot and save that screenshot for each of the original pages. Puppeteer is pretty quick with this, so each screenshot, even using the synchronous code necessary to make sure everything executed properly, likely took about 1.5 seconds. That means…getting that calculator again…an additional 10,500 seconds, or 2.91 hours.&lt;/p&gt;
&lt;p&gt;That all adds up to 20.33 hours, give or take. And of course, this is just an estimate after the fact, but it checks out. Because, you see, this isn&#39;t just a hypothetical. I ran this script, got the data I needed, and it took from the end of one day to the middle of the next day.&lt;/p&gt;
&lt;p&gt;A script that spanned across two days just to get data I should have easily had access to? That&#39;s vendor lock-in for you. Thank goodness for Puppeteer, a little JavaScript, and a whole lot of patience.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Being Wrong in the Time of a Pandemic</title>
    <link href="https://polluterofminds.com/blog/being-wrong-in-the-time-of-a-pandemic/"/>
    <updated>2020-03-15T20:37:29Z</updated>
    <id>https://polluterofminds.com/blog/being-wrong-in-the-time-of-a-pandemic/</id>
    <content type="html">&lt;p&gt;A friend of mine, while discussing the direction we were going to take on something related to work, asked me, &amp;quot;How do you know if you&#39;re wrong?&amp;quot;&lt;/p&gt;
&lt;p&gt;It was a strange questions because my initial reaction was to think that no one could know they were wrong before knowing they were wrong. And that&#39;s largely true. You can&#39;t predict the future. You can&#39;t know in the moment that you are wrong if you truly believe yourself to be right. But I&#39;ve come to realize he meant something different with his question. It wasn&#39;t about figuring out in the moment if you&#39;re wrong. The real question was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do you analyze whether you were wrong and adjust appropriately after the fact?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems like this is a built-in thing that humans do. We realize we were wrong about something and we address that at the time of realization. But that&#39;s not actually how it works most of the time, is it? We all know the phrase, &amp;quot;history repeats itself.&amp;quot; The only way for that phrase to have any truth—which it does—is for humans to do a poor job at recognizing that they were wrong and adjusting to that fact.&lt;/p&gt;
&lt;p&gt;I&#39;m not always good at this, which I suspect is the state for most people. Though, as a founder of a startup that lives and dies on being able to adjust quickly as the result of being wrong or the result of changes in the market, I have had to get better. And I have gotten better. Made a wrong product decision? Admit it and move on to the next. Targeted the wrong customer segment? Admit it and find a new segment. Made a bad bet on marketing? Admit it and allocate the marketing budget better going forward.&lt;/p&gt;
&lt;p&gt;But what happens when being wrong has significantly more dire consequences? What happens when being wrong can put lives at risk? This is a question many Americans (and people worldwide) have asked themselves internally and, perhaps, aloud as the world has been gripped with COVID-19. What happens if I&#39;m wrong? What happens if my friends and family are wrong? What happens if local governments are wrong? What happens if world leaders are wrong?&lt;/p&gt;
&lt;p&gt;I was wrong.&lt;/p&gt;
&lt;p&gt;It really wasn&#39;t until about two and half to three weeks ago that I started taking the coronavirus spread seriously. When I first heard about the outbreak in China, I was working in New York City. There was some joking paranoia among the people I was working with that slowly descended into real paranoia. Yet, it wasn&#39;t until I was getting ready to return home after three months in New York that the real concern set in. On my flight back home, as a woman next to me offered me disinfectant wipes to wipe down my seat while she wiped down her own, I realized how wrong I had been.&lt;/p&gt;
&lt;p&gt;I try to steer clear of conspiracy theories, and unfortunately, much of the early talk about coronavirus online was full of conspiracies. Many of these conspiracies turned out to be true, but my natural skepticism toward conspiracies made me discount the entire epidemic-turned-pandemic. I didn&#39;t allow myself the time to learn more about the virus. I made a snap judgment.&lt;/p&gt;
&lt;p&gt;And I was wrong.&lt;/p&gt;
&lt;p&gt;But here&#39;s the thing. When I realized I was wrong, I made adjustments. My family has now been social distancing for over a week. We have limited our time away from home to essentials—groceries, mostly. We had been following WHO and CDC recommendations on hand-washing and disinfecting for weeks before this, but now with the realization of just how bad COVID-19 was and is going to be, we&#39;ve hunkered down for what could be a long and frustrating spring and summer. But we did it because it was the right response. Despite me being wrong originally.&lt;/p&gt;
&lt;p&gt;I wish I could say the same is true for everyone who realizes they were wrong about coronavirus. I wish I could say the President of the United States was able to admit he was wrong and adjust. Instead, he&#39;s only now taken action to stem the stock market drop and prevent his hopes at re-election from diminishing. I suspect many people who, today, still joke about COVID-19 just being a flu have realized they are wrong. Yet, they go to the bars for St. Patrick&#39;s Day weekend. They go to restaurants. They ignore that feeling in the back of their mind that says, &amp;quot;you&#39;re wrong, fix this.&amp;quot;&lt;/p&gt;
&lt;p&gt;Being wrong is part of life. Not recognizing and adjusting to being wrong is also a very human thing. Unfortunately, we do not have the luxury of being wrong about coronavirus and not adjusting. We, as a world, have to understand if you are still out socializing and congregating with a lot of people, you are wrong AND you are not acknowledging and adjusting to that wrong.&lt;/p&gt;
&lt;p&gt;We can no long be wrong and ignore being wrong in the time of a pandemic.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What if the Cure for Traffic, Walkable Cities, and Pollution Was Remote Work?</title>
    <link href="https://polluterofminds.com/blog/what-if-the-cure-for-traffic-walkable-cities-and-pollution-was-remote-work/"/>
    <updated>2020-03-13T19:31:35Z</updated>
    <id>https://polluterofminds.com/blog/what-if-the-cure-for-traffic-walkable-cities-and-pollution-was-remote-work/</id>
    <content type="html">&lt;p&gt;Today was the first day of my entire working life where I woke up without a boss to report to. I am working on &lt;a href=&quot;https://graphitedocs.com/&quot;&gt;Graphite&lt;/a&gt; full-time now and taking on some contracting gigs. As part of being your own boss, assuming you don’t have funding and haven’t opened an office for you and a bunch of employees, you work from home. Now, I’ve worked from home plenty of times while working for my last employer. We had an open work culture and weekly work-from-home days for the entire team. But waking up today knowing that every day would be work-from-home day felt different. It was different.&lt;/p&gt;
&lt;p&gt;There are obvious differences (not having to drive into work, not having to get gas, being able to start my work earlier and end my work earlier). But there are also the not-so-obvious differences. For example, instead of going into the office gym on my lunch break, I went for a run in my neighborhood. Spring has a way of confusing the mind and making you think everything is wonderful all the time, and that’s how it was as I ran through my neighborhood today. The temperature was perfect, the sky as blue as it gets. And it was quiet. Incredibly, beautifully quiet. We all know that after Spring come the doldrums of summer, so I readily admit that endorphins I felt were a mix of the run and the season. But as I ran through my neighborhood, it felt like the perfect experience. Get up, work, get some exercise in. What more could I want?&lt;/p&gt;
&lt;p&gt;Here comes the reality check. It WAS a perfect day, and it is amazing not having to deal with commutes into a city center and not have to deal with gas and other headaches. So, I started wondering to myself what it would take to never have to worry about those things. Here’s the list I came up with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grocery store within walking distance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restaurants within walking distance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schools within walking distance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parks within walking distance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coffee shops and other miscellaneous shops within walking distance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I look over that list, I think it looks a lot like the requirements to a walkability score on Zillow or some other home-buying platform. That’s because they are. Yet, the suburbs so often score incredibly low on walkability indeces (my neighborhood score a 0, yep, a freaking 0). Why is that? Why do we allow that?&lt;/p&gt;
&lt;p&gt;We would never be OK with a metropolitan area scoring a 0 on walkability. Is that because it is often, quite literally, impossible to drive anywhere because of congestion? Is it because there are so many people working and living (but mostly working) in one area that if there weren’t stores and amenities within walking distance, people would never come outside? Or is it simply a matter of market demand? Shops pop up around crowded areas BECAUSE those areas are congested, perhaps?&lt;/p&gt;
&lt;p&gt;What if it could be different?&lt;/p&gt;
&lt;p&gt;The reason metropolitan areas become metropolitan areas is employers flock to areas where other employers are. Where the employers are, the employees go. Where the employees go, the shops and restaurants follow. And where all of that converges is where we lose our planet and our sanity. So, back up to the second reason metropolitan areas exist: **Where the employers are, the employees go.**Why? Because employers expect employees to be on-site.&lt;/p&gt;
&lt;p&gt;The world has changed drastically in the last 10–15 years. What used to be called telecommuting (because you were basically tethered to your telephone) is now called remote work. Entire companies are built around the idea. In fact, many companies don’t even have a central office. But there’s still a stigma around remote work, especially in larger companies. &lt;a href=&quot;https://blog.trello.com/working-from-home-is-not-remote-work&quot;&gt;Lauren Moon from Trello makes a good case&lt;/a&gt; for why that stigma still exists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;…a lot of people don’t make the distinction between an employee who has an office but is allowed to work from their home for a day here or there, and a fully functional remote team.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This makes sense when you compare it to just about anything else a company does. If there isn’t a functional plan and intent around that plan, there’s no buy-in. There’s no understanding.&lt;/p&gt;
&lt;p&gt;But this isn’t a post about convincing companies to embrace remote work. I think that’s happening no matter what, and sooner rather than later. This is a post about how a remote-first American culture can reclaim neighborhood connections, reduce transportation costs, improve the health of the workforce, and improve the health of the planet.&lt;/p&gt;
&lt;p&gt;But it means neighborhoods cannot have walkability scores of 0.&lt;/p&gt;
&lt;p&gt;Imagine a suburb with, say, four or five big neighborhood (you know, the master-planned communities). Between those four or five big neighborhoods and the sprinkling of non-master-planned (accident neighborhoods?) communities, there can be upwards of 10,000 people. And that’s just one suburban pocket. There are many of these in every metropolitan region in America.&lt;/p&gt;
&lt;p&gt;If you design around those communities in such a way that each pocket of suburban area is a spoke on a wheel and the stores and shops and other amenities we need and want are the hub, you start building back a community that is walkable. Take my neighborhood for example. There are 3,000 families (that’s code for homes in master-planned community speak) in the neighborhood. So, that means this neighborhood alone might have 6,000 or more people in it. There are two other smaller neighborhoods right near this one. All of the homes in these three communities are within walking distance of the main stretch of road that we all drive on every day. What if that stretch of road stopped being for the sole purpose of getting people from here to the city center and started being for shops?&lt;/p&gt;
&lt;p&gt;The demand would be there is people were, by and large, remote workers. The volume of business would be there based on the small sample size I gave you from my suburban area. It is possible that with enough work and dedication, we could see a reduction in cars on the road, a higher quality of life, more affordability for all socioeconomic groups, and a healthier planet.&lt;/p&gt;
&lt;p&gt;I will readily admit these are the ramblings of someone not well educated on city planning. I could be entirely wrong on many of my assumptions. There are certainly variables I have not considered. But as I work through my first day as my own boss in my home office in my suburban community, I still wonder if it’s possible to bring walkability and a better quality of life to suburban communities through remote work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Are You Practicing Assumption-Based Design Disguised as UX Design</title>
    <link href="https://polluterofminds.com/blog/are-you-practicing-asumption-based-design-disguised-as/"/>
    <updated>2020-03-13T13:24:03Z</updated>
    <id>https://polluterofminds.com/blog/are-you-practicing-asumption-based-design-disguised-as/</id>
    <content type="html">&lt;p&gt;When designing and developing a product, it doesn’t matter how much design thinking you believe your organization exhibits if your designs are based on assumptions. Sometimes there is no way around assumption-based decisions, but if assumptions are your go-to method for solving problems, you’re in trouble.&lt;/p&gt;
&lt;p&gt;Sure, this seems obvious. Yet, so many companies have this assumption-based design process built in. Take user stories for example. When a team is trying to solve a user’s problem and is developing a new feature for that problem, how is the feature need conveyed? Is it conveyed as a problem needing to be solved, or is it conveyed as a feature solving the problem? If it’s the latter, that’s assumption-based design.&lt;/p&gt;
&lt;p&gt;Suggesting a feature based on what you think will solve a user’s need is nothing more than guesswork. Instead, the feature suggestion should be vague, and the problem should be clear. If a user is struggling with updating their profile, suggesting a new feature that auto-completes profile information might sound like a genius solution. However, if that enhancement was arrived at by any other means than significant research, it is based on assumption. What if the problems with completing the profile lie in a user’s desire not to share information your organization requires? What if the problem lies in a bug with your software that prevents important profile instructions from displaying in some older browsers?&lt;/p&gt;
&lt;p&gt;I could play the what if game all day, and that’s the point. Suggesting enhancements to your product using user stories that have already presumed to have solved the problem is a mistake. There are ways around this problem, though. Instead of the traditional user story, your organization might try using &lt;a href=&quot;http://blog.intercom.io/using-job-stories-design-features-ui-ux/&quot;&gt;job stories&lt;/a&gt;. Your organization might try using a persona-based solution that requires you to research the problems based on how you’d like your persona to be reflected once they have been able to use your product properly.&lt;/p&gt;
&lt;p&gt;Assumption-based design doesn’t just take place in user stories and feature requests, though. It rears its ugly head when a company first sets out to build a new product. It shows up when an executive mandates change for “business reasons.” Assumption-based design can find its way into your product via countless channels. It’s your job as someone who cares about users to recognize an assumption when you see it and suggest data instead. Suggest research. Suggest speaking with customers. Just don’t suggest that the assumption stand without backing.&lt;/p&gt;
&lt;p&gt;Assumptions hurt users. They cost your organization money. They can sink you before you even get started. But they are so easy to avoid if you commit to avoiding them. It’s easy to spot an assumption by simply asking “How do you know?” If the answer is based on concrete research and actual contact with users, then it is not an assumption. If the answer is anything but, it’s probably a design based on assumption alone.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Write Because You Like to Write</title>
    <link href="https://polluterofminds.com/blog/write-because-you-like-to-write/"/>
    <updated>2020-03-13T13:18:14Z</updated>
    <id>https://polluterofminds.com/blog/write-because-you-like-to-write/</id>
    <content type="html">&lt;p&gt;It’s hard to force yourself to do something you don’t want to do. Yet, we do it every day. Many of us dislike our job, but we march into the office every Monday and work through the week. Some of us dislike ourselves, but we refuse to change even though we say we want to. But when it comes to the minor things in life, if we don’t want to do them, we just don’t. You should take baby steps toward doing the things you truly want to do, and that includes your writing.&lt;/p&gt;
&lt;p&gt;If you&#39;ve been writing what you think sells but you are not passionate about the topic or genre, stop. You need to be writing about something for which you have passion. You need to be writing about something that sparks an interest deep down. Otherwise, you will churn out nothing worth a reader’s time. Hell, you won’t churn out anything worth your own time. As much as you convince yourself that writing is writing, and you’ll focus on your passion when you’ve “made it,” you won’t. If you go down the path of writing about what you think sells or what others have told you sells, you will have a difficult time breaking that habit.&lt;/p&gt;
&lt;p&gt;Writing is a deeply personal experience. But it’s one we share with others. We grow thick skin, we bare our souls, we try to inspire, to entertain, to invoke emotion. You ignore all of that when you write about something for which you have no real interest. And it will show in your writing. No matter how good a writer you might be, you will be far worse off if you choose to go against your passion.&lt;/p&gt;
&lt;p&gt;So what if someone tells you comedy novels do not sell? So what if your love of historical vampire stories runs counter to what might be popular now? So what if you only want to tell stories in the first person from the perspective of the opposite gender when so many say it’s a risky move? Do what goes beyond your interests. Do what drives your passion.&lt;/p&gt;
&lt;p&gt;Today, change the way you write. Write a short story, a few sentences, a few words — write whatever amount you want, but write because you like to write. Not because you are trying to sell something. The world would be better off with more people doing things for the right reasons and less people doing things or money. Will money come if you focus on your passion? Maybe. Maybe not. But in the end you will be happier.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Make Something Today</title>
    <link href="https://polluterofminds.com/blog/make-something-today/"/>
    <updated>2020-03-13T13:12:27Z</updated>
    <id>https://polluterofminds.com/blog/make-something-today/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Since this post was originally published, I have continued building. I built a &lt;a href=&quot;http://jehunter5811.github.io/&quot;&gt;video game&lt;/a&gt; for my oldest son when I was learning Javascript. I launched a &lt;a href=&quot;https://www.graphitedocs.com/&quot;&gt;Google Docs alternative&lt;/a&gt;. And currently, I&#39;m working on a &lt;a href=&quot;https://simpleid.xyz/&quot;&gt;messaging and engagement platform&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;When I was in elementary school I met Chris. I think it was fifth grade. We were in the same classes — our school had a weird set up where even in fifth grade, the kids rotated between different classrooms with different subjects and different teachers — so I’m sure we worked together on some school things. I really don’t remember the exact way we met. I don’t remember our early conversations. However, I do remember the first time I took the bus to his house instead of mine. It was the first time we hung out away from school, and that day set me down the maker’s path for the rest of my life.&lt;/p&gt;
&lt;p&gt;From that one day after school, through middle school, and through high school, Chris and I built things. Some of those things were stupid (as in stupid-dangerous), some of those things were pretty fun, and some of those things flat-out defied the world to which most people felt children were confined. In no particular order, we built:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An aircraft carrier landing simulator&lt;/li&gt;
&lt;li&gt;At least five soapbox derby cars&lt;/li&gt;
&lt;li&gt;A go cart with a steel frame and a lawn mower engine&lt;/li&gt;
&lt;li&gt;An airplane that never flew — but we had every intention of being the dummy (I mean test) pilots&lt;/li&gt;
&lt;li&gt;Model airplanes&lt;/li&gt;
&lt;li&gt;Model cars&lt;/li&gt;
&lt;li&gt;Lowrider model cars with working hydraulics&lt;/li&gt;
&lt;li&gt;An engine&lt;/li&gt;
&lt;li&gt;The entire back end of a Toyota Corolla&lt;/li&gt;
&lt;li&gt;Christmas ornament explosives (we lived in the desert and were bored, leave us alone!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We built so much more than that, and I could dedicate an entire article to each of the things we built. We didn’t know any kids in elementary school or middle school or high school building the things we built.&lt;/p&gt;
&lt;p&gt;In middle school, I met Andrew. He, Chris, and I became inseparable until after high school. Andrew wasn’t necessarily the maker Chris and I were. He was into cars by the time we reached high school, so he helped Chris and I in the garage. He tinkered with his own car when he got one. But really, Andrew was pragmatic, business-savvy, and financially responsible. Hell, he bought that first car himself for $3500. I got my piece of crap car for $500 and Chris got his for a couple hundred as well.&lt;/p&gt;
&lt;p&gt;While Andrew wasn’t the maker Chris and I were, he was integral in helping me continue my maker ways after high school. Andrew first realized that the parts we were ordering for our cars could be had for so much cheaper if we were a business ordering wholesale. Without a second thought, we went to the state courthouse and filed for a business license. We were 18, and we officially owned our own business — JA1 Racing. Justin, Andrew, Number One, Racing. Stupid, stupid name. But it worked for the most part.&lt;/p&gt;
&lt;p&gt;This was in 2002, so we had a hard time getting manufacturers to add us to their wholesale list because we were “an internet company.” We didn’t even have a website at the time, so it was hard to argue that we were even that. We definitely weren’t a brick and mortar which many of the manufacturers required when signing up distributors. But we made it work.&lt;/p&gt;
&lt;p&gt;We received the wholesale pricing books from some of the top parts manufacturers. We had access to order parts for our car at a fraction of the cost our friends were paying. So we took advantage of that and tricked out our cars with money from our part-time jobs.&lt;/p&gt;
&lt;p&gt;But buying parts for our own cars wasn&#39;t enough. We could sell these parts to our friends. We could sell these parts to strangers. So we built our website. The domain — &lt;a href=&quot;http://www.ja1racing.com/&quot;&gt;www.ja1racing.com&lt;/a&gt; — was so bad no one even owns it now. But it was ours. We created a logo, a slogan, and stocked our site full of inventory. We didn’t have to actually have any inventory since anything sold would be drop-shipped to our customers. Thanks to the wonders of the Internet Archives Wayback Machine, here’s what the site looked like in 2003:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20031223033513/http://www.ja1racing.com/&quot;&gt;https://web.archive.org/web/20031223033513/http://www.ja1racing.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In reality, our business was not even a business. We never filed any tax documents. We made sales to exactly two people — both of which lived in the same town we did. We never sold to anyone online. We were just out of high school and didn’t have a clue how to run a business. The one thing this “business” proved to me was that I loved making things.&lt;/p&gt;
&lt;p&gt;As time went on, and as college came and went, I tried to make other things. I tried to write books, but that never worked out. I decided to write screenplays. I loved movies, so it only made sense, right? I wrote a horrible “sequel” to Con Air that only my roommates read. I wrote a terrible comedy about working in a grocery store. I wrote half movies. I wrote titles to movies. Then I made something I was proud of. It took time, but I completed a screenplay called Beneath the Shield.&lt;/p&gt;
&lt;p&gt;That screenplay got the attention of an agent. I had meetings, we worked on multiple drafts. The screenplay was pitched to studios. This went on for over a year. One day, I realized my contract with the agency had run out, and they had never bothered to call me to renew it. That hurt. I didn’t write another screenplay after that, but I still had a burning passion to make things, to create, to build.&lt;/p&gt;
&lt;p&gt;I was late to blogging when I stumbled into it. I love baseball, and I hate analysis that feels canned and doesn’t explore all angles. I read an article by an ESPN analyst, and I felt compelled to respond. I immediately searched for “blogs” on Google. That’s right, it was 2011, and I was new to this whole “blogging” thing that seemed to be gaining steam. I was so new, in fact, that I had to do a Google search to even figure out where to start a blog. Not surprisingly, I hit on Blogger — a Google company.&lt;/p&gt;
&lt;p&gt;I launched my first blog, a baseball site called The 5.5 Hole. I wrote a piece on Albert Pujols and shared it with friends and family. They seemed to really enjoy it, so I continued writing. I didn’t do much promotion. I had no idea what SEO meant. I wasn’t even on Twitter initially. I would occasionally share my articles on Facebook, though.&lt;/p&gt;
&lt;p&gt;One day, while combing through an email account I rarely used — and coincidentally the one I used to sign up for Blogger — I noticed a message from someone at a site called Call to the Pen. Blaine Blontz said he was the editor there and wanted to know if I’d write for them. The email was over a month old because I simply forgot that email account existed until that day. I replied, apologized, and asked if he was still interested. He was.&lt;/p&gt;
&lt;p&gt;I signed up to join the &lt;a href=&quot;https://fansided.com/&quot;&gt;FanSided&lt;/a&gt; sports blog network. I would be a staff writer for Call to the Pen. The position came with no pay, but I was sure more people would read my writing now. I wrote my first article the same night, updated my bio, and caught the attention of one of the higher-ups (someone who was actually being paid). He noted that I was a Padres fan. As luck would have it, FanSided’s Padres site needed an editor. He asked if I would take over as the editor — a paying gig. I said yes immediately.&lt;/p&gt;
&lt;p&gt;For over a year, I was the editor at Chicken Friars, the San Diego Padres site for FanSided, while also acting as a staff writer for Call to the Pen. Eventually Blaine, the editor at Call to the Pen who had originally recruited me, left for another site. I applied to take over as editor of Call to the Pen. I got that position, but I was starting to get burned-out.&lt;/p&gt;
&lt;p&gt;Writing for very little pay was wearing on me. The whole pay your writers nothing, or very little, model was frustrating. I was not happy with the direction of the network, and I thought I could do something on my own. I wanted to make something on my own again.&lt;/p&gt;
&lt;p&gt;So I did. I reached out to Blaine and asked him if he wanted to launch a new baseball site with me. The site would be called MLB Injury News and it would cover nothing but injuries in baseball. This was something no one was doing, and I was convinced it would be a success. However, my expectations of success were modest compared to what we would actually see. Blaine signed on with no hesitation.&lt;/p&gt;
&lt;p&gt;For the first time in my life, I paid for something (other than domain names and hosting) for a business I was working on. Blaine and I agreed to purchase a custom logo. And to be honest, even nearly eight years later, I still love that parody of the MLB logo.&lt;/p&gt;
&lt;p&gt;We both had experience in writing, SEO, marketing, and everything that comes along with making a sports site successful. And it was successful. Our site grew quickly and we soon brought on additional writers. We worked hard to pay those writers as soon as we could because we both remembered how frustrating writing for free could be.&lt;/p&gt;
&lt;p&gt;By the time it was all said and done, by the time I decided I was ready to build something new, our one little site had morphed into four, then it consolidated down to one large network. I launched initial partnership talks with a company called Fantasy Pros shortly after that. The content we were producing was extremely valuable to fantasy sports players. Eventually, Fantasy Pros acquired our entire blogging network. Blaine continues to work for Fantasy Pros, but it was time for me to move onto something else.&lt;/p&gt;
&lt;p&gt;I wanted to keep building things, but I knew my building would have to come in the realm of technology going forward. I was not likely to build anything physical again, so I started learning HTML and CSS. I began building websites. I learned JavaScript. I learned user experience design. I learned Photoshop and Gimp and Sketch and all the tools I needed to be a good designer. I learned the concept of &lt;a href=&quot;https://wiki.c2.com/?DontRepeatYourself&quot;&gt;DRY&lt;/a&gt; and preprocessors and all the things I needed to be a good front-end developer. Then, I started building.&lt;/p&gt;
&lt;p&gt;I built my first website late last year — a website for my son’s daycare. Then I built small things. A contact form page, an interactive portfolio, a mobile hamburger menu using nothing but CSS. I had discovered something. I could build in the digital world. I could make things as frequently as I wanted.&lt;/p&gt;
&lt;p&gt;I designed the interface for a web application I still hope will see the light of day (UPDATE: it never did see the light of day). I designed new interfaces for GEICO, the company I was working for at the time. I designed reimagined interfaces, fake mobile applications and more.&lt;/p&gt;
&lt;p&gt;Now, I’m building again. I’ve grown comfortable with my front-end development skills. I am building landing page templates for companies that need to call customers to action. Maybe it’s a sign-up form. Maybe it’s a marketing site for a new mobile application. I’m building a little bit of everything. I recently uploaded my first template to Envato’s marketplace. I don’t know that I’ll sell anything, but I know I love making things.&lt;/p&gt;
&lt;p&gt;We live in a world of consumption, and trust me, I consume a lot. I read blogs, magazines, and books at a feverish pace. My wife and I allow ourselves some time after our son is asleep to watch an hour or two of television. I listen to music when I run or when I work at my desk. I consume a lot. But I truly believe we should all make things too. If you consume a lot, you should make a lot. It balances the world out.&lt;/p&gt;
&lt;p&gt;If you’re not already doing it, make something today.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Building Products That Solve Problems</title>
    <link href="https://polluterofminds.com/blog/building-products-that-solve-problems/"/>
    <updated>2019-09-20T15:59:44Z</updated>
    <id>https://polluterofminds.com/blog/building-products-that-solve-problems/</id>
    <content type="html">&lt;p&gt;When writing software, it’s easy to assume whatever is shipped will solve problems. After all, that’s the whole idea of code — automate the solution of specific problems. But code doesn’t do this inherently. And when you productize code, it gets even more complicated. All of this applies doubly to code designed around new technologies. It’s incredibly easy to get excited about the technology and build solutions that people don’t actually want or need. Even if they do need the solution, it’s possible people don’t want it. In that case, your code has to solve the problem but also bridge that gap of need and want.&lt;/p&gt;
&lt;p&gt;For my company, &lt;a href=&quot;https://www.simpleid.xyz/?s=med?t=buidl&quot;&gt;SimpleID — a developer tools suite for Web 3.0&lt;/a&gt;, we fall into that last bucket. We need to solve a problem but we need to do it in a way that enables the ultimate end-users to adopt the solutions built via SimpleID en masse. We’re not alone in this problem. The issue applies to product creators across Web 2.0 and Web 3.0.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the market I’m working in: Web 3.0. Web 3.0 is essentially the decentralized web. The web where users control their data, not big tech companies. In the Web 3.0 space there are many solutions offering non-custodial, completely decentralized experiences. They are great, and they are needed. But to those solutions, the question we have to ask is:&lt;/p&gt;
&lt;h4&gt;Who is the customer?&lt;/h4&gt;
&lt;p&gt;If you are building a solution that applies to the slim minority of cypherpunks and developers who are willing to go through the complexities of using your solution, that’s great. But if you, like many in the Web 3.0 space, want to attract the wider internet user-base, you have to make your solution attractive to that market.&lt;/p&gt;
&lt;p&gt;In other words, you have to bridge the gap.&lt;/p&gt;
&lt;p&gt;The problems many of us in the Web 3.0 space are trying to solve are similar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Privacy&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Data Ownership&lt;/li&gt;
&lt;li&gt;Identity Control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The way those problems are solved is what differs. In almost all cases today, the tooling around building applications that satisfy the above needs place an unprecedented burden on users of the modern web. I say modern web here because surely someone somewhere will be able to point out a scenario in the very early days of the World Wide Web where people had extreme cognitive burden in order to use the new technology.&lt;/p&gt;
&lt;p&gt;So, again, when building in the Web 3.0 space, ask yourself who are you building for. If you’re building for a future customer who will be willing to shoulder the additional burden of using the protocol or product, do that. That’s necessary. If you’re building for the developers who will eventually find a way to make the underlying protocol and tools convenient, do that. That’s also necessary. But if you’re building for enterprises and consumers today, consider the solution you’re offering.&lt;/p&gt;
&lt;p&gt;Does it truly need to be non-custodial? Does it truly need to be trust-less? Is what you’re offering so much better that you can legitimately ask people to do more work AND pay you? Or, is there a way to give people enough decentralization and access to decentralized technologies to satisfy the problems in the bullet-points above?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/decentralion/status/1167026252328374273?s=20&quot;&gt;https://twitter.com/decentralion/status/1167026252328374273?s=20&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whether it’s in the Web 3.0 space or the Web 2.0 space, it’s necessary to always ask yourself who your customers are. Build for them, not for yourself. Your ideals matter, but if you are trying to build for an audience, their ideals matter more.&lt;/p&gt;
&lt;p&gt;Your product is only as good as the adoption is sees. Adoption, of course, is relative. But no matter what, you have to see that people are using it. Otherwise, it’s very possible you are not solving the problems your customers need you to solve.&lt;/p&gt;
</content>
  </entry>
</feed>